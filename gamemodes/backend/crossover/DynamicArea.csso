/***
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic & Ogy_
 *  @Date           05th May 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           dynamicarea.csso
 *  @Module         crossover
 */

#include <ysilib\YSI_Coding\y_hooks>

public OnPlayerEnterDynamicArea(playerid, areaid) 
{
    new i = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID);

    PlayerTextDrawSetString(playerid, Player_TDs[playerid][4], eZones[i][e_ZONE_NAME]);


// Bunker
    if( areaid == g_EntryArea ) {
        if( g_EntryExitSkip{playerid} ) 
        {
            g_EntryExitSkip{playerid} = false;
        } else {
            g_EntryExitSkip{playerid} = true;
            SetPlayerPos(playerid, -1578.0275, -2569.4412, 28.8323);
        }
        return 1;
    }

    if( areaid == g_ExitArea ) {
        if( g_EntryExitSkip{playerid} ) {
            g_EntryExitSkip{playerid} = false;
        } else {
            g_EntryExitSkip{playerid} = true;
            SetPlayerPos(playerid, -1584.0164, -2572.3108, 28.8232);
        }
        return 1;
    }

    for(new doorid; doorid < g_DoorsInitiated; doorid ++) {
        if( areaid == g_DoorData[doorid][e_DoorDynArea] ) {
            UpdateDoorState(doorid);
            return 1;
        }
    }

    for(new floor; floor < MAX_ELEVFLOORS; floor ++) {
        if( areaid == g_ElevData[e_ElevDynArea][floor] ) {
            if( g_ElevData[e_ElevFloor] != floor && g_ElevData[e_ElevState] == ELEVSTATE_OPEN ) {
                g_ElevData[e_ElevState] = ELEVSTATE_CLOSING;
                ApplyElevatorState();
            }
            return 1;
        }
    }

    // Safe zona

	foreach(new s : SafeZone)
	{
		if(areaid == SafeZone[s][safeID]) 
		{
			BuildSafeZoneTextDraws(playerid, true);
			InSafeZone[playerid] = true;
		}
	}

    return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid) 
{
    if (!IsPlayerInAnyDynamicArea(playerid)) 
	{
		PlayerTextDrawSetString(playerid, Player_TDs[playerid][4], "Nepoznato");
    }

// Bunker    
    for(new doorid; doorid < g_DoorsInitiated; doorid ++) {
        if( areaid == g_DoorData[doorid][e_DoorDynArea] ) {
            UpdateDoorState(doorid);
            return 1;
        }
    }

    // Safe zona

	foreach(new i : SafeZone)
	{
		if(areaid == SafeZone[i][safeID]) 
		{
			BuildSafeZoneTextDraws(playerid, false);
			InSafeZone[playerid] = false;
		}
	}

    return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if(Iter_Contains(ATMs, EditingATMID[playerid]))
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            new idzzs = EditingATMID[playerid];
            ATMData[idzzs][atmX] = x;
            ATMData[idzzs][atmY] = y;
            ATMData[idzzs][atmZ] = z;
            ATMData[idzzs][atmRX] = rx;
            ATMData[idzzs][atmRY] = ry;
            ATMData[idzzs][atmRZ] = rz;
            
            SetDynamicObjectPos(objectid, ATMData[idzzs][atmX], ATMData[idzzs][atmY], ATMData[idzzs][atmZ]);
            SetDynamicObjectRot(objectid, ATMData[idzzs][atmRX], ATMData[idzzs][atmRY], ATMData[idzzs][atmRZ]);
            
            #if defined ATM_USE_MAPICON
            Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[idzzs][atmIconID], E_STREAMER_X, ATMData[idzzs][atmX]);
            Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[idzzs][atmIconID], E_STREAMER_Y, ATMData[idzzs][atmY]);
            Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON, ATMData[idzzs][atmIconID], E_STREAMER_Z, ATMData[idzzs][atmZ]);
            #endif

            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[idzzs][atmLabel], E_STREAMER_X, ATMData[idzzs][atmX]);
            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[idzzs][atmLabel], E_STREAMER_Y, ATMData[idzzs][atmY]);
            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, ATMData[idzzs][atmLabel], E_STREAMER_Z, ATMData[idzzs][atmZ] + 0.85);

            new queryzz[144];
            mysql_format(SQL, queryzz, sizeof(queryzz), "UPDATE bank_atms SET PosX='%f', PosY='%f', PosZ='%f', RotX='%f', RotY='%f', RotZ='%f' WHERE ID=%d", x, y, z, rx, ry, rz, idzzs);
            mysql_tquery(SQL, queryzz);
            
            EditingATMID[playerid] = -1;
        }
        
        if(response == EDIT_RESPONSE_CANCEL)
        {
            new idzzz = EditingATMID[playerid];

            SetDynamicObjectPos(objectid, ATMData[idzzz][atmX], ATMData[idzzz][atmY], ATMData[idzzz][atmZ]);
            SetDynamicObjectRot(objectid, ATMData[idzzz][atmRX], ATMData[idzzz][atmRY], ATMData[idzzz][atmRZ]);
            EditingATMID[playerid] = -1;
        }
    }
    return (true);
}