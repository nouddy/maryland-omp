/*
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic & Ogy_
 *  @Date           05th May 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           spanel.script
 *  @Module         staff
 */

 #include <ysilib\YSI_Coding\y_hooks>

/*
      _   _                   _          
     | | | |   ___     ___   | | __  ___ 
     | |_| |  / _ \   / _ \  | |/ / / __|
     |  _  | | (_) | | (_) | |   <  \__ \
     |_| |_|  \___/   \___/  |_|\_\ |___/

*/

 hook OnGameModeInit()
{
    print("staff/spanel.script loaded");

}

/*
       ____                                                       _       
      / ___|   ___    _ __ ___    _ __ ___     __ _   _ __     __| |  ___ 
     | |      / _ \  | '_ ` _ \  | '_ ` _ \   / _` | | '_ \   / _` | / __|
     | |___  | (_) | | | | | | | | | | | | | | (_| | | | | | | (_| | \__ \
      \____|  \___/  |_| |_| |_| |_| |_| |_|  \__,_| |_| |_|  \__,_| |___/

*/

YCMD:spanel(playerid, params[], help)
{
	if(help)
    {
        notification.Show(playerid, "HELP", "Server panel za vlasnike.", "+", BOXCOLOR_BLUE);
        return 1;
    }

	if(!IsPlayerAdmin(playerid))
		return SendPlayerNotify(playerid, "Greska", "Samo RCON moze ovo", 1);
	
	Dialog_Show(playerid, "dialog_spanel", DIALOG_STYLE_LIST,
		"Owner Panel",
		"Podesavanja\nAdmini\nVreme\nNapravi\nIzmeni\nIzbrisi",
		"Odaberi", "Izlaz"
	);

	return Y_HOOKS_CONTINUE_RETURN_1;
}

Dialog: dialog_spanel(const playerid, response, listitem, string: inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				SendPlayerNotify(playerid, "Greska", "Trenutno nije u funkciji", 1);
				//notification.Show(playerid, "GRESKA", "Trenutno nije u funkciji", "!", BOXCOLOR_RED);
			}
			case 1:
			{
				SendPlayerNotify(playerid, "Greska", "Trenutno nije u funkciji", 1);
			}
			case 2:
			{
				Dialog_Show(playerid, "dialog_vreme", DIALOG_STYLE_LIST,
					"Vreme Panel",
					"Noc\nDan\nSunce\nKisa\nOluja\nMagla\nPjescana Oluja\nToxic\nDraw Distance",
					"Odaberi", "Izlaz");
			}
			case 3:
			{
				Dialog_Show(playerid, "dialog_napravi", DIALOG_STYLE_LIST,
					"Napravi Funkcije",
					"Kucu\nKlupu\nActor Banker\nBankomat\nBiznis\nSafe Zona",
					"Odaberi", "Izlaz");
			}
			case 4:
			{
				Dialog_Show(playerid, "dialog_izmeni", DIALOG_STYLE_LIST,
					"Izmeni Funkcije",
					"Kucu\nActor Banker\nBankomat\nBiznis",
					"Odaberi", "Izlaz");
			}
			case 5:
			{
				Dialog_Show(playerid, "dialog_izbrisi", DIALOG_STYLE_LIST,
					"Izbrisi Funkcije",
					"Kucu\nSve Kuce\nKlupu\nActor Banker\nBankomat\nBiznis\nSafe Zona",
					"Odaberi", "Izlaz");
			}
		}
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

Dialog: dialog_vreme(const playerid, response, listitem, string: inputtext[])
{	
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				SetWorldTime(2);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na noc!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na noc!", 3);
			}
			case 1:
			{
				SetWorldTime(14);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na dan!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na dan!", 3);
			}
			case 2:
			{
				SetWeather(6);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na suncano!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na suncano!", 3);
			}
			case 3:
			{
				SetWeather(16);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na kisovito!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na kisovito!", 3);
			}
			case 4:
			{
				SetWeather(8);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na oluju!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na oluju!", 3);
			}
			case 5:
			{
				SetWeather(9);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na maglu!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na maglu!", 3);
			}
			case 6:
			{
				SetWeather(19);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na pescanu oluju!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na pescanu oluju!", 3);
			}
			case 7:
			{
				SetWeather(20);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na toxic!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na toxic!", 3);
			}
			case 8:
			{
				SetWeather(-1337);
				//notification.Show(playerid, "Uspesno", "Postavio si vreme na draw distance!", "!", BOXCOLOR_GREEN);
				SendPlayerNotify(playerid, "Uspesno", "Postavio si vreme na draw distance!", 3);
			}
		}
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

Dialog: dialog_napravi(const playerid, response, listitem, string: inputtext[])
{	
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, "kreiraj_kucu", DIALOG_STYLE_INPUT,
					"Kreiraj kucu",
					"Unesi deskripciju i cenu kuce",
					"Odaberi", "Izlaz");
			}
			case 1:
			{
				new id = Iter_Free(iter_Klupa);
			    if(NadjiNajblizuKlupu(id)) // ako zelis smanji radius na 0.5 mada mislim da nepotrebno
			        return  SendClientMessage(playerid, 0xFF0000FF, "[Greska]: {ffffff}U blizini je nadjena najbliza klupa, pomerite se malo");

			    if(id == -1)
			        return SendClientMessage(playerid, 0xFF0000FF, "[Greska]: {ffffff}Nemate vise slotova za postavljanje klupa."), print("** WARNING > Svi slotovi za pravljenje klupa su zauzeti, povecajte iste.");

			    GetPlayerPos(playerid, SeatDownInfo[id][seat_downx],SeatDownInfo[id][seat_downy], SeatDownInfo[id][seat_downz]); 
			    GetPlayerFacingAngle(playerid, SeatDownInfo[id][seat_downa]);

			    KreirajKlupu(id);

			    va_SendClientMessage(playerid, 0x0086E3FF, "[Klupe] > {ffffff}Kreirali ste klupu pod id(%d).",id);
			}
			case 2:
			{
				Dialog_Show(playerid, "kreiraj_bankera", DIALOG_STYLE_INPUT,
					"Kreiraj bankera",
					"Unesi skin bankera kojeg kreirate",
					"Odaberi", "Izlaz");
			}
			case 3:
			{
				new idzz = Iter_Free(ATMs);
				if(idzz == -1) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mogu kreirati vise ATMs.");
				ATMData[idzz][atmRX] = ATMData[idzz][atmRY] = 0.0;
				
				GetPlayerPos(playerid, ATMData[idzz][atmX], ATMData[idzz][atmY], ATMData[idzz][atmZ]);
				GetPlayerFacingAngle(playerid, ATMData[idzz][atmRZ]);

				ATMData[idzz][atmX] += (2.0 * floatsin(-ATMData[idzz][atmRZ], degrees));
			    ATMData[idzz][atmY] += (2.0 * floatcos(-ATMData[idzz][atmRZ], degrees));
			    ATMData[idzz][atmZ] -= 0.3;
			    
				ATMData[idzz][atmObjID] = CreateDynamicObject(2942, ATMData[idzz][atmX], ATMData[idzz][atmY], ATMData[idzz][atmZ], ATMData[idzz][atmRX], ATMData[idzz][atmRY], ATMData[idzz][atmRZ]);
			    if(IsValidDynamicObject(ATMData[idzz][atmObjID]))
			    {
			        EditingATMID[playerid] = idzz;
			        EditDynamicObject(playerid, ATMData[idzz][atmObjID]);
			    }
			    
				#if defined ATM_USE_MAPICON
				ATMData[idzz][atmIconID] = CreateDynamicMapIcon(ATMData[idzz][atmX], ATMData[idzz][atmY], ATMData[idzz][atmZ], 52, 0, .streamdistance = ATM_ICON_RANGE);
				#endif

				new label_string[64];
				format(label_string, sizeof(label_string), "ATM (%d)\n\n{FFFFFF}Use {F1C40F}/atm!", idzz);
				ATMData[idzz][atmLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, ATMData[idzz][atmX], ATMData[idzz][atmY], ATMData[idzz][atmZ] + 0.85, 5.0, .testlos = 1);

				new query[144];
				mysql_format(SQL, query, sizeof(query), "INSERT INTO bank_atms SET ID=%d, PosX='%f', PosY='%f', PosZ='%f', RotX='%f', RotY='%f', RotZ='%f'", idzz, ATMData[idzz][atmX], ATMData[idzz][atmY], ATMData[idzz][atmZ], ATMData[idzz][atmRX], ATMData[idzz][atmRY], ATMData[idzz][atmRZ]);
				mysql_tquery(SQL, query);

				Iter_Add(ATMs, idzz);
			}
			case 4:
			{
				Dialog_Show(playerid, "kreiraj_biznis", DIALOG_STYLE_INPUT,
					"Kreiraj bankera",
					"Upisite cenu za biznis i vrstu biznisa\n1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership | 6: Gas Station | 7: Furniture",
					"Odaberi", "Izlaz");
			}
			case 5:
			{
				Dialog_Show(playerid, "dialog_safezona", DIALOG_STYLE_INPUT, "Maryland - SafeZona Kreiraj:", "** Upisite zeljenu boju za vasu Safe Zonu.", "Dalje", "Izlaz");
			}
		}
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}
Dialog:kreiraj_biznis(const playerid, response, listitem, string:inputtext[])
{
	if(!response)
		return 1;

	if(response)
	{
		new type,price,id;
		if (sscanf(inputtext, "dd", type, price))
	 	{
	 		Dialog_Show(playerid, "kreiraj_biznis", DIALOG_STYLE_INPUT,
				"Kreiraj bankera",
				"Upisite tip biznisa i cenu biznisa\n1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership | 6: Gas Station | 7: Furniture",
				"Odaberi", "Izlaz");

	    	return 1;
		}
		if (type < 1 || type > 7)
	    	return SendClientMessage(playerid,-1, "Tip biznisa moze biti od 1 do 7.");


		id = Business_Create(playerid, type, price);

		if (id == -1)
		    return SendClientMessage(playerid, x_server, "The server has reached the limit for businesses.");

		SendClientMessage(playerid,x_server, "Napravili ste biznis.");
	}
	return (true);
}
Dialog:dialog_safezona(const playerid, response, listitem, string:inputtext[])
{
	if(!response) return 1;
	if(response)
	{
		new boja;
		if(sscanf(inputtext,"x",boja))
			return Dialog_Show(playerid, dialog_safezonekreiraj, DIALOG_STYLE_INPUT, "Maryland - SafeZona Kreiraj:", "** Upisite zeljenu boju za vasu Safe Zonu.", "Dalje", "Izlaz");

		new id;
		id = Iter_Free(SafeZone);
		if(id == -1) 
			return SendClientMessage(playerid, x_server, "Prekoracen je limit vaseg iteratora.");

		SafeZonaKreiraID[playerid] = id;
		SafeZonaKreira[playerid] = 1;

		SafeZone[id][safeColor] = boja;

		SendClientMessage(playerid, x_server, "Uspesno ste postavili boju za vasu safe zonu.");
		SendClientMessage(playerid, x_server, "Odredi vasu prvu poziciju za safe zonu.");
	}
	return (true);
}
Dialog:kreiraj_bankera(const playerid, response, listitem, string:inputtext[])
{
	if(!response)
		return 1;
	if(response)
	{
		new id = Iter_Free(Bankers);
		if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Dostigli ste limit bankera.");
		new skin;
		if(sscanf(inputtext, "i", skin)) return 				
			Dialog_Show(playerid, "kreiraj_bankera", DIALOG_STYLE_INPUT,
					"Kreiraj bankera",
					"Unesi skin bankera kojeg kreirate",
					"Odaberi", "Izlaz");
		if(!(0 <= skin <= 311)) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne moze taj skin.");

		BankerData[id][Skin] = skin;
		GetPlayerPos(playerid, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ]);
		GetPlayerFacingAngle(playerid, BankerData[id][bankerA]);
		SetPlayerPos(playerid, BankerData[id][bankerX] + (1.0 * floatsin(-BankerData[id][bankerA], degrees)), BankerData[id][bankerY] + (1.0 * floatcos(-BankerData[id][bankerA], degrees)), BankerData[id][bankerZ]);

		BankerData[id][bankerActorID] = CreateActor(skin, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
		if(IsValidActor(BankerData[id][bankerActorID])) SetActorInvulnerable(BankerData[id][bankerActorID], true);
		
		#if defined BANKER_USE_MAPICON
		BankerData[id][bankerIconID] = CreateDynamicMapIcon(BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], 58, 0, .streamdistance = BANKER_ICON_RANGE);
		#endif

		new label_string[64];
		format(label_string, sizeof(label_string), "Radnik banke(%d)\n\n{FFFFFF}Koristite {F1C40F}/banka", id);
		BankerData[id][bankerLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ] + 0.25, 5.0, .testlos = 1);

		new query[144];
		mysql_format(SQL, query, sizeof(query), "INSERT INTO bankers SET ID=%d, Skin=%d, PosX='%f', PosY='%f', PosZ='%f', PosA='%f'", id, skin, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
		mysql_tquery(SQL, query);
		
		Iter_Add(Bankers, id);
	}
	return (true);
}

Dialog: dialog_izmeni(const playerid, response, listitem, string: inputtext[])
{	
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, "DIALOG_EDIT_HOUSE_1", DIALOG_STYLE_INPUT,
						"Enter House ID",
						"Enter a House ID you want to edit.",
						"Nastavi", "Nazad"
					);				
			}
		}
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

Dialog: dialog_izbrisi(const playerid, response, listitem, string: inputtext[])
{	
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new HouseID = GetNearbyHouse(playerid);
				if(HouseID == MAX_HOUSES) return SendPlayerNotify(playerid, "Greska", "Moras biti na pickupu kuce", 1);
				new Query[60];
				mysql_format(SQL, Query, sizeof(Query), "DELETE FROM `houses` WHERE ID = %i",HouseID);
				mysql_tquery(SQL, Query, "OnDeleteHouse","ii",playerid,HouseID);

				return Y_HOOKS_CONTINUE_RETURN_1;
			}
			case 1:
			{
				if(PlayerInfo[playerid][Staff] < 4) return SendPlayerNotify(playerid, "Greska", "Samo staff moze ovo", 1);
				if(TotalHouses == 0) return SendPlayerNotify(playerid, "Info", "Vec ima 0 kuca u bazi", 2);
				new Query[60];
				mysql_format(SQL, Query, sizeof(Query), "DELETE FROM `houses`");
				mysql_tquery(SQL, Query, "OnDeleteAllHouses","i",playerid);

				return Y_HOOKS_CONTINUE_RETURN_1;	
			}
			case 2:
			{
				if( NadjiNajblizuKlupu( playerid ) == -1 ) return SendClientMessage(playerid, 0xFF0000FF, "[Greska]: {ffffff}Nema napravljenih klupa u vasoj blizini.");
				new i = NadjiNajblizuKlupu( playerid );

		    	SeatDownInfo[ i ][ seat_downx ] = 0;
    			SeatDownInfo[ i ][ seat_downa ] = 0;
    			SeatDownInfo[ i ][ seat_downz ] = 0;
    			SeatDownInfo[ i ][ seat_downa ] = 0;

    			DestroyDynamic3DTextLabel(SeatDownInfo[i][seat_label]);

				static q[120];
				mysql_format(SQL, q, 120, "DELETE FROM `klupe` WHERE `seat_ID` = '%d'", SeatDownInfo[i][seat_SQLID]);
				mysql_tquery(SQL, q);

				Iter_Remove(iter_Klupa, i);

	            va_SendClientMessage(playerid, 0x0086E3FF, "[Klupe] > {ffffff}Obrisali ste klupu pod id(%d).",i);
			}
			case 3:
			{
				Dialog_Show(playerid, "obrisi_bankera", DIALOG_STYLE_INPUT,
						"Obrisite bankera",
						"Unesite id bankera kojeg zelite da obrisete.",
						"Nastavi", "Nazad"
					);	
			}
			case 4:
			{
				Dialog_Show(playerid, "obrisi_bankomat", DIALOG_STYLE_INPUT,
						"Obrisite bankomat",
						"Unesite id bankomata kojeg zelite da obrisete.",
						"Nastavi", "Nazad"
					);	
			}
			case 5:
			{
				Dialog_Show(playerid, "obrisi_biznis", DIALOG_STYLE_INPUT,
						"Obrisite biznis",
						"Unesite id biznisa kojeg zelite da obrisete.",
						"Nastavi", "Nazad"
					);
			}
			case 6:
			{
				new id = GetNearestSafe(playerid);
				if(id == -1)
					return SendClientMessage(playerid, x_server, "Niste u blizini safe zone.");

				if(!Iter_Contains(SafeZone, id))
					return SendClientMessage(playerid, x_server, "Ta safezona je vec obrisana.");

			    new szQuery[128];
			    format(szQuery, sizeof szQuery, "DELETE FROM `safezones` WHERE `safeSQLID`='%d'", id);
			    mysql_tquery(SQL, szQuery);
			    
			    DestroyDynamicPickup(SafeZone[ id ][ safePickup ]);
			    DestroyDynamic3DTextLabel(SafeZone[ id ][ safeLabel ]);
			    Iter_Remove(SafeZone, id);
				InSafeZone[playerid] = false;

			    SendClientMessage(playerid, x_server, "Uspesno ste obrisali safe zonu.");				
			}
		}
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}
Dialog:obrisi_biznis(const playerid, response, listitem, string:inputtext[])
{
	if(!response)
		return 1;

	if(response)
	{
		new id;
		if (sscanf(inputtext, "d", id))
		    return 	Dialog_Show(playerid, "obrisi_biznis", DIALOG_STYLE_INPUT,
						"Obrisite biznis",
						"Unesite id biznisa kojeg zelite da obrisete.",
						"Nastavi", "Nazad"
					);

		if ((id < 0 || id >= MAX_BUSINESS) || !BusinessData[id][bizExists])
		    return SendClientMessage(playerid,-1, "Ovaj biznis ne postoji.");

		Business_Delete(id);
		va_SendClientMessage(playerid,x_server2, "Uspesno ste obrisali biznis id: %d.", id);
	}
	return (true);
}
Dialog:obrisi_bankomat(const playerid, response, listitem, string:inputtext[])
{
	if(!response)
		return 1;

	if(response)
	{
		new id;
		if(sscanf(inputtext, "i", id)) return 				
				Dialog_Show(playerid, "obrisi_bankomat", DIALOG_STYLE_INPUT,
						"Obrisite bankomat",
						"Unesite id bankomata kojeg zelite da obrisete.",
						"Nastavi", "Nazad"
					);	

		if(!Iter_Contains(ATMs, id)) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Invalid ATM ID.");
		if(IsValidDynamicObject(ATMData[id][atmObjID])) DestroyDynamicObject(ATMData[id][atmObjID]);
		ATMData[id][atmObjID] = -1;

		#if defined ATM_USE_MAPICON
		if(IsValidDynamicMapIcon(ATMData[id][atmIconID])) DestroyDynamicMapIcon(ATMData[id][atmIconID]);
	    ATMData[id][atmIconID] = -1;
	    #endif

	    if(IsValidDynamic3DTextLabel(ATMData[id][atmLabel])) DestroyDynamic3DTextLabel(ATMData[id][atmLabel]);
	    ATMData[id][atmLabel] = Text3D: -1;

		new query[48];
		mysql_format(SQL, query, sizeof(query), "DELETE FROM bank_atms WHERE ID=%d", id);
		mysql_tquery(SQL, query);
	}
	return (true);
}

Dialog:obrisi_bankera(const playerid, response, listitem, string:inputtext[])
{
	if(!response)
		return 1;

	if(response)
	{
		new id;
		if(sscanf(inputtext, "i", id)) return 				
			Dialog_Show(playerid, "obrisi_bankera", DIALOG_STYLE_INPUT,
						"Obrisite bankera",
						"Unesite id bankera kojeg zelite da obrisete.",
						"Nastavi", "Nazad"
					);	

		if(!Iter_Contains(Bankers, id)) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Invalid banker ID.");
		if(IsValidActor(BankerData[id][bankerActorID])) DestroyActor(BankerData[id][bankerActorID]);
		BankerData[id][bankerActorID] = -1;
		
		#if defined BANKER_USE_MAPICON
		if(IsValidDynamicMapIcon(BankerData[id][bankerIconID])) DestroyDynamicMapIcon(BankerData[id][bankerIconID]);
	    BankerData[id][bankerIconID] = -1;
	    #endif

	    if(IsValidDynamic3DTextLabel(BankerData[id][bankerLabel])) DestroyDynamic3DTextLabel(BankerData[id][bankerLabel]);
	    BankerData[id][bankerLabel] = Text3D: -1;
	    
		new query[48];
		mysql_format(SQL, query, sizeof(query), "DELETE FROM bankers WHERE ID=%d", id);
		mysql_tquery(SQL, query);
	}
	return (true);
}