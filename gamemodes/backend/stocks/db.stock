/***
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic & Ogy_
 *  @Date           05th May 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           db.stock
 *  @Module         stocks
 */

#include <ysilib\YSI_Coding\y_hooks>

hook OnGameModeInit()
{
	print("stocks/db.stock loaded");

	return 1;
}

stock formatInt(intVariable, iThousandSeparator = ',', iCurrencyChar = '$')
{
    /*
        By Kar
        https://gist.github.com/Kar2k/bfb0eafb2caf71a1237b349684e091b9/8849dad7baa863afb1048f40badd103567c005a5#file-formatint-function
    */
    static
        s_szReturn[ 32 ],
        s_szThousandSeparator[ 2 ] = { ' ', EOS },
        s_szCurrencyChar[ 2 ] = { ' ', EOS },
        s_iVariableLen,
        s_iChar,
        s_iSepPos,
        bool:s_isNegative
    ;

    format( s_szReturn, sizeof( s_szReturn ), "%d", intVariable );

    if(s_szReturn[0] == '-')
        s_isNegative = true;
    else
        s_isNegative = false;

    s_iVariableLen = strlen( s_szReturn );

    if ( s_iVariableLen >= 4 && iThousandSeparator)
    {
        s_szThousandSeparator[ 0 ] = iThousandSeparator;

        s_iChar = s_iVariableLen;
        s_iSepPos = 0;

        while ( --s_iChar > _:s_isNegative )
        {
            if ( ++s_iSepPos == 3 )
            {
                strins( s_szReturn, s_szThousandSeparator, s_iChar );

                s_iSepPos = 0;
            }
        }
    }
    if(iCurrencyChar) {
        s_szCurrencyChar[ 0 ] = iCurrencyChar;
        strins( s_szReturn, s_szCurrencyChar, _:s_isNegative );
    }
    return s_szReturn;
}
//* Cuvanje naloga na Registeru
stock SavePlayer(playerid)
{
    if(pConnectState[playerid] == PLAYER_CONNECT_STATE_SPAWNED)
    {
        new query[500];
		mysql_format(SQL,query,sizeof(query),"UPDATE `accounts` SET `Staff` = '%d' WHERE `ID` = '%d'",
            PlayerInfo[playerid][Staff],
			PlayerInfo[playerid][SQLID]);
		mysql_tquery(SQL,query);        
    }

    return true;
}

//* Save sve u vezi dokumenata
stock SaveDocuments(playerid)
{
    if(pConnectState[playerid] == PLAYER_CONNECT_STATE_SPAWNED)
    {
        new query[500];
        mysql_format(SQL,query,sizeof(query),"UPDATE `player_documents` SET `NationalID` = '%d',`Passport` = '%d',`DriveLicense` = '%d',`MotoLicense` = '%d', `BoatLicense` = '%d', `GunLicense` = '%d' WHERE `character_document` = '%d'",
            PlayerDocuments[playerid][pNationalID],
            PlayerDocuments[playerid][pPassport],
            PlayerDocuments[playerid][pDriveLicense],
            PlayerDocuments[playerid][pMotoLicense],
            PlayerDocuments[playerid][pBoatLicense],
            PlayerDocuments[playerid][pGunLicense],
            GetCharacterSQLID(playerid));
        mysql_tquery(SQL,query);   
    }

    return true;
}
//* Save sve u vezi elektronike
stock SaveElectronic(playerid)
{
    if(pConnectState[playerid] == PLAYER_CONNECT_STATE_SPAWNED)
    {
        new query[500];
        mysql_format(SQL,query,sizeof(query),"UPDATE `player_electronic` SET `Dron` = '%d',`Battery` = '%d',`GPS` = '%d' WHERE `character_electronics` = '%d'",
            PlayerElectronic[playerid][eDronItem],
            PlayerElectronic[playerid][eBatteryItem],
            PlayerElectronic[playerid][eGPSItem],
            GetCharacterSQLID(playerid));
        mysql_tquery(SQL,query);      
    }

    return true;
}

//* Save sve u vezi property
stock SavePropForPlayer(playerid)
{
    if(pConnectState[playerid] == PLAYER_CONNECT_STATE_SPAWNED)
    {
        new query[500];
        mysql_format(SQL,query,sizeof(query),"UPDATE `player_property` SET `BCenter` = '%d', `HouseID` = '%d' WHERE `pOwner` = '%d'",
            PlayerProperty[playerid][BCenter],
            player_House[playerid],
            GetCharacterSQLID(playerid));
        mysql_tquery(SQL,query);      
    }

    return true;
}


stock SaveCryptoPlayer(playerid)
{
    if(pConnectState[playerid] == PLAYER_CONNECT_STATE_SPAWNED)
    {
        new query[500];
        mysql_format(SQL,query,sizeof(query),"UPDATE `player_crypto` SET `AmountBTC` = '%f',`AmountETH` = '%f',`AmountDOT` = '%f',`AmountUSDT` = '%f', `AmountLTC` = '%f' WHERE `character_id` = '%d'",
            PlayerCrypto[playerid][countBTC],
            PlayerCrypto[playerid][countXRP],
            PlayerCrypto[playerid][countDOT],
            PlayerCrypto[playerid][countUSDT],
            PlayerCrypto[playerid][countLTC],
            GetCharacterSQLID(playerid));
        mysql_tquery(SQL,query);        
    }

    return true;
}
//* Vraca datum
stock ReturnDate()
{
    static
        date[36];

    getdate(date[2], date[1], date[0]);
    gettime(date[3], date[4], date[5]);

    format(date, sizeof(date), "%02d/%02d/%d - %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
    return date;
}

/*
stock GiveMoneyEx(playerid, novac)
{
	PlayerInfo[playerid][Money] += novac;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerInfo[playerid][Money]);

    if(pConnectState[playerid] == PLAYER_CONNECT_STATE_SPAWNED)
    {
        new query[500];
		mysql_format(SQL,query,sizeof(query),"UPDATE `` SET `Money` = '%d' WHERE `ID` = '%d'",
            PlayerInfo[playerid][Money],
			PlayerInfo[playerid][SQLID]);
		mysql_tquery(SQL,query);        
    }

	return 1;
}

*/

stock GetPlayerSQLID(playerid)
{
	return (PlayerInfo[playerid][SQLID]);
}

stock GetCharacterSQLID(playerid)
{
	return (CharacterInfo[playerid][SQLID]);
}

FormatNumber(number, const prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

stock ReturnCharacterName(character) {

    new string[MAX_PLAYER_NAME];

    format(string, sizeof string, "%s", CharacterInfo[character][Name]);

    return string;
}

// SQL UPDATES VOSTIC
stock UpdateSqlInt(dbHandle, tableName[], columnName[], newValue, conditionColumn[], conditionValue)
{
    new query[980];
    mysql_format(query, sizeof(query), "UPDATE %s SET %s = %d WHERE %s = %d", tableName, columnName, newValue, conditionColumn, conditionValue);
    mysql_tquery(dbHandle, query);
}

stock UpdateSqlString(dbHandle, tableName[], columnName[], newValue[], conditionColumn[], conditionValue)
{
    new query[256];
    mysql_format(query, sizeof(query), "UPDATE %s SET %s = '%e' WHERE %s = %d", tableName, columnName, newValue, conditionColumn, conditionValue);
    mysql_tquery(dbHandle, query);
}

stock UpdateSql(dbHandle, tableName[], fields[], condition[])
{
    new query[256];
    mysql_format(query, sizeof(query), "UPDATE %s SET %s WHERE %s", tableName, fields, condition);
    mysql_tquery(dbHandle, query);
}

stock UpdateSqlFloat(dbHandle, tableName[], columnName[], Float:newValue, conditionColumn[], conditionValue)
{
    new query[128];
    mysql_format(query, sizeof(query), "UPDATE %s SET %s = %.2f WHERE %s = %d", tableName, columnName, newValue, conditionColumn, conditionValue);
    mysql_tquery(dbHandle, query);
}