/***
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic & Ogy_
 *  @Date           05th May 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           main.script
 *  @Module         main
 */

#include <ysilib\YSI_Coding\y_hooks>
#include <ysilib\YSI_Coding\y_inline>

const MAX_PASSWORD_LENGTH = 64;
const MIN_PASSWORD_LENGTH = 6;
const MAX_LOGIN_ATTEMPTS = 	3;
static player_LoginAttempts[MAX_PLAYERS];


static LoginActor[MAX_PLAYERS];


new bool:e_REGISTERING_PROGRESS[MAX_PLAYERS],
	bool:e_LOGIN_PROGRESS[MAX_PLAYERS];

new bool:LoadingObjects[MAX_PLAYERS],
	bool:LoginTDShown[MAX_PLAYERS];

new PlayerText:Login_TD[MAX_PLAYERS][85];

new e_CHARACTER_OBJ[4],
	e_SELECTED_OBJ[MAX_PLAYERS],
	bool:e_WALK_STYLE[MAX_PLAYERS],
	e_CHOSEN_WALK[MAX_PLAYERS],
	e_CHOSEN_ATTACH[MAX_PLAYERS],
	e_CHOSEN_SEX[MAX_PLAYERS],
	e_CHOSEN_STATE[MAX_PLAYERS];

//  new Menu:e_Character[2];

enum e_PLAYER_FITNESS {

	pWalkStyle
}

new playerFitness[MAX_PLAYERS][e_PLAYER_FITNESS];

static const NameAnimations[][] =
{
    "WALK_player",
    "WALK_civi",
    "WALK_gang1",
    "WALK_gang2",
    "WALK_old",
    "WALK_fatold",
    "WALK_fat",
    "WOMAN_walkold",
    "WOMAN_walkfatold",
    "WALK_shuffle",
    "WOMAN_walknorm",
    "WOMAN_walkbusy",
    "WOMAN_walkpro",
    "WOMAN_walksexy",
    "WALK_drunk",
    "WALK_Wuzi"
};

enum PlayerInformation
{
	SQLID,
	Username[MAX_PLAYER_NAME],
	Password,
	Level,
	Money,
	Skin,
	Age,
	Staff,
	LastLogin[50],
	RegisterDate[50],
	Email[50],
	State[50],
	Sex[10],
	AttachedObject[2]
}
new PlayerInfo[MAX_PLAYERS][PlayerInformation];

//
new Float:RandomSpawnCords[ 3 ][ 3 ] = {

    { 1401.7791,1591.3466,12.0481 },
    { 1401.7791,1591.3466,12.0481 },
    { 1401.7791,1591.3466,12.0481 }
};

//>>
private SQL_AccountLoad(playerid)
{
    static rows;
	cache_get_row_count(rows);
	if(!rows)
	{
		RegisterIgraca(playerid);
	}
	else
	{
		cache_get_value_name_int(0, "ID", PlayerInfo[playerid][SQLID]);
		cache_get_value_name_int(0, "Password", PlayerInfo[playerid][Password]);
		cache_get_value_name_int(0, "Level", PlayerInfo[playerid][Level]);
		cache_get_value_name_int(0, "Money", PlayerInfo[playerid][Money]);
		cache_get_value_name_int(0, "Skin", PlayerInfo[playerid][Skin]);
		cache_get_value_name_int(0, "Age", PlayerInfo[playerid][Age]);
		cache_get_value_name_int(0, "Staff", PlayerInfo[playerid][Staff]);

		CreateLoginTextDraws(playerid);

		PlayerLogin(playerid);	

		CallLocalFunction("OnPlayerLoaded", "d", playerid);		// Kada se igrac konekta i ocita usera da mu ucita ostalo da se ne pomesa SQLID
	}
}

private OnPlayerLoaded(playerid)
{
	return true;
}

private PlayerRegistered(playerid)
{
	PlayerInfo[playerid][SQLID] = cache_insert_id();

	SetSpawnInfo(playerid, 0, 24, -1633.8126,1054.2955,53.7197,187.4477, WEAPON_FIST, 0, WEAPON_FIST, 0, WEAPON_FIST, 0);
	SpawnPlayer(playerid);

	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, playerid+1);

	InterpolateCameraPos(playerid, -1634.438232, 1049.981079, 53.645912, -1636.803100, 1051.892333, 54.672554, 3500);
	InterpolateCameraLookAt(playerid, -1633.738037, 1054.931762, 53.635402, -1633.218627, 1055.101928, 53.312225, 3500);

	printf("DEVLOG - %d - VW", GetPlayerVirtualWorld(playerid));
	printf("DEVLOG - %d - INT", GetPlayerInterior(playerid));


	SetPlayerPos(playerid, -1633.8126,1054.2955,53.7197);

	// e_Character[0] = CreateMenu("Character", 1, 30.0, 150.0, 190.0, 180.0);
	// AddMenuItem(e_Character[0], 0, "Sex");
	// AddMenuItem(e_Character[0], 0, "Walking Style");
	// AddMenuItem(e_Character[0], 0, "Attachment");
	// AddMenuItem(e_Character[0], 0, "State");

	TogglePlayerControllable(playerid, false);

	ApplyAnimation(playerid, "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, true, true, true, true, 0);

	e_CHARACTER_OBJ[0] = CreateDynamicObject(2659, -1631.104858, 1055.017333, 54.825523, 0.000000, 0.000000, -13.500000, -1, -1, playerid, 300.00, 300.00);
	SetDynamicObjectMaterialText(e_CHARACTER_OBJ[0], 0, "{FFFFFF}SEX", 80, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
	e_CHARACTER_OBJ[1] = CreateDynamicObject(2659, -1631.104858, 1055.017333, 54.355529, 0.000000, 0.000000, -13.500000, -1, -1, playerid, 300.00, 300.00); 
	SetDynamicObjectMaterialText(e_CHARACTER_OBJ[1], 0, "{FFFFFF}WALK STYLE", 80, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
	e_CHARACTER_OBJ[2] = CreateDynamicObject(2659, -1631.104858, 1055.017333, 53.895565, 0.000000, 0.000000, -13.500000, -1, -1, playerid, 300.00, 300.00); 
	SetDynamicObjectMaterialText(e_CHARACTER_OBJ[2], 0, "{FFFFFF}STATE", 80, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
	e_CHARACTER_OBJ[3] = CreateDynamicObject(2659, -1631.104858, 1055.017333, 53.415565, 0.000000, 0.000000, -13.500000, -1, -1, playerid, 300.00, 300.00); 
	SetDynamicObjectMaterialText(e_CHARACTER_OBJ[3], 0, "{FFFFFF}ATTACHMENTS", 80, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);

	e_REGISTERING_PROGRESS[playerid] = true;

	va_SendClientMessage(playerid, x_server, "maryland \187; "c_white"Dobro dosli %s na karakterizaciju vaseg karaktera.", ReturnPlayerName(playerid));
	va_SendClientMessage(playerid, x_server, "maryland \187; "c_white"Izabrane opcije se cuvaju na vas nalog i nece se moci mijenjati, izuzetak je skin.");

	SendClientMessage(playerid, x_server, "maryland \187; "c_white"Da listate ponudjene opcije karakterizacije pritisnite 'Y'.");
	SendClientMessage(playerid, x_server, "maryland \187; "c_white"Da odaberete oznacenu mogucnost pritsnite 'N'.");

	return 1;

}

hook OnGameModeInit()
{
	print("main/main.script loaded");
	
	return 1;
}


hook OnPlayerConnect(playerid)
{

	e_CHOSEN_WALK[playerid] = -1;
	e_WALK_STYLE[playerid] = false;

	ResetVariables(playerid);

	PlayerLogged[playerid] = false;
	LoadingObjects[playerid] = false;
	LoginTDShown[playerid] = false;

	e_SELECTED_OBJ[playerid] = -1;

	new query[120];
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `players` WHERE `Username` = '%e'  LIMIT 1", ReturnPlayerName(playerid));
	mysql_tquery(SQL, query, "SQL_AccountLoad", "i", playerid);

	return 1;
}

hook OnPlayerDisconnect(playerid, reason)
{
	PlayerLogged[playerid] = false;
	LoginTDShown[playerid] = false;

	return 1;
}

timer Spawn_Player[1500](playerid)
{
	new rand = random( sizeof( RandomSpawnCords ) );

	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 6);

	printf("DEVLOG - Interior %d", GetPlayerInterior(playerid));
	printf("DEVLOG - VW %d", GetPlayerVirtualWorld(playerid));

	notification.Show(playerid, "Maryland", "Dobro Dosli na Maryland!", "!", BOXCOLOR_GREEN);
	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][Skin],
		RandomSpawnCords[ rand ][ 0 ], RandomSpawnCords[ rand ][ 1 ], RandomSpawnCords[ rand ][ 2 ],90.0, WEAPON_FIST, 0, WEAPON_FIST, 0, WEAPON_FIST, 0
	);

	printf("DEVLOG - POS : %f %f %f", RandomSpawnCords[ rand ][ 0 ], RandomSpawnCords[ rand ][ 1 ], RandomSpawnCords[ rand ][ 2 ] );

	if(LoginTDShown[playerid])
	{
		ShowLoginTDForPlayer(playerid, false);
		LoginTDShown[playerid] = false;
	}

	//
	CallLocalFunction("OnPlayerFirstStream", "d", playerid);		// Kada se igrac prvi put spawnuje ocitavanja.
	//
	LoadObjectsForPlayer(playerid);
	SetPlayerScore(playerid, PlayerInfo[playerid][Level]);
	ResetPlayerMoney(playerid);
	GiveMoneyEx(playerid, PlayerInfo[playerid][Money]);
	SetPlayerSkin(playerid, PlayerInfo[playerid][Skin]);
	PlayerLogged[playerid] = true;

	//SpawnPlayer(playerid);
	//SetCameraBehindPlayer(playerid);


	TogglePlayerSpectating(playerid, false);

	SetCameraBehindPlayer(playerid);

	DestroyDynamicActor(LoginActor[playerid]);

	//
	static q[ 120 ];
	mysql_format(SQL, q, sizeof(q), "UPDATE `players` SET `LastLogin` = '%s' WHERE `Username` = '%e'  LIMIT 1",ReturnDate(), ReturnPlayerName(playerid));
	mysql_tquery(SQL, q);
	//

	for(new i=0; i< 30; i++)
	{
		TextDrawShowForPlayer(playerid, MarylandLogo[i]);
	}

	for(new i=0; i< 40; i++)
	{
		TextDrawShowForPlayer(playerid, Global_TD[i]);
	}

	//
	for(new i=0; i< 8; i++)
	{
		PlayerTextDrawShow(playerid, Player_TDs[playerid][i]);
	}
	//! Ime Igraca
	static pname[25];
	format(pname, sizeof(pname), "%s", ReturnPlayerName(playerid));
	PlayerTextDrawSetString(playerid, Player_TDs[playerid][1], pname);
	PlayerTextDrawShow(playerid, Player_TDs[playerid][1]);

	// //! Banka Igraca
	// static stringic[ 40 ];

	// if(player_BankAccount[playerid] == 0) {
	//     PlayerTextDrawSetString(playerid, BankaIgraca[playerid], "Nemate Racun" );
	// }
	// else {
	//     format(stringic, sizeof(stringic), "%d$", player_BankMoney[playerid]);
	//     PlayerTextDrawSetString(playerid, BankaIgraca[playerid],stringic);
	// }
	// PlayerTextDrawShow(playerid, BankaIgraca[playerid]);

	//!skin provera
	PlayerTextDrawSetPreviewModel(playerid, Player_TDs[playerid][0], PlayerInfo[playerid][Skin]);
	PlayerTextDrawShow(playerid, Player_TDs[playerid][0]);
	return (true);
}

//---------------------------
forward OnPlayerFirstStream(playerid);
public OnPlayerFirstStream(playerid)
{
	return (true);
}
//---------------------------

hook OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys) {

	if(PRESSED(KEY_YES)) {

		if(e_REGISTERING_PROGRESS[playerid]) {		
			
			new Float:x, Float:y, Float:z;
			//BACK
			GetDynamicObjectPos(e_CHARACTER_OBJ[e_SELECTED_OBJ[playerid]], x, y, z);
			MoveDynamicObject(e_CHARACTER_OBJ[e_SELECTED_OBJ[playerid]],  //back
			x, y+0.30, z, 
			1.0,
			0.000000, 0.000000, -13.500000);
			//
			e_SELECTED_OBJ[playerid] += 1;
			if (e_SELECTED_OBJ[playerid] == 4) 
			{ 
				e_SELECTED_OBJ[playerid] = 0; 
			}

			//FORWARD
			GetDynamicObjectPos(e_CHARACTER_OBJ[e_SELECTED_OBJ[playerid]], x, y, z);
			MoveDynamicObject(e_CHARACTER_OBJ[e_SELECTED_OBJ[playerid]],  //forward
			x, y-0.30, z, 
			1.0,
			0.000000, 0.000000, -13.500000);
		}

		if(e_WALK_STYLE[playerid]) {

			e_CHOSEN_WALK[playerid]+=1;
			if(e_CHOSEN_WALK[playerid] == 16) { e_CHOSEN_WALK[playerid] = 0; }

			ApplyAnimation(playerid,"PED",NameAnimations[e_CHOSEN_WALK[playerid]],4.1,true,true,true,true,1);
		}
	}

	if(PRESSED(KEY_NO)) {

		if(e_SELECTED_OBJ[playerid] > -1) {
			switch(e_SELECTED_OBJ[playerid]) {
				case 0: {
					// SEX
					Dialog_Show(playerid, "dialog_cSex", DIALOG_STYLE_LIST, "[C] >> Izaberite Spol", "1 - Musko\n2 - Zensko", "Odaberi", "Odustani");
				}
				case 1: {
					e_WALK_STYLE[playerid] = true;
					e_SELECTED_OBJ[playerid] = -1;
					e_REGISTERING_PROGRESS[playerid] = false;
					InterpolateCameraPos(playerid, -1632.764404, 1049.438110, 54.365573, -1628.767578, 1043.836669, 54.668064, 3500);
					InterpolateCameraLookAt(playerid, -1634.203002, 1054.138671, 53.451564, -1624.815795, 1046.898559, 54.760597, 3500);
					SetPlayerPos(playerid, -1624.8284,1046.9875,54.1497);
					SetPlayerFacingAngle(playerid, 59.7749);
				}
				case 2: {
					Dialog_Show(playerid, "dialog_cState", DIALOG_STYLE_LIST, "[C] >> Izaberite Drzavu", "1. Maryland\n2. Little Italy\n3. Egypt", "Odaberi", "Odustani");
					InterpolateCameraPos(playerid, -1632.717773, 1050.919677, 53.783699, -1628.127807, 1047.886962, 54.736480, 3500);
					InterpolateCameraLookAt(playerid, -1633.778930, 1055.779785, 53.280643, -1629.691162, 1043.138183, 54.806789, 3500);
					SetPlayerPos(playerid, -1629.8636,1044.3052,54.1497);
					SetPlayerFacingAngle(playerid, 3.3744);
					ClearAnimations(playerid);
				}
				case 3: {
					InterpolateCameraPos(playerid, -1632.313110, 1050.430664, 54.104110, -1638.467407, 1050.249877, 55.013023, 3500);
					InterpolateCameraLookAt(playerid, -1633.612792, 1055.235351, 53.628269, -1638.389648, 1045.250976, 54.941501, 3500);
				
					SetPlayerPos(playerid, -1638.5516,1044.1083,54.1497);
					SetPlayerFacingAngle(playerid, 357.4210);
			
					Dialog_Show(playerid, "dialog_cAttach", DIALOG_STYLE_LIST, "[C] >> Attach", "1. Sat\n2. Sesir\n3. Naocale", "Odaberi", "Odustani");
					
				}
			}
		}

		if(e_WALK_STYLE[playerid] && e_CHOSEN_WALK[playerid] >= 0) {

			InterpolateCameraPos(playerid, -1634.438232, 1049.981079, 53.645912, -1636.803100, 1051.892333, 54.672554, 3500);
			InterpolateCameraLookAt(playerid, -1633.738037, 1054.931762, 53.635402, -1633.218627, 1055.101928, 53.312225, 3500);

			SetPlayerPos(playerid, -1633.8126,1054.2955,53.7197);
			SetPlayerFacingAngle(playerid, 187.4477);

			ApplyAnimation(playerid, "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, true, true, true, true, 0);

			new Float:x, Float:y, Float:z;
			//BACK
			GetDynamicObjectPos(e_CHARACTER_OBJ[1], x, y, z);
			MoveDynamicObject(e_CHARACTER_OBJ[1],  //back
			x, y+0.30, z, 
			1.0,
			0.000000, 0.000000, -13.500000);  //back

			GetDynamicObjectPos(e_CHARACTER_OBJ[1], x, y, z);
			MoveDynamicObject(e_CHARACTER_OBJ[1],  //back
			x, y+0.30, z, 
			1.0,
			0.000000, 0.000000, -13.500000);

			e_WALK_STYLE[playerid] = false;
			e_REGISTERING_PROGRESS[playerid] = true;
			e_SELECTED_OBJ[playerid] = 0;

			Player_SetWalkingStyle(playerid, WALKING_STYLES:e_CHOSEN_WALK[playerid]);

			playerFitness[playerid][pWalkStyle] = e_CHOSEN_WALK[playerid];

			/*

			*/

			if(e_CHOSEN_ATTACH[playerid] && e_CHOSEN_SEX[playerid] && e_CHOSEN_STATE[playerid] && e_CHOSEN_WALK[playerid]) {

				InitializeCharacter(playerid);
			}
		}

	}

	return 1;
}

//

Dialog:dialog_cAttach(const playerid, response, listitem, string: inputtext[]) {

	if(!response)
		return Kick(playerid);

	switch(listitem) {

		case 0: {

			e_CHOSEN_ATTACH[playerid] = true;

			PlayerInfo[playerid][AttachedObject][0] = 1;

			InterpolateCameraPos(playerid, -1634.438232, 1049.981079, 53.645912, -1636.803100, 1051.892333, 54.672554, 3500);
			InterpolateCameraLookAt(playerid, -1633.738037, 1054.931762, 53.635402, -1633.218627, 1055.101928, 53.312225, 3500);

			SetPlayerPos(playerid, -1633.8126,1054.2955,53.7197);
			SetPlayerFacingAngle(playerid, 187.4477);

			ApplyAnimation(playerid, "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, true, true, true, true, 0);
		}

		case 1: {

			e_CHOSEN_ATTACH[playerid] = true;

			PlayerInfo[playerid][AttachedObject][0] = 2;

			InterpolateCameraPos(playerid, -1634.438232, 1049.981079, 53.645912, -1636.803100, 1051.892333, 54.672554, 3500);
			InterpolateCameraLookAt(playerid, -1633.738037, 1054.931762, 53.635402, -1633.218627, 1055.101928, 53.312225, 3500);

			SetPlayerPos(playerid, -1633.8126,1054.2955,53.7197);
			SetPlayerFacingAngle(playerid, 187.4477);

			ApplyAnimation(playerid, "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, true, true, true, true, 0);
		}

		case 2: {

			e_CHOSEN_ATTACH[playerid] = true;

			PlayerInfo[playerid][AttachedObject][0] = 3;

			InterpolateCameraPos(playerid, -1634.438232, 1049.981079, 53.645912, -1636.803100, 1051.892333, 54.672554, 3500);
			InterpolateCameraLookAt(playerid, -1633.738037, 1054.931762, 53.635402, -1633.218627, 1055.101928, 53.312225, 3500);

			SetPlayerPos(playerid, -1633.8126,1054.2955,53.7197);
			SetPlayerFacingAngle(playerid, 187.4477);

			ApplyAnimation(playerid, "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, true, true, true, true, 0);
		}
	}

	if(e_CHOSEN_ATTACH[playerid] && e_CHOSEN_SEX[playerid] && e_CHOSEN_STATE[playerid] && e_CHOSEN_WALK[playerid]) 
		InitializeCharacter(playerid);

	return 1;
}

Dialog:dialog_cState(playerid, response, listitem, string: inputtext[]) {

	if(!response)
		return Kick(playerid);

	if(response) {

		switch(listitem) {

			case 0: { strmid( PlayerInfo[ playerid ][ State ], "Maryland", 0, strlen( "Maryland" ), 50 ); }
			case 1: { strmid( PlayerInfo[ playerid ][ State ], "Little Italy", 0, strlen( "Little Italy"), 50 ); }
			case 2: { strmid( PlayerInfo[ playerid ][ State ], "Egypt", 0, strlen( "Egypt"), 50 ); }
		}

		InterpolateCameraPos(playerid, -1634.438232, 1049.981079, 53.645912, -1636.803100, 1051.892333, 54.672554, 3500);
		InterpolateCameraLookAt(playerid, -1633.738037, 1054.931762, 53.635402, -1633.218627, 1055.101928, 53.312225, 3500);

		SetPlayerPos(playerid, -1633.8126,1054.2955,53.7197);
		SetPlayerFacingAngle(playerid, 187.4477);

		ApplyAnimation(playerid, "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, true, true, true, true, 0);

		e_CHOSEN_STATE[playerid] = true;

		if(e_CHOSEN_ATTACH[playerid] && e_CHOSEN_SEX[playerid] && e_CHOSEN_STATE[playerid] && e_CHOSEN_WALK[playerid]) {

			InitializeCharacter(playerid);
		}

	}

	return 1;

}

Dialog: dialog_regpassword(playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if (!(MIN_PASSWORD_LENGTH <= strlen(inputtext) <= MAX_PASSWORD_LENGTH))
		return Dialog_Show(playerid, "dialog_regpassword", DIALOG_STYLE_INPUT,
			"Registracija",
			"%s, unesite Vasu zeljenu lozinku: ",
			"Potvrdi", "Izlaz", ReturnPlayerName(playerid)
		);

	PlayerInfo[playerid][Password] = udb_hash(inputtext);

	RegisterPass[playerid] = true;

	SendClientMessage(playerid, x_ltorange, "> Uneli ste vasu lozinku.");

	if(RegisterSex[playerid] && RegisterPass[playerid] && RegisterEmail[playerid] && RegisterState[playerid] && RegisterAge[playerid])
	{

		if(Registered[playerid])
		return SendClientMessage(playerid, x_ltorange, "> Vas akaunt je vec napravljen u bazi podataka, sacekajte...");

		CreatePlayerRegister(playerid, false);
		new query[550];
		mysql_format(SQL, query, sizeof(query), "INSERT INTO `players` (`Username`, `Password`, `Skin`, `Level`, `Money`, `Age`, `RegisterDate`, `Email`, `State`, `Sex`) \ 
			VALUES ('%e', '%d', '%d', '1', '2000', '%d', '%e', '%e', '%e', '%e')", 
			ReturnPlayerName(playerid), PlayerInfo[playerid][Password], PlayerInfo[playerid][Skin], PlayerInfo[playerid][Age], ReturnDate(), PlayerInfo[playerid][Email],PlayerInfo[playerid][State],PlayerInfo[playerid][Sex] );
		mysql_tquery(SQL, query, "PlayerRegistered", "i", playerid);

		

		Registered[playerid] = true;
	}

	return 1;
}

Dialog: dialog_regages(const playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if (!(12 <= strval(inputtext) <= 50))
		return Dialog_Show(playerid, "dialog_regages", DIALOG_STYLE_INPUT,
			"Godine",
			"Koliko imate godina: ",
			"Unesi", "Izlaz"
		);
	
	PlayerInfo[playerid][Age] = strval(inputtext);

	RegisterAge[playerid] = true;

	SendClientMessage(playerid, x_ltorange, "> Uneli ste vase godine.");

	if(RegisterSex[playerid] && RegisterPass[playerid] && RegisterEmail[playerid] && RegisterState[playerid] && RegisterAge[playerid])
	{

		if(Registered[playerid])
		return SendClientMessage(playerid, x_ltorange, "> Vas akaunt je vec napravljen u bazi podataka, sacekajte...");

		CreatePlayerRegister(playerid, false);
		new query[550];
		mysql_format(SQL, query, sizeof(query), "INSERT INTO `players` (`Username`, `Password`, `Skin`, `Level`, `Money`, `Age`, `RegisterDate`, `Email`, `State`, `Sex`) \ 
			VALUES ('%e', '%d', '%d', '1', '2000', '%d', '%e', '%e', '%e', '%e')", 
			ReturnPlayerName(playerid), PlayerInfo[playerid][Password], PlayerInfo[playerid][Skin], PlayerInfo[playerid][Age], ReturnDate(), PlayerInfo[playerid][Email],PlayerInfo[playerid][State],PlayerInfo[playerid][Sex] );
		mysql_tquery(SQL, query, "PlayerRegistered", "i", playerid);

		e_REGISTERING_PROGRESS[playerid] = true;

		Registered[playerid] = true;
	}

	return 1;
}
Dialog:dialog_reggmail(const playerid, response, listitem , string: inputtext[])
{
	if(!response)
		return Kick(playerid);

	if(response)
	{
	    new mailstring = strfind( inputtext, "@", true);
        if( mailstring == -1 ) {
      		
			Dialog_Show(playerid, "dialog_reggmail", DIALOG_STYLE_INPUT,
				"Email",
				"Upisite vas email, sa kojim cete u slucaju gubitka akaunta vratiti isti.",
				"Unesi", "Izlaz"
				);
		}

		strmid( PlayerInfo[ playerid ][ Email ], inputtext, 0, strlen( inputtext ), 34 );

		RegisterEmail[playerid] = true;

		SendClientMessage(playerid, x_ltorange, "> Uneli ste vas email.");
	}

	if(RegisterSex[playerid] && RegisterPass[playerid] && RegisterEmail[playerid] && RegisterState[playerid] && RegisterAge[playerid])
	{

		if(Registered[playerid])
		return SendClientMessage(playerid, x_ltorange, "> Vas akaunt je vec napravljen u bazi podataka, sacekajte...");

		CreatePlayerRegister(playerid, false);
		new query[550];
		mysql_format(SQL, query, sizeof(query), "INSERT INTO `players` (`Username`, `Password`, `Skin`, `Level`, `Money`, `Age`, `RegisterDate`, `Email`, `State`, `Sex`) \ 
			VALUES ('%e', '%d', '%d', '1', '2000', '%d', '%e', '%e', '%e', '%e')", 
			ReturnPlayerName(playerid), PlayerInfo[playerid][Password], PlayerInfo[playerid][Skin], PlayerInfo[playerid][Age], ReturnDate(), PlayerInfo[playerid][Email],PlayerInfo[playerid][State],PlayerInfo[playerid][Sex] );
		mysql_tquery(SQL, query, "PlayerRegistered", "i", playerid);

		e_REGISTERING_PROGRESS[playerid] = true;

		Registered[playerid] = true;
	}

	return (true);
}
Dialog:dialog_regState(const playerid, response, listitem, string: inputtext[])
{
	if(!response)
		return Kick(playerid);

	if(response)
	{
		switch(listitem)
		{
			case 0: { strmid( PlayerInfo[ playerid ][ State ], "Maryland", 0, strlen( "Maryland" ), 50 ); }
			case 1: { strmid( PlayerInfo[ playerid ][ State ], "Little Italy", 0, strlen( "Little Italy"), 50 ); }
			case 2: { strmid( PlayerInfo[ playerid ][ State ], "Egypt", 0, strlen( "Egypt"), 50 ); }
		}
		RegisterState[playerid] = true;
		SendClientMessage(playerid, x_ltorange, "> Odabrali ste vasu drzavu.");

		if(RegisterSex[playerid] && RegisterPass[playerid] && RegisterEmail[playerid] && RegisterState[playerid] && RegisterAge[playerid])
		{

			if(Registered[playerid])
			return SendClientMessage(playerid, x_ltorange, "> Vas akaunt je vec napravljen u bazi podataka, sacekajte...");

			CreatePlayerRegister(playerid, false);
			new query[550];
			mysql_format(SQL, query, sizeof(query), "INSERT INTO `players` (`Username`, `Password`, `Skin`, `Level`, `Money`, `Age`, `RegisterDate`, `Email`, `State`, `Sex`) \ 
				VALUES ('%e', '%d', '%d', '1', '2000', '%d', '%e', '%e', '%e', '%e')", 
				ReturnPlayerName(playerid), PlayerInfo[playerid][Password], PlayerInfo[playerid][Skin], PlayerInfo[playerid][Age], ReturnDate(), PlayerInfo[playerid][Email],PlayerInfo[playerid][State],PlayerInfo[playerid][Sex] );
			mysql_tquery(SQL, query, "PlayerRegistered", "i", playerid);

			e_REGISTERING_PROGRESS[playerid] = true;

			Registered[playerid] = true;
		}

	}
	return (true);
}

Dialog:dialog_cSex(const playerid, response, listitem, string: inputtext[]) {

	if(!response)
		return Kick(playerid);


	new odabir = listitem+1;
	strmid( PlayerInfo[ playerid ][ Sex ], (odabir == 1 ? ("Musko") : ("Zensko")), 0, strlen( (odabir == 1 ? ("Musko") : ("Zensko")) ), 50 );

	if(odabir == 1){PlayerInfo[playerid][Skin] = 29;}
	else if(odabir == 2){PlayerInfo[playerid][Skin] = 12;}

	InterpolateCameraPos(playerid, -1634.438232, 1049.981079, 53.645912, -1636.803100, 1051.892333, 54.672554, 3500);
	InterpolateCameraLookAt(playerid, -1633.738037, 1054.931762, 53.635402, -1633.218627, 1055.101928, 53.312225, 3500);

	SetPlayerPos(playerid, -1633.8126,1054.2955,53.7197);
	SetPlayerFacingAngle(playerid, 187.4477);

	e_CHOSEN_SEX[playerid] = true;

	ApplyAnimation(playerid, "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, true, true, true, true, 0);

	if(e_CHOSEN_ATTACH[playerid] && e_CHOSEN_SEX[playerid] && e_CHOSEN_STATE[playerid] && e_CHOSEN_WALK[playerid]) {

		InitializeCharacter(playerid);
	}

	return 1;
}

Dialog:dialog_regpol(const playerid, response, listitem, string: inputtext[])
{
	if(!response)
		return Kick(playerid);

	if(response)
	{
		new odabir = 0;

		odabir = listitem +1;

		strmid( PlayerInfo[ playerid ][ Sex ], (odabir == 1 ? ("Musko") : ("Zensko")), 0, strlen( (odabir == 1 ? ("Musko") : ("Zensko")) ), 50 );

		RegisterSex[playerid] = true;

		if(odabir == 1){PlayerInfo[playerid][Skin] = 250;}
		else if(odabir == 2){PlayerInfo[playerid][Skin] = 191;}

		SendClientMessage(playerid, x_ltorange, "> Odabrali ste vas Sex.");

		if(RegisterSex[playerid] && RegisterPass[playerid] && RegisterEmail[playerid] && RegisterState[playerid] && RegisterAge[playerid])
		{

			if(Registered[playerid])
			return SendClientMessage(playerid, x_ltorange, "> Vas akaunt je vec napravljen u bazi podataka, sacekajte...");

			CreatePlayerRegister(playerid, false);
			new query[550];
			mysql_format(SQL, query, sizeof(query), "INSERT INTO `players` (`Username`, `Password`, `Skin`, `Level`, `Money`, `Age`, `RegisterDate`, `Email`, `State`, `Sex`) \ 
				VALUES ('%e', '%d', '%d', '1', '2000', '%d', '%e', '%e', '%e', '%e')", 
				ReturnPlayerName(playerid), PlayerInfo[playerid][Password], PlayerInfo[playerid][Skin], PlayerInfo[playerid][Age], ReturnDate(), PlayerInfo[playerid][Email],PlayerInfo[playerid][State],PlayerInfo[playerid][Sex] );
			mysql_tquery(SQL, query, "PlayerRegistered", "i", playerid);

			e_REGISTERING_PROGRESS[playerid] = true;

			Registered[playerid] = true;
			SetPlayerInterior(playerid, 1);
		}

	}
	return (true);
}
Dialog: dialog_login(const playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if(response)
	{
		if(udb_hash(inputtext) == PlayerInfo[playerid][Password])
		{
			if(PlayerLogged[playerid] == true) return SendClientMessage(playerid, -1, ""c_server"Maryland \187; "c_white"Vec si ulogovan");
			defer Spawn_Player(playerid);
		}
		else
		{
			if (player_LoginAttempts[playerid] == MAX_LOGIN_ATTEMPTS)
				return Kick(playerid);

			++player_LoginAttempts[playerid];
			new sDStrg[ 560 ],ip[50];
			GetPlayerIp(playerid, ip, sizeof(ip));
			format( sDStrg, sizeof( sDStrg ), "{ffffff}Dobro nam dosli nazad na "c_server"Mary"c_server2"Land Community.\n \n\
					\t\t{ffffff}Ime: "c_server"%s\n\
					\t\t{ffffff}IP: "c_server2"%s \n \n\
					{ffffff}Molimo vas da unesete vasu lozinku.\n\
					{ffffff}kako biste se uspesno prijavili na  server\n\
					{ffffff}Imate 3 pokusaja da unesete tacnu lozinku i 60 sekundi.\n\
					\n\
					Uzivajte igrajuci na nasem serveru!\n\
					",ReturnPlayerName(playerid),ip);

			
			Dialog_Show(playerid, "dialog_login", DIALOG_STYLE_PASSWORD,
					"Login Dialog",
					sDStrg,
					"Potvrdi", "Izlaz"
			);

			va_SendClientMessage(playerid, 0xFF0064FF, "[Login Podatci]: {ffffff}Pogresili ste lozinku [%d/3]",player_LoginAttempts[playerid]);
		}
	}

	return 1;
}
Dialog:dialog_obrisiobjekte(const playerid, response, listitem, string:inputtext[])
{
	if(!response)
		return Kick(playerid);

	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(PlayerInfo[playerid][AttachedObject][0] == -1)
					return SendClientMessage(playerid, 0x8D9BFFFF, "[Dodan objekat]: {ffffff}Ovde nemate nista.");

				PlayerInfo[playerid][AttachedObject][0] = -1;

				RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][AttachedObject][0]);

				SavePlayer(playerid);

				SendClientMessage(playerid, 0x8D9BFFFF, "[Dodan objekat]: {ffffff}Uspesno ste obrisali ovaj objekat.");
			}
			case 1:
			{
				if(PlayerInfo[playerid][AttachedObject][1] == -1)
					return SendClientMessage(playerid, 0x8D9BFFFF, "[Dodan objekat]: {ffffff}Ovde nemate nista.");

				RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][AttachedObject][1]);

				PlayerInfo[playerid][AttachedObject][1] = -1;

				SavePlayer(playerid);

				SendClientMessage(playerid, 0x8D9BFFFF, "[Dodan objekat]: {ffffff}Uspesno ste obrisali ovaj objekat.");
			}
		}
	}
	return (true);
}

Dialog:dialog_cryptofaq(const playerid, response, listitem, string:inputtext[])
{
	if(!response)
		return 1;
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				cryptofaqDialog(playerid, 1);
			}
			case 1:
			{
				cryptofaqDialog(playerid, 2);
			}
			case 2:
			{
				cryptofaqDialog(playerid, 3);
			}
			case 3:
			{
				cryptofaqDialog(playerid, 4);
			}
		}
	}
	return (true);
}
//
stock LoadObjectsForPlayer( playerid ) {

	LoadingObjects[playerid] = true;
	TogglePlayerControllable( playerid, false );
	return true;
}

ptask LoadObjectsTimer[2000](playerid)
{
	if(LoadingObjects[playerid])
	{
		new Float:Pozicijeez[3];
		GetPlayerPos(playerid, Pozicijeez[0], Pozicijeez[1], Pozicijeez[2]);
		TogglePlayerControllable(playerid, true);
		SetPlayerPos(playerid, Pozicijeez[0], Pozicijeez[1], Pozicijeez[2]+0.3);
		LoadingObjects[playerid] = false;
	}
	else return 1;
	return 1;
}
//

private PlayerLogin(playerid)
{

	TogglePlayerSpectating(playerid, true);
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld( playerid, playerid+1 );
	SetPlayerPos(playerid,633.7927,-1765.8979,19.4339);
	SetPlayerFacingAngle(playerid,176.0717);

	InterpolateCameraPos(playerid, 628.761047, -1764.393554, 19.677539, 628.761047, -1764.393554, 19.677539, 1000);
	InterpolateCameraLookAt(playerid, 629.909790, -1769.228637, 19.127872, 629.909790, -1769.228637, 19.127872, 1000);

	LoginActor[playerid] = CreateActor(PlayerInfo[playerid][Skin], 632.1260,-1769.9631,18.9629,169.9771);
	SetActorVirtualWorld(LoginActor[playerid], playerid+1);
	ApplyActorAnimation(LoginActor[playerid], "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, true, false, false, false, 0); 

	ShowLoginTDForPlayer(playerid, true);

	e_LOGIN_PROGRESS[playerid] = true;

	new sDStrg[ 560 ],ip[50];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format( sDStrg, sizeof( sDStrg ), "{ffffff}Dobro nam dosli nazad na "c_server"Mary"c_server2"Land Community.\n \n\
			\t\t{ffffff}Ime: "c_server"%s\n\
			\t\t{ffffff}IP: "c_server2"%s \n \n\
			{ffffff}Molimo vas da unesete vasu lozinku.\n\
			{ffffff}kako biste se uspesno prijavili na  server\n\
			{ffffff}Imate 3 pokusaja da unesete tacnu lozinku i 60 sekundi.\n\
			\n\
			Uzivajte igrajuci na nasem serveru!\n\
			",ReturnPlayerName(playerid),ip);


	Dialog_Show(playerid, "dialog_login", DIALOG_STYLE_PASSWORD,
			"Login Dialog",
			sDStrg,
			"Potvrdi", "Izlaz"
	);	

	LoginTDShown[playerid] = true;

	return 1;
}

forward RegisterIgraca(playerid);
public RegisterIgraca(playerid)
{
	CreatePlayerRegister(playerid, true);
	return (true);
}

stock InitializeCharacter(playerid) {

	TogglePlayerSpectating(playerid, false);
	/*

	new wQ[120];

	mysql_format(SQL, wQ, sizeof wQ, "INSERT INTO `player_fitness` (`pID`, `pWalkStyle`) VALUES ('%d', '%d')", PlayerInfo[playerid][SQLID], playerFitness[playerid][pWalkStyle]);
	mysql_tquery(SQL, wQ);

	*/

	new q[260];
	mysql_format(SQL, q, sizeof q, "UPDATE `players` SET `State` = '%e', `Sex` = '%e' WHERE `ID` = '%d'", 
									PlayerInfo[playerid][State], PlayerInfo[playerid][Sex], PlayerInfo[playerid][SQLID]);
	mysql_tquery(SQL, q);

	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][Skin],
		1401.7791,1591.3466,12.0481, 90.0, WEAPON_FIST, 0, WEAPON_FIST, 0, WEAPON_FIST, 0
	);

	PlayerInfo[playerid][Level] = 1;
    PlayerLogged[playerid] = true;

	SavePlayer(playerid);

	e_REGISTERING_PROGRESS[playerid] = false;
	e_SELECTED_OBJ[playerid] = -1;

	SpawnPlayer(playerid);

	GiveMoneyEx(playerid, 2000);

	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 6);



	switch(PlayerInfo[playerid][AttachedObject][0]) {

		case 1: {

			SetPlayerAttachedObject(playerid, 1, 19042, 5, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		}

		case 2: {

			SetPlayerAttachedObject(playerid, 3, 18951, 2, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);

		}

		case 3: {

			SetPlayerAttachedObject(playerid, 2, 19023, 2, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		}
	}

	for(new i=0; i< 30; i++)
	{
		TextDrawShowForPlayer(playerid, MarylandLogo[i]);
	}

	for(new i=0; i< 40; i++)
	{
		TextDrawShowForPlayer(playerid, Global_TD[i]);
	}

	for(new i=0; i< 8; i++)
	{
		PlayerTextDrawShow(playerid, Player_TDs[playerid][i]);
	}

	static pname[25];
	format(pname, sizeof(pname), "%s", ReturnPlayerName(playerid));
	PlayerTextDrawSetString(playerid, Player_TDs[playerid][1], pname);
	PlayerTextDrawShow(playerid, Player_TDs[playerid][1]);

	PlayerTextDrawSetPreviewModel(playerid, Player_TDs[playerid][0], PlayerInfo[playerid][Skin]);
	PlayerTextDrawShow(playerid, Player_TDs[playerid][0]);

	return 1;
}