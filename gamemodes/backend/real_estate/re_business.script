/*
*
*  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
*  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
*  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
*  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
*  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
*  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
*  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
*
*  @Author         Nodi & Vostic
*  @Date           20th October 2023
*  @Weburl         https://maryland-ogc.com
*  @Project        maryland_project
*
*  @File           re_business.pwn
*  @Module         real_estate
*/


#include <ysilib\YSI_Coding\y_hooks>

//*             >> [ DEFINES ] <<

#define MAX_BUSINESS                            (600)
#define INVALID_BUSINESS_ID                     (-1)

#define MAX_BUSINESS_NAME_LEN                   (64)

#define BUSINESS_TYPE_MARKET                    (1)
#define BUSINESS_TYPE_PHARMACY                  (2)
#define BUSINESS_TYPE_TECH_SHOP                 (3)
#define BUSINESS_TYPE_KIOSK                     (4)
#define BUSINESS_TYPE_CAFFE_BAR                 (5)
#define BUSINESS_TYPE_RESTAURANT                (6)
#define BUSINESS_TYPE_PETROL_STATION            (7)
#define BUSINESS_TYPE_SEX_SHOP                  (8)
#define BUSINESS_TYPE_HOTEL                     (9)
#define BUSINESS_TYPE_AGRICULTURAL_STORE        (10)
#define BUSINESS_TYPE_AMMUNATION                (11)
#define BUSINESS_TYPE_FITNESS                   (12)
#define BUSINESS_TYPE_BOUTIQUE                  (13)

//*             >> [ SKINS ] <<

#define MARKET_ACTOR_SKIN                       (20)
#define PHARMACY_ACTOR_SKIN                     (93)
#define TECH_SHOP_ACTOR_SKIN                    (289)
#define CAFFE_BAR_ACTOR_SKIN                    (11)
#define RESTAURANT_ACTOR_SKIN                   (167)
#define AMMUNATION_ACTOR_SKIN                   (179)
#define SEX_SHOP_ACTOR_SKIN                     (178)
#define HOTEL_ACTOR_SKIN                        (216)
#define AGRICULTURAL_STORE_ACTOR_SKIN           (158)
#define BOUTIQUE_ACTOR_SKIN                     (93)

#define MAX_CHARACTER_ATTACHS                   (5)

enum e_BUSINESS_DATA {

    bID,
    bOwner,
    bName[MAX_BUSINESS_NAME_LEN],

    bool:bLocked,
    bType,
    bPrice,
    bLevel,
    Float:bCashRegister,

    Float:bEntrance[3],
    Float:bExit[3],
    Float:bInteract[3],

    bActorSkin,
    Float:bActorPos[4],

    bProducts,
    bInt,
    bVW
}

new re_BusinessData[MAX_BUSINESS][e_BUSINESS_DATA];

new Text3D:re_BusinessLabel[MAX_BUSINESS][2],
           re_BusinessPickup[MAX_BUSINESS],
           re_BusinessActor[MAX_BUSINESS],
           Iterator:iter_Business<MAX_BUSINESS>,
           re_InBusiness[MAX_PLAYERS];

//*     >> [ TEMP VARS FOR KIOSK ] <<

static bool:re_tempFirm[MAX_PLAYERS],
       Float:re_tempFirmPos[MAX_PLAYERS][3],

       re_tempFirmName[MAX_PLAYERS][MAX_BUSINESS_NAME_LEN],
       re_tempFirmLevel[MAX_PLAYERS],
       re_tempFirmPrice[MAX_PLAYERS];

enum e_ACTOR_POSITION {

    Float:actorPos[4],
    e_ACTOR_SKIN
}

new business_ActorPositions[11][e_ACTOR_POSITION] = {

    { { 1422.9923,432.8494,1081.5009,91.5899    },  MARKET_ACTOR_SKIN           },
    { { 2.0187,-30.7018,1003.5494,0.4327        },  MARKET_ACTOR_SKIN           },
    { { -2235.5803,128.5862,1035.4141,359.4457  },  TECH_SHOP_ACTOR_SKIN        },
    { { 2.0187,-30.7018,1003.5494,0.4327        },  MARKET_ACTOR_SKIN           },
    { { 2.0187,-30.7018,1003.5494,0.4327        },  MARKET_ACTOR_SKIN           },
    { { 369.4618,-4.4926,1001.8516,179.3008     },  RESTAURANT_ACTOR_SKIN       },
    { { 2.0187,-30.7018,1003.5494,0.4327        },  MARKET_ACTOR_SKIN           },
    { { -103.9977,-24.2055,1000.7188,1.0590     },  SEX_SHOP_ACTOR_SKIN         },
    { { 2.0187,-30.7018,1003.5494,0.4327        },  MARKET_ACTOR_SKIN           },
    { { 2.0187,-30.7018,1003.5494,0.4327        },  MARKET_ACTOR_SKIN           },
    { { 288.1739,-111.5127,1001.5156,1.0589     },  AMMUNATION_ACTOR_SKIN       }

};

enum e_BUSINESS_INTERACTION_POSITION {

    Float:interactPos[3]
}

new business_InteractPositions[11][e_BUSINESS_INTERACTION_POSITION] = {

    { { 1421.3055,432.6559,1081.5009      },   },
    { { 6.08, -28.89, 1003.54             },   },
    { { -2237.1211,130.1769,1035.4141     },   },
    { { 0.00, 0.00, 0.00                  },   },
    { { 501.95,-70.56,998.75              },   },
    { { 369.6078,-6.1025,1001.8589        },   },
    { { 663.05,-573.62,16.33              },   },
    { { -103.7301, -22.6792, 1000.7188    },   },
    { { 2217.3774,-1146.4989,1025.7969    },   },
    { { 6.08, -28.89, 1003.54             },   },
    { { 288.2584,-109.7821,1001.5156      },   }

};

enum e_BUSINESS_INTERIORS {

    Float:interiorPos[3],
    InteriorID
}


new business_Interiors[13][e_BUSINESS_INTERIORS] = { 

    { { 1414.3778,430.5065,1081.5009     },    18 },
    { { 6.08, -28.89, 1003.54     },    10 },
    { { -2240.10,136.97,1035.41   },    6  },
    { { 0.00, 0.00, 0.00            },    0  },
    { { 501.95,-70.56,998.75      },    11 },
    { { 366.00,-9.43,1001.85      },    9  },
    { { 663.05,-573.62,16.33      },    0  },
    { { -100.26,-22.93,1000.71    },    3  },
    { { 2217.28,-1150.53,1025.79  },    15 },
    { { 6.08, -28.89, 1003.54     },    10 },
    { { 297.14,-109.87,1001.51    },    6  },
    { { 770.80,-0.70,1000.72      },    5  },
    { { 161.0973,-96.6359,1001.8047}, 0}

};

new skinlist = mS_INVALID_LISTID,
    attachlist = mS_INVALID_LISTID;

//      >> [ AMMUNATION ] <<

#define MAX_WEAPON_LEN      (32)

enum e_AMMUNATION_WEAPON {

    WEAPON:weaponID,
    WEAPON_SLOT:weaponSlot,
    weaponModel,
    weaponMag,
    weaponMagPrice,
    weaponMaxMag,
    weaponPrice,
    weaponName[MAX_WEAPON_LEN]
}

new ammunation_WeaponPickup[MAX_PLAYERS],
    ammunation_ChosenWeapon[MAX_PLAYERS];

enum e_ATTACH_DATA {

    aoID,
    aoCharacter,
    aoModel,
    aoBone,
    Float:ao_x,
    Float:ao_y,
    Float:ao_z,
    Float:ao_rx,
    Float:ao_ry,
    Float:ao_rz,
    Float:ao_sx,
    Float:ao_sy,
    Float:ao_sz
}

new CharacterAttach[MAX_PLAYERS][MAX_CHARACTER_ATTACHS][e_ATTACH_DATA],
    Iterator:iAttachs[MAX_PLAYERS]<MAX_CHARACTER_ATTACHS>;

//*             >> [ SYNTAX ] <<

#define ammunation.     Ammunation_

new PlayerText:ammunation_PTD[MAX_PLAYERS][17],
    bool:ammunation_InterfaceShown[MAX_PLAYERS];

new ammunation_ItemList[17][e_AMMUNATION_WEAPON] = {

    //      >> [ MELE ]  <<

    { WEAPON_KNIFE, WEAPON_SLOT_MELEE, 335, 1, 1, 1, 100,  "Knife" },
    { WEAPON_BAT, WEAPON_SLOT_MELEE, 336, 1, 1, 1, 150, "Baseball Bat"},
    { WEAPON_BRASSKNUCKLE, WEAPON_SLOT_MELEE, 331, 1, 45, 1, 150, "Brass Knuckle"},

    //      >> [ PISTOLS ]  <<

    { WEAPON_DEAGLE, WEAPON_SLOT_PISTOL, 348, 30, 150, 240, 700, "Desert Deagle" },
    { WEAPON_COLT45, WEAPON_SLOT_PISTOL, 346, 40, 100, 240, 450, "Colt 45"},
    { WEAPON_SILENCED, WEAPON_SLOT_PISTOL, 347, 40, 120, 240, 450, "Silenced Pistol"},

    //      >> [ SHOTGUNS ]  <<

    { WEAPON_SHOTGUN, WEAPON_SLOT_SHOTGUN, 349, 30, 210, 230, 650, "Shotgun" },
    { WEAPON_SAWEDOFF, WEAPON_SLOT_SHOTGUN, 350, 30, 210, 225, 700, "Sawn-off Shotgun"},
    { WEAPON_SHOTGSPA, WEAPON_SLOT_SHOTGUN, 351, 35, 250, 200, 820, "Combat Shotgun" },

    //      >> [ SMG-S ]  <<

    { WEAPON_UZI, WEAPON_SLOT_MACHINE_GUN, 352, 70, 90, 420, 600, "UZI" },
    { WEAPON_MP5, WEAPON_SLOT_MACHINE_GUN, 353, 70, 90, 420, 520, "MP-5"},
    { WEAPON_TEC9, WEAPON_SLOT_MACHINE_GUN, 372, 65, 90, 420, 400, "TEC-9" },

    //      >> [ RIFLES ]  <<

    { WEAPON_AK47, WEAPON_SLOT_ASSAULT_RIFLE, 355, 120, 200, 350, 100, "AK-47" },
    { WEAPON_M4, WEAPON_SLOT_ASSAULT_RIFLE, 356, 120, 200, 350, 1200, "M4"},
    { WEAPON_RIFLE, WEAPON_SLOT_LONG_RIFLE, 357, 30, 400, 120, 1400, "Rifle" },
    { WEAPON_SNIPER, WEAPON_SLOT_LONG_RIFLE, 358, 30, 400, 120, 2350, "Sniper Rifle" },
    { WEAPON_UNKNOWN, WEAPON_SLOT_UNKNOWN, 1242, 50, 0, 1, 4500, "Armour"}

};

//*      >> [ BUSINESS ] <<

#define MAX_PRODUCT_NAME_LEN                (32)

#define business.       Business_

#define INVALID_PRODUCT_ID                  (-1)

#define BUSINESS_TD_EXIT                     business_PTD[playerid][12]
#define BUSINESS_TD_BUY                      business_PTD[playerid][10]
#define BUSINESS_TD_SELECT_LEFT              business_PTD[playerid][13]
#define BUSINESS_TD_SELECT_RIGHT             business_PTD[playerid][14]

new PlayerText:business_PTD[MAX_PLAYERS][15],
    bool:business_InterfaceShown[MAX_PLAYERS];

new business_ChosenItem[MAX_PLAYERS];
new business_Type[MAX_PLAYERS];

enum BUSINESS_ITEM:e_BUSINESS_ITEM_DATA {

    productBusiness,
    productName[MAX_PRODUCT_NAME_LEN],
    productModel,
    Float:productPrice,
    productQuantity,
    productInventory,
    productCapacity,
    WEAPON:productWeaponID
}

new business_ItemList[15][BUSINESS_ITEM:e_BUSINESS_ITEM_DATA] = {

    //      >> [ Sex-shop ] <<

    { BUSINESS_TYPE_SEX_SHOP, "Dildo", 321, 3.25, 1, INVALID_INVENTORY_ITEM, 1, WEAPON_DILDO},
    { BUSINESS_TYPE_SEX_SHOP, "Dildo", 323, 3.25, 1, INVALID_INVENTORY_ITEM, 1, WEAPON_DILDO2},
    { BUSINESS_TYPE_SEX_SHOP, "Vibrator", 322, 3.25, 1, INVALID_INVENTORY_ITEM, 1, WEAPON_VIBRATOR},
    { BUSINESS_TYPE_SEX_SHOP, "Vibrator", 324, 3.20, 1, INVALID_INVENTORY_ITEM, 1, WEAPON_VIBRATOR2},

    //      >> [ 24/7 Market ] << 

    { BUSINESS_TYPE_MARKET, "Kruh", 19579, 0.75, 1, INVENTORY_ITEM_BREAD, 5, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_MARKET, "Mljeko", 19570, 1.20, 1, INVENTORY_ITEM_MILK, 4, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_MARKET, "Cigarete", 19897, 5.60, 1, INVENTORY_ITEM_CIGARETTES, 2, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_MARKET, "Upaljac", 19998, 0.70, 1, INVENTORY_ITEM_LIGHTER, 1, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_MARKET, "Sok", 19563, 1.10, 1, INVENTORY_ITEM_JUICE, 2, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_MARKET, "Piva", 1486, 1.00, 1, INVENTORY_ITEM_BEER, 2, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_MARKET, "Pileci Burger", 19811, 4.20, 1, INVENTORY_ITEM_CHICKEN_BURGER, 1, WEAPON_UNKNOWN},

    //      >> [ Restaurant ] << 

    { BUSINESS_TYPE_RESTAURANT, "Rezanci", 2858, 5.60, 1, INVALID_INVENTORY_ITEM, 3, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_RESTAURANT, "Burger", 2880, 5.50, 1, INVALID_INVENTORY_ITEM, 3, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_RESTAURANT, "Pizza", 2814, 7.50, 1, INVALID_INVENTORY_ITEM, 4, WEAPON_UNKNOWN},
    { BUSINESS_TYPE_RESTAURANT, "Burrito", 2769, 5.50, 1, INVALID_INVENTORY_ITEM, 4, WEAPON_UNKNOWN}

};

stock Business_Type(biz) {

    new string[64];

    switch(re_BusinessData[biz][bType]) {

        case BUSINESS_TYPE_MARKET:                      { string = "24/7 Market"; }
        case BUSINESS_TYPE_PHARMACY:                    { string = "Apoteka"; }
        case BUSINESS_TYPE_TECH_SHOP:                   { string = "Prodavnica Elektronike"; }
        case BUSINESS_TYPE_KIOSK:                       { string = "Kiosk"; }
        case BUSINESS_TYPE_CAFFE_BAR:                   { string = "Kafic"; }
        case BUSINESS_TYPE_RESTAURANT:                  { string = "Restoran"; }
        case BUSINESS_TYPE_PETROL_STATION:              { string = "Benziska Pumpa"; }
        case BUSINESS_TYPE_SEX_SHOP:                    { string = "Sex Shop"; }
        case BUSINESS_TYPE_HOTEL:                       { string = "Hotel"; }
        case BUSINESS_TYPE_AGRICULTURAL_STORE:          { string = "Poljoprivredna Apoteka"; }
        case BUSINESS_TYPE_AMMUNATION:                  { string = "Ammunation"; }
        case BUSINESS_TYPE_FITNESS:                     { string = "Fitnes"; }
        case BUSINESS_TYPE_BOUTIQUE:                    { string = "Butik"; }
        default:                                        { string = "[Undefined]"; }
        
    }
    return string;
}

//      >> [ BUSINESS GLOBAL ] <<

new bool:p_AttachEdit[MAX_PLAYERS],
    bool:p_AttachChange[MAX_PLAYERS];

stock Attach_ReturnModelName(modelid) {

    static str[64];

    switch(modelid) {

        case 18947: { str =  "Kapa"; }
        case 19066: { str =  "Bozicna Kapica"; }
        case 19521: { str =  "Policisjka Kapa";}
        case 18923: { str =  "Beretka"; }
        case 18961: { str =  "Kapa";}
        case 19039: { str =  "Sat";}
        case 19042: { str =  "Sat";}
        case 19053: { str =  "Sat";}
        case 19043: { str =  "Sat";}
        case 18894: { str =  "Bandana";}
        case 18903: { str =  "Bandana";}
        case 18898: { str =  "Bandana";}
        case 18899: { str =  "Bandana";}
        case 19559: { str =  "Turisticki Ranac";}
        case 3026: { str = "Ranac";}
        case 1550: {str = "Moneybag";}
        case 3044: {str = "Cigareta";}
        case 19625: { str = "Cigareta";}
        case 19025: { str = "Naocare";}
        case 19026: { str = "Naocare";}
        case 19031: { str = "Naocare";}
        case 19028: { str = "Naocare";}
        case 19023: { str = "Naocare";}
        case 19033: { str = "Naocare";}
        case 19140: { str = "Brze Naocare";}
        case 19139: { str = "Brze Naocare v2";}
        case 19607: { str = "Pickup";}
        case 19198: { str = "Pickup";}
        case 19318: { str = "Gitara";}
        case 19317: { str = "Gitara";}
        case 339: { str = "Katana";}
        case 19079: { str = "Papagaj";}
        default: {str = "[Undefined]:"; }
    }

    return str;
}

stock Attach_GetBoneFromModel(modelid) {

    new bone;

    switch(modelid) {

        case 18947,19066,19521,18923,18961,18894,18903,18898,18899: { bone = 2; }
        case 19025,19026,19031,19028,19023,19033,19140,19139,19607,19198: {bone = 2; }
        case 19039,19042,19053,19043: { bone = 5; }
        case 19559,3026,1550,19318,19317,339: { bone = 1; }
        case 3044,19625: { bone = 18; }
        case 19079: { bone = 15; }

    }

    return bone;
}

stock Business_UpdateProductInfo(playerid, productID) {

    if(business_ItemList[productID][productBusiness] == BUSINESS_TYPE_RESTAURANT) {

        PlayerTextDrawSetString(playerid, business_PTD[playerid][7], "NOURISHMENT");
    }

    PlayerTextDraw_UpdateModel(playerid, business_PTD[playerid][1], business_ItemList[productID][productModel]);
    PlayerTextDrawSetString(playerid,  business_PTD[playerid][8], "%s", business_ItemList[productID][productName]);

    return 1;
}

stock Business_UpdateCapacityStatus(playerid, capacity) {

    switch(capacity) {

        case 1: {

            PlayerTextDrawColour(playerid, business_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][3], -156);
            PlayerTextDrawColour(playerid, business_PTD[playerid][4], -156);
            PlayerTextDrawColour(playerid, business_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, business_PTD[playerid][6], -156);

        }

        case 2: {

            PlayerTextDrawColour(playerid, business_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][4], -156);
            PlayerTextDrawColour(playerid, business_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, business_PTD[playerid][6], -156);

        }

        case 3: {

            PlayerTextDrawColour(playerid, business_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][4], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, business_PTD[playerid][6], -156);

        }

        case 4: {

            PlayerTextDrawColour(playerid, business_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][4], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][5], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][6], -156);

        }

        case 5: {

            PlayerTextDrawColour(playerid, business_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][4], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][5], -1);
            PlayerTextDrawColour(playerid, business_PTD[playerid][6], -1);
        }
    }

    PlayerTextDrawShow(playerid, business_PTD[playerid][2]);
    PlayerTextDrawShow(playerid, business_PTD[playerid][3]);
    PlayerTextDrawShow(playerid, business_PTD[playerid][4]);
    PlayerTextDrawShow(playerid, business_PTD[playerid][5]);
    PlayerTextDrawShow(playerid, business_PTD[playerid][6]);

    return 1;
}

stock Business_ShowInterfaceForPlayer(playerid, const bool:option) {

    if(option) {

        Business_ResetInterface(playerid);

        business_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 519.666748, 161.636932, "");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][0], 105.000000, 129.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][0], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][0], 200);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][0], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][0], -256);
        PlayerTextDrawFont(playerid, business_PTD[playerid][0], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][0], false);
        PlayerTextDrawSetPreviewModel(playerid, business_PTD[playerid][0], 2731);
        PlayerTextDrawSetPreviewRot(playerid, business_PTD[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

        business_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 558.999938, 199.800064, "");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][1], 34.000000, 39.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][1], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][1], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][1], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][1], -256);
        PlayerTextDrawFont(playerid, business_PTD[playerid][1], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][1], false);
        PlayerTextDrawSetPreviewModel(playerid, business_PTD[playerid][1], 352);
        PlayerTextDrawSetPreviewRot(playerid, business_PTD[playerid][1], 0.000000, 0.000000, 0.000000, 1.000000);

        business_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 546.666625, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][2], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][2], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][2], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][2], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][2], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][2], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][2], false);

        business_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 557.666625, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][3], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][3], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][3], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][3], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][3], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][3], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][3], false);

        business_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 568.666442, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][4], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][4], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][4], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][4], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][4], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][4], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][4], false);

        business_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 579.333129, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][5], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][5], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][5], -156);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][5], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][5], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][5], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][5], false);

        business_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 589.999816, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][6], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][6], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][6], -156);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][6], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][6], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][6], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][6], false);

        business_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 571.999938, 244.755538, "CAPACITY");
        PlayerTextDrawLetterSize(playerid, business_PTD[playerid][7], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][7], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, business_PTD[playerid][7], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][7], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][7], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][7], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][7], true);

        business_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 571.999938, 193.733322, "ITEM_1");
        PlayerTextDrawLetterSize(playerid, business_PTD[playerid][8], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][8], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, business_PTD[playerid][8], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][8], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][8], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][8], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][8], true);

        business_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 519.333435, 263.266662, "");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][9], 105.000000, 24.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][9], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][9], 200);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][9], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][9], -256);
        PlayerTextDrawFont(playerid, business_PTD[playerid][9], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][9], false);
        PlayerTextDrawSetPreviewModel(playerid, business_PTD[playerid][9], 2731);
        PlayerTextDrawSetPreviewRot(playerid, business_PTD[playerid][9], 0.000000, 0.000000, 0.000000, 1.000000);

        business_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 571.999938, 272.548187, "BUY");
        PlayerTextDrawLetterSize(playerid, business_PTD[playerid][10], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][10], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, business_PTD[playerid][10], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][10], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][10], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][10], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][10], true);
        PlayerTextDrawSetSelectable(playerid, business_PTD[playerid][10], true);
        PlayerTextDrawTextSize(playerid,business_PTD[playerid][10], 12, 60);

        business_PTD[playerid][11] = CreatePlayerTextDraw(playerid, 519.333435, 284.422302, "");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][11], 105.000000, 24.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][11], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][11], 200);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][11], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][11], -256);
        PlayerTextDrawFont(playerid, business_PTD[playerid][11], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][11], false);
        PlayerTextDrawSetPreviewModel(playerid, business_PTD[playerid][11], 2731);
        PlayerTextDrawSetPreviewRot(playerid, business_PTD[playerid][11], 0.000000, 0.000000, 0.000000, 1.000000);

        business_PTD[playerid][12] = CreatePlayerTextDraw(playerid, 571.999938, 293.703735, "EXIT");
        PlayerTextDrawLetterSize(playerid, business_PTD[playerid][12], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][12], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, business_PTD[playerid][12], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][12], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][12], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][12], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][12], true);
        PlayerTextDrawSetSelectable(playerid, business_PTD[playerid][12], true);
        PlayerTextDrawTextSize(playerid,business_PTD[playerid][12], 12, 60);

        business_PTD[playerid][13] = CreatePlayerTextDraw(playerid, 527.666442, 221.785186, "ld_beat:left");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][13], 8.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][13], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][13], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][13], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][13], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][13], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][13], false);
        PlayerTextDrawSetSelectable(playerid, business_PTD[playerid][13], true);

        business_PTD[playerid][14] = CreatePlayerTextDraw(playerid, 608.332946, 221.785186, "ld_beat:right");
        PlayerTextDrawTextSize(playerid, business_PTD[playerid][14], 8.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, business_PTD[playerid][14], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, business_PTD[playerid][14], -1);
        PlayerTextDrawSetShadow(playerid, business_PTD[playerid][14], 0);
        PlayerTextDrawBackgroundColour(playerid, business_PTD[playerid][14], 255);
        PlayerTextDrawFont(playerid, business_PTD[playerid][14], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, business_PTD[playerid][14], false);
        PlayerTextDrawSetSelectable(playerid, business_PTD[playerid][14], true);

        for(new i = 0; i < sizeof business_PTD[]; i++) {

            PlayerTextDrawShow(playerid, business_PTD[playerid][i]);

        }

        business_InterfaceShown[playerid] = true;
        SelectTextDraw(playerid, 0x003333AA);
    }

    else {

        Business_ResetInterface(playerid);

        CancelSelectTextDraw(playerid);
        business_InterfaceShown[playerid] = false;
    }

    return 1;
}

stock Business_ResetInterface(playerid) {

    for(new i = 0; i < sizeof business_PTD[]; i++) {

        if(business_PTD[playerid][i] == INVALID_PLAYER_TEXT_DRAW) continue;

        PlayerTextDrawHide(playerid, business_PTD[playerid][i]);
        PlayerTextDrawDestroy(playerid, business_PTD[playerid][i]);
        business_PTD[playerid][i] = INVALID_PLAYER_TEXT_DRAW;

    }

    return (true);
}

//      >> [ AMMUNATION ] <<

stock Ammunation_ResetInterface(playerid) {

    for(new i = 0; i < sizeof ammunation_PTD[]; i++) {

        if(ammunation_PTD[playerid][i] == INVALID_PLAYER_TEXT_DRAW) continue;

        PlayerTextDrawHide(playerid, ammunation_PTD[playerid][i]);
        PlayerTextDrawDestroy(playerid, ammunation_PTD[playerid][i]);
        ammunation_PTD[playerid][i] = INVALID_PLAYER_TEXT_DRAW;

    }

    return (true);
}

stock Ammunation_UpdateDamageStatus(playerid, WEAPON_ID) {

    switch(WEAPON_ID) {

        case 0..2: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        }

        case 3: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        }

        case 4..5: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        }

        case 6..8: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        }

        case 9..10: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        }

        case 11: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        }

        case 12..14: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        }

        case 15: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -1);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -1);
        }

        case 16: {

            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -156);
            PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        }
    }

    PlayerTextDrawShow(playerid, ammunation_PTD[playerid][2]);
    PlayerTextDrawShow(playerid, ammunation_PTD[playerid][3]);
    PlayerTextDrawShow(playerid, ammunation_PTD[playerid][4]);
    PlayerTextDrawShow(playerid, ammunation_PTD[playerid][5]);
    PlayerTextDrawShow(playerid, ammunation_PTD[playerid][6]);

    return 1;
}


stock Ammunation_ShowInterfaceForPlayer(playerid, const bool:option) {

    if(option) {

        Ammunation_ResetInterface(playerid);

        ammunation_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 519.666748, 161.636932, "");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][0], 105.000000, 129.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][0], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][0], 200);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][0], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][0], -256);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][0], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][0], false);
        PlayerTextDrawSetPreviewModel(playerid, ammunation_PTD[playerid][0], 2731);
        PlayerTextDrawSetPreviewRot(playerid, ammunation_PTD[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

        ammunation_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 558.999938, 199.800064, "");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][1], 34.000000, 39.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][1], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][1], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][1], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][1], -256);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][1], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][1], false);
        PlayerTextDrawSetPreviewModel(playerid, ammunation_PTD[playerid][1], 352);
        PlayerTextDrawSetPreviewRot(playerid, ammunation_PTD[playerid][1], 0.000000, 0.000000, 0.000000, 1.000000);

        ammunation_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 546.666625, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][2], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][2], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][2], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][2], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][2], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][2], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][2], false);

        ammunation_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 557.666625, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][3], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][3], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][3], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][3], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][3], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][3], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][3], false);

        ammunation_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 568.666442, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][4], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][4], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][4], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][4], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][4], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][4], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][4], false);

        ammunation_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 579.333129, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][5], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][5], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][5], -156);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][5], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][5], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][5], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][5], false);

        ammunation_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 589.999816, 254.555603, "LD_SPAC:white");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][6], 8.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][6], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][6], -156);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][6], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][6], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][6], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][6], false);

        ammunation_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 571.999938, 244.755538, "DAMAGE");
        PlayerTextDrawLetterSize(playerid, ammunation_PTD[playerid][7], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][7], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][7], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][7], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][7], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][7], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][7], true);

        ammunation_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 571.999938, 193.733322, "MICRO_UZI");
        PlayerTextDrawLetterSize(playerid, ammunation_PTD[playerid][8], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][8], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][8], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][8], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][8], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][8], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][8], true);

        ammunation_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 519.333435, 263.266662, "");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][9], 105.000000, 24.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][9], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][9], 200);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][9], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][9], -256);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][9], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][9], false);
        PlayerTextDrawSetPreviewModel(playerid, ammunation_PTD[playerid][9], 2731);
        PlayerTextDrawSetPreviewRot(playerid, ammunation_PTD[playerid][9], 0.000000, 0.000000, 0.000000, 1.000000);

        ammunation_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 571.999938, 272.548187, "BUY");
        PlayerTextDrawLetterSize(playerid, ammunation_PTD[playerid][10], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][10], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][10], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][10], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][10], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][10], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][10], true);
        PlayerTextDrawSetSelectable(playerid, ammunation_PTD[playerid][10], true);
        PlayerTextDrawTextSize(playerid,ammunation_PTD[playerid][10], 12, 60);

        ammunation_PTD[playerid][11] = CreatePlayerTextDraw(playerid, 519.333435, 284.422302, "");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][11], 105.000000, 24.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][11], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][11], 200);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][11], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][11], -256);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][11], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][11], false);
        PlayerTextDrawSetPreviewModel(playerid, ammunation_PTD[playerid][11], 2731);
        PlayerTextDrawSetPreviewRot(playerid, ammunation_PTD[playerid][11], 0.000000, 0.000000, 0.000000, 1.000000);

        ammunation_PTD[playerid][12] = CreatePlayerTextDraw(playerid, 571.999938, 293.703735, "BUY_AMMO");
        PlayerTextDrawLetterSize(playerid, ammunation_PTD[playerid][12], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][12], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][12], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][12], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][12], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][12], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][12], true);
        PlayerTextDrawSetSelectable(playerid, ammunation_PTD[playerid][12], true);
        PlayerTextDrawTextSize(playerid,ammunation_PTD[playerid][12], 12, 60);

        ammunation_PTD[playerid][13] = CreatePlayerTextDraw(playerid, 519.333435, 332.126129, "");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][13], 105.000000, 24.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][13], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][13], 200);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][13], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][13], -256);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][13], TEXT_DRAW_FONT_MODEL_PREVIEW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][13], false);
        PlayerTextDrawSetPreviewModel(playerid, ammunation_PTD[playerid][13], 2731);
        PlayerTextDrawSetPreviewRot(playerid, ammunation_PTD[playerid][13], 0.000000, 0.000000, 0.000000, 1.000000);

        ammunation_PTD[playerid][14] = CreatePlayerTextDraw(playerid, 571.999938, 341.407562, "EXIT");
        PlayerTextDrawLetterSize(playerid, ammunation_PTD[playerid][14], 0.138666, 0.550518);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][14], TEXT_DRAW_ALIGN_CENTRE);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][14], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][14], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][14], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][14], TEXT_DRAW_FONT_1);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][14], true);
        PlayerTextDrawSetSelectable(playerid, ammunation_PTD[playerid][14], true);
        PlayerTextDrawTextSize(playerid,ammunation_PTD[playerid][14], 12, 60);

        ammunation_PTD[playerid][15] = CreatePlayerTextDraw(playerid, 527.666442, 221.785186, "ld_beat:left");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][15], 8.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][15], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][15], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][15], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][15], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][15], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][15], false);
        PlayerTextDrawSetSelectable(playerid, ammunation_PTD[playerid][15], true);

        ammunation_PTD[playerid][16] = CreatePlayerTextDraw(playerid, 608.332946, 221.785186, "ld_beat:right");
        PlayerTextDrawTextSize(playerid, ammunation_PTD[playerid][16], 8.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, ammunation_PTD[playerid][16], TEXT_DRAW_ALIGN_LEFT);
        PlayerTextDrawColour(playerid, ammunation_PTD[playerid][16], -1);
        PlayerTextDrawSetShadow(playerid, ammunation_PTD[playerid][16], 0);
        PlayerTextDrawBackgroundColour(playerid, ammunation_PTD[playerid][16], 255);
        PlayerTextDrawFont(playerid, ammunation_PTD[playerid][16], TEXT_DRAW_FONT_SPRITE_DRAW);
        PlayerTextDrawSetProportional(playerid, ammunation_PTD[playerid][16], false);
        PlayerTextDrawSetSelectable(playerid, ammunation_PTD[playerid][16], true);

        for(new i = 0; i < sizeof ammunation_PTD[]; i++) {

            PlayerTextDrawShow(playerid, ammunation_PTD[playerid][i]);

        }

        ammunation_InterfaceShown[playerid] = true;
        SelectTextDraw(playerid, 0x003333AA);
    }

    else {

        Ammunation_ResetInterface(playerid);

        CancelSelectTextDraw(playerid);
        ammunation_InterfaceShown[playerid] = false;
    }

    return 1;
}

stock Ammunation_UpdateWeaponInfo(playerid, WEAPON_ID) {

    PlayerTextDraw_UpdateModel(playerid, ammunation_PTD[playerid][1], ammunation_ItemList[WEAPON_ID][weaponModel]);
    PlayerTextDrawSetString(playerid,  ammunation_PTD[playerid][8], "%s", ammunation_ItemList[WEAPON_ID][weaponName]);

    return 1;
}

stock GetNearestBusiness(playerid) {

    foreach(new j : iter_Business) {

        if(IsPlayerInRangeOfPoint(playerid, 3.50, re_BusinessData[j][bEntrance][0], re_BusinessData[j][bEntrance][1], re_BusinessData[j][bEntrance][2]))
            return j;
    }
    return INVALID_BUSINESS_ID;
}

forward mysql_LoadCharacterAttachs(playerid);
public mysql_LoadCharacterAttachs(playerid) {

    new rows = cache_num_rows();
    if(!rows) return (true);

    for(new j = 0; j < MAX_CHARACTER_ATTACHS; j++) {

        if(IsPlayerAttachedObjectSlotUsed(playerid, j))
            RemovePlayerAttachedObject(playerid, j);
    }

    for(new i = 0; i < rows; i++) {

        cache_get_value_name_int(i, "id", CharacterAttach[playerid][i][aoID]);
        cache_get_value_name_int(i, "character_id", CharacterAttach[playerid][i][aoCharacter]);
        cache_get_value_name_int(i, "modelid", CharacterAttach[playerid][i][aoModel]);
        cache_get_value_name_int(i, "boneid", CharacterAttach[playerid][i][aoBone]);

        cache_get_value_name_float(i, "x", CharacterAttach[playerid][i][ao_x]);
        cache_get_value_name_float(i, "y", CharacterAttach[playerid][i][ao_y]);
        cache_get_value_name_float(i, "z", CharacterAttach[playerid][i][ao_z]);

        cache_get_value_name_float(i, "rX", CharacterAttach[playerid][i][ao_rx]);
        cache_get_value_name_float(i, "rY", CharacterAttach[playerid][i][ao_ry]);
        cache_get_value_name_float(i, "rZ", CharacterAttach[playerid][i][ao_rz]);

        cache_get_value_name_float(i, "sX", CharacterAttach[playerid][i][ao_sx]);
        cache_get_value_name_float(i, "sY", CharacterAttach[playerid][i][ao_sy]);
        cache_get_value_name_float(i, "sZ", CharacterAttach[playerid][i][ao_sz]);

        SetPlayerAttachedObject(playerid, i, CharacterAttach[playerid][i][aoModel], CharacterAttach[playerid][i][aoBone], 
                                CharacterAttach[playerid][i][ao_x], CharacterAttach[playerid][i][ao_y], CharacterAttach[playerid][i][ao_z], 
                                CharacterAttach[playerid][i][ao_rx], CharacterAttach[playerid][i][ao_ry], CharacterAttach[playerid][i][ao_rz], 
                                CharacterAttach[playerid][i][ao_sx], CharacterAttach[playerid][i][ao_sy], CharacterAttach[playerid][i][ao_sz]);

        Iter_Add(iAttachs[playerid], i);
    }

    return (true);
}

forward Business_LoadData();
public Business_LoadData() {

    new rows = cache_num_rows();

    if(!rows)
        return print("Nije moguce ucitati tabelu `re_business` [ PRAZNO ]");

    else {

        for(new i = 0; i < rows; i++) {

            cache_get_value_name_int(i, "bID", re_BusinessData[i][bID]);
            cache_get_value_name_int(i, "bOwner", re_BusinessData[i][bOwner]);
            cache_get_value_name(i, "bName", re_BusinessData[i][bName], MAX_BUSINESS_NAME_LEN);

            cache_get_value_name_bool(i, "bLocked", re_BusinessData[i][bLocked]);
            cache_get_value_name_int(i, "bType", re_BusinessData[i][bType]);
            cache_get_value_name_int(i, "bPrice", re_BusinessData[i][bPrice]);
            cache_get_value_name_int(i, "bLevel", re_BusinessData[i][bLevel]);
            cache_get_value_name_float(i, "bCashRegister", re_BusinessData[i][bCashRegister]);

            cache_get_value_name_float(i, "bEnterX", re_BusinessData[i][bEntrance][0]);
            cache_get_value_name_float(i, "bEnterY", re_BusinessData[i][bEntrance][1]);
            cache_get_value_name_float(i, "bEnterZ", re_BusinessData[i][bEntrance][2]);

            cache_get_value_name_float(i, "bExitX", re_BusinessData[i][bExit][0]);
            cache_get_value_name_float(i, "bExitY", re_BusinessData[i][bExit][1]);
            cache_get_value_name_float(i, "bExitZ", re_BusinessData[i][bExit][2]);

            cache_get_value_name_float(i, "bInteractX", re_BusinessData[i][bInteract][0]);
            cache_get_value_name_float(i, "bInteractY", re_BusinessData[i][bInteract][1]);
            cache_get_value_name_float(i, "bInteractZ", re_BusinessData[i][bInteract][2]);

            cache_get_value_name_int(i, "bActorSkin", re_BusinessData[i][bActorSkin]);

            cache_get_value_name_float(i, "bActorX", re_BusinessData[i][bActorPos][0]);
            cache_get_value_name_float(i, "bActorY", re_BusinessData[i][bActorPos][1]);
            cache_get_value_name_float(i, "bActorZ", re_BusinessData[i][bActorPos][2]);
            cache_get_value_name_float(i, "bActorA", re_BusinessData[i][bActorPos][3]);

            cache_get_value_name_int(i, "bProducts", re_BusinessData[i][bProducts]);
            cache_get_value_name_int(i, "bInt", re_BusinessData[i][bInt]);
            cache_get_value_name_int(i, "bVW", re_BusinessData[i][bVW]);

            new tmp_string[422]; 

            if(re_BusinessData[i][bOwner] < 1) { format(tmp_string, sizeof tmp_string, ""c_server"[ "c_white"%s"c_server" ]\n"c_white"Za ulazak pritisnite 'F'", re_BusinessData[i][bName]);}
            else format(tmp_string, sizeof tmp_string, ""c_server"[ "c_white"%s"c_server" ]\n"c_white"\187; %s\n Cjena \187; %d", re_BusinessData[i][bName], Business_Type(i), formatInt(re_BusinessData[i][bPrice]));

            re_BusinessLabel[i][0] = Create3DTextLabel(tmp_string, -1, re_BusinessData[i][bEntrance][0], re_BusinessData[i][bEntrance][1], re_BusinessData[i][bEntrance][2], 3.50, 0);
            re_BusinessLabel[i][1] = Create3DTextLabel(""c_server" \187; "c_grey"Za kupovinu pritisnite 'N' "c_server"\171;", -1, re_BusinessData[i][bInteract][0], re_BusinessData[i][bInteract][1], re_BusinessData[i][bInteract][2], 3.50, re_BusinessData[i][bVW]);

            if(re_BusinessData[i][bActorSkin] != -1) {

                re_BusinessActor[i] = CreateActor(re_BusinessData[i][bActorSkin], re_BusinessData[i][bActorPos][0], re_BusinessData[i][bActorPos][1], re_BusinessData[i][bActorPos][2], re_BusinessData[i][bActorPos][3]);
                SetActorVirtualWorld(re_BusinessActor[i],  re_BusinessData[i][bVW]);
            }

            re_BusinessPickup[i] = CreatePickup(19134, 1, re_BusinessData[i][bEntrance][0], re_BusinessData[i][bEntrance][1], re_BusinessData[i][bEntrance][2]);

            Iter_Add(iter_Business, i);

        }
    }

    return 1;
}

forward mysql_AddBusiness(id, playerid);
public mysql_AddBusiness(id, playerid) {

    re_BusinessData[id][bID] = cache_insert_id();

    new tmp_string[422]; 

    format(tmp_string, sizeof tmp_string, ""c_server"[ "c_white"%s"c_server" ]\n"c_white"Za ulazak pritisnite 'F'", re_BusinessData[id][bName]);

    if(re_BusinessData[id][bType] == BUSINESS_TYPE_KIOSK) {

        re_BusinessLabel[id][0] = Create3DTextLabel(tmp_string, -1, re_tempFirmPos[playerid][0], re_tempFirmPos[playerid][1], re_tempFirmPos[playerid][2], 3.50, 0);
        re_BusinessPickup[id] = CreatePickup(19134, 1, re_tempFirmPos[playerid][0], re_tempFirmPos[playerid][1], re_tempFirmPos[playerid][2]);
    }

    re_BusinessLabel[id][0] = Create3DTextLabel(tmp_string, -1, re_BusinessData[id][bEntrance][0], re_BusinessData[id][bEntrance][1], re_BusinessData[id][bEntrance][2], 3.50, 0);
    re_BusinessLabel[id][1] = Create3DTextLabel(""c_server" \187; "c_grey"Za kupovinu pritisnite 'N'' "c_server"\171;", -1, re_BusinessData[id][bInteract][0], re_BusinessData[id][bInteract][1], re_BusinessData[id][bInteract][2], 3.50, re_BusinessData[id][bVW]);
    re_BusinessPickup[id] = CreatePickup(19134, 1, re_BusinessData[id][bEntrance][0], re_BusinessData[id][bEntrance][1], re_BusinessData[id][bEntrance][2]);

    if(re_BusinessData[id][bActorSkin] != -1) {

        re_BusinessActor[id] = CreateActor(re_BusinessData[id][bActorSkin], re_BusinessData[id][bActorPos][0], re_BusinessData[id][bActorPos][1], re_BusinessData[id][bActorPos][2], re_BusinessData[id][bActorPos][3]);
        SetActorVirtualWorld(re_BusinessActor[id],  re_BusinessData[id][bVW]);

    }

    Iter_Add(iter_Business, id);

    return Y_HOOKS_CONTINUE_RETURN_1;
}

stock Business_UpdateCashRegister(business) {

    new q[128];
    mysql_format(SQL, q, sizeof q, "UPDATE `re_business` SET `bCashRegister` = '%f' WHERE `bID` = '%d'", re_BusinessData[business][bCashRegister], re_BusinessData[business][bID]);
    mysql_tquery(SQL, q);

    return (true);
}

hook OnGameModeInit() {

    print("real_estate/re_business.script loaded");

    mysql_tquery(SQL, "SELECT * FROM `re_business`", "Business_LoadData", "");

    skinlist = LoadModelSelectionMenu("skins.txt"); // load skins for buy
    attachlist = LoadModelSelectionMenu("attachlist.txt");

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnGameModeExit() {

    foreach(new i : iter_Business) {

        Business_UpdateCashRegister(i);
    }

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerConnect(playerid) {

    ammunation_ChosenWeapon[playerid] = -1;
    business_ChosenItem[playerid] = INVALID_PRODUCT_ID;
    re_InBusiness[playerid] = INVALID_BUSINESS_ID;
    Business_ResetInterface(playerid);
    Ammunation_ResetInterface(playerid);

    p_AttachEdit[playerid] = false;
    p_AttachChange[playerid] = false;

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnCharacterLoaded(playerid) {

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerClickPlayerTD(playerid, PlayerText:playertextid) {

    if(playertextid == ammunation_PTD[playerid][15]) {

        //Left

        ammunation_ChosenWeapon[playerid]--;

        if(ammunation_ChosenWeapon[playerid] == -1) {

            ammunation_ChosenWeapon[playerid] = sizeof(ammunation_ItemList)-1;
        }

        new WeaponID = ammunation_ChosenWeapon[playerid];

        SetPlayerPickupModel(playerid, ammunation_WeaponPickup[playerid], ammunation_ItemList[WeaponID][weaponModel]);

        ammunation.ShowInterfaceForPlayer(playerid, true);
        ammunation.UpdateDamageStatus(playerid, WeaponID);
        ammunation.UpdateWeaponInfo(playerid, WeaponID);
    }

    else if(playertextid == ammunation_PTD[playerid][16]) {

        //Right

        ammunation_ChosenWeapon[playerid]++;

        if(ammunation_ChosenWeapon[playerid] == sizeof(ammunation_ItemList)) {

            ammunation_ChosenWeapon[playerid] = 0;
        }

        new WeaponID = ammunation_ChosenWeapon[playerid];

        SetPlayerPickupModel(playerid, ammunation_WeaponPickup[playerid], ammunation_ItemList[WeaponID][weaponModel]);

        ammunation.ShowInterfaceForPlayer(playerid, true);
        ammunation.UpdateDamageStatus(playerid, WeaponID);
        ammunation.UpdateWeaponInfo(playerid, WeaponID);
    }

    else if(playertextid == ammunation_PTD[playerid][14]) {

        if(ammunation_ChosenWeapon[playerid] != -1) {

            ammunation_ChosenWeapon[playerid] = -1;

            DestroyPlayerPickup(playerid, ammunation_WeaponPickup[playerid]);
            ammunation.ShowInterfaceForPlayer(playerid, false);

            SetCameraBehindPlayer(playerid);
            TogglePlayerControllable(playerid, true);
        }
    }

    else if(playertextid ==  ammunation_PTD[playerid][10]) {

        new WeaponID = ammunation_ChosenWeapon[playerid];

        new WEAPON:playerWeapon,
            playerAmmo;

        GetPlayerWeaponData(playerid, ammunation_ItemList[WeaponID][weaponSlot], playerWeapon, playerAmmo);

        if(playerWeapon == ammunation_ItemList[WeaponID][weaponID])
            return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Vec posjedujete ovo oruzje!");

        if(GetPlayerMoney(playerid) < ammunation_ItemList[WeaponID][weaponPrice])
            return SendClientMessage(playerid, x_server, "maryland \187; "c_white" Potrebno vam je $%d za kupovinu ovog oruzja!", ammunation_ItemList[WeaponID][weaponPrice]);

        if(ammunation_ItemList[WeaponID][weaponSlot] == WEAPON_SLOT_MELEE) {

            GivePlayerWeapon(playerid, ammunation_ItemList[WeaponID][weaponID], 1);
            SendClientMessage(playerid, x_server, "maryland \187; "c_white"Uspjesno ste kupili %s!", ammunation_ItemList[WeaponID][weaponName] );
            GivePlayerMoney(playerid, -ammunation_ItemList[WeaponID][weaponPrice]);

            re_BusinessData[ re_InBusiness[playerid] ][bCashRegister] += ( ammunation_ItemList[WeaponID][weaponPrice] / 2 );
            Business_UpdateCashRegister( re_InBusiness[playerid] );
            return Y_HOOKS_BREAK_RETURN_1;
        }

        else if(ammunation_ItemList[WeaponID][weaponSlot] == WEAPON_SLOT_UNKNOWN && ammunation_ItemList[WeaponID][weaponID] == WEAPON_UNKNOWN) {

            new Float:armour, Float:maxArmour=99.0, Float:set;
            GetPlayerArmour(playerid, armour);

            set = armour + 50.0;
            if (set > maxArmour) set = maxArmour;
            SetPlayerArmour(playerid, set);
            GivePlayerMoney(playerid, -ammunation_ItemList[WeaponID][weaponPrice]);

            re_BusinessData[ re_InBusiness[playerid] ][bCashRegister] += ( ammunation_ItemList[WeaponID][weaponPrice] / 2 );
            Business_UpdateCashRegister( re_InBusiness[playerid] );

            return Y_HOOKS_BREAK_RETURN_1;
        }

        GivePlayerWeapon(playerid, ammunation_ItemList[WeaponID][weaponID], 30);
        SendClientMessage(playerid,x_server, "maryland \187; "c_white"Uspjesno ste kupili %s sa 30 municije!", ammunation_ItemList[WeaponID][weaponName]);
        GivePlayerMoney(playerid, -ammunation_ItemList[WeaponID][weaponPrice]);

        re_BusinessData[ re_InBusiness[playerid] ][bCashRegister] += ( ammunation_ItemList[WeaponID][weaponPrice] / 2 );
        Business_UpdateCashRegister( re_InBusiness[playerid] );

    }

    else if(playertextid ==  ammunation_PTD[playerid][12]) {

        new WeaponID = ammunation_ChosenWeapon[playerid];

        new WEAPON:playerWeapon,
            playerAmmo;

        GetPlayerWeaponData(playerid, ammunation_ItemList[WeaponID][weaponSlot], playerWeapon, playerAmmo);

        if(playerWeapon != ammunation_ItemList[WeaponID][weaponID])
            return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne posjedujete ovo oruzje!");

        if(GetPlayerMoney(playerid) < ammunation_ItemList[WeaponID][weaponMagPrice])
            return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Potrebno vam je $%d za kupovinu municije ovog oruzja!", ammunation_ItemList[WeaponID][weaponMagPrice]);

        if(ammunation_ItemList[WeaponID][weaponSlot] == WEAPON_SLOT_MELEE || ammunation_ItemList[WeaponID][weaponSlot] == WEAPON_SLOT_UNKNOWN) {

            SendClientMessage(playerid, x_server, "maryland \187; "c_white"Za %s ne mozete kupovati municiju!", ammunation_ItemList[WeaponID][weaponName] );
            return Y_HOOKS_BREAK_RETURN_1;
        }

        if(playerAmmo >= ammunation_ItemList[WeaponID][weaponMaxMag]) {

            SendClientMessage(playerid, x_server, "maryland \187; "c_white"Za %s imate maksimalno municije!", ammunation_ItemList[WeaponID][weaponName] );
            return Y_HOOKS_BREAK_RETURN_1;
        }

        GivePlayerWeapon(playerid, ammunation_ItemList[WeaponID][weaponID], ammunation_ItemList[WeaponID][weaponMag]);
        SendClientMessage(playerid, x_server, "maryland \187; "c_white"Uspjesno ste kupili %d municije za %d$", ammunation_ItemList[WeaponID][weaponMag], ammunation_ItemList[WeaponID][weaponMagPrice] );
        GivePlayerMoney(playerid, -ammunation_ItemList[WeaponID][weaponMagPrice]);

        re_BusinessData[ re_InBusiness[playerid] ][bCashRegister] += ( ammunation_ItemList[WeaponID][weaponMagPrice] / 2 );
        Business_UpdateCashRegister( re_InBusiness[playerid] );

        SetPlayerArmedWeapon(playerid, ammunation_ItemList[WeaponID][weaponID]);
    }

    else if(playertextid == BUSINESS_TD_BUY) {

        new ProductID = business_ChosenItem[playerid];

        if(GetPlayerMoney(playerid) < business_ItemList[ProductID][productPrice])
            return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Nemate dovoljno novca za ovaj produkt!");

        if(business_ItemList[ProductID][productWeaponID] != WEAPON_UNKNOWN) {


            if(business_ItemList[ProductID][productWeaponID] == WEAPON_DILDO || business_ItemList[ProductID][productWeaponID] == WEAPON_DILDO2 || business_ItemList[ProductID][productWeaponID] == WEAPON_VIBRATOR || business_ItemList[ProductID][productWeaponID] == WEAPON_VIBRATOR2 ) {

                new WEAPON:pWeapon, pAmmo;
                GetPlayerWeaponData(playerid, WEAPON_SLOT_GIFT, pWeapon, pAmmo);                

                if(pWeapon == business_ItemList[ProductID][productWeaponID] && pAmmo > 0 ) return SendClientMessage(playerid, x_server, ">> Vec posjedujete ovaj produkt!");

                GivePlayerMoney(playerid, -business_ItemList[ProductID][productPrice]);
                SendClientMessage(playerid,x_server, "maryland \187; "c_white"Uspjesno ste kupili %s!", business_ItemList[ProductID][productName]);
                GivePlayerWeapon(playerid, business_ItemList[ProductID][productWeaponID], 1);
                
                re_BusinessData[ re_InBusiness[playerid] ][bCashRegister] += ( business_ItemList[ProductID][productPrice] / 2 );
                Business_UpdateCashRegister( re_InBusiness[playerid] );

                return Y_HOOKS_BREAK_RETURN_1;

            }
        }

        if(business_ItemList[ProductID][productBusiness] == BUSINESS_TYPE_RESTAURANT) {

            new Float:pHP;
            GetPlayerHealth(playerid, pHP);

            if(pHP > 85.00 && pHP < 100.00) return SetPlayerHealth(playerid, 100);
            else if(pHP == 100.00) return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne mozete vise jesti!");

            SetPlayerHealth(playerid, pHP+15.00);

        }


        if(GetPlayerMoney(playerid) < business_ItemList[ProductID][productPrice] )
            return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Nemate dovoljno novca "c_server"(%d$)", business_ItemList[ProductID][productPrice] );

        if(Inventory_GetItemQuantity(playerid, business_ItemList[ProductID][productInventory]) >= sz_quantityInfo[business_ItemList[ProductID][productInventory]-50][maxQuantity])
            return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Vec imate maksimalnu kolicinu ovog produkta u inventaru!");

        GivePlayerMoney(playerid, -business_ItemList[ProductID][productPrice]);
        SendClientMessage(playerid, x_server, "maryland \187; "c_white"Uspjesno ste kupili %s!", business_ItemList[ProductID][productName]);
        re_BusinessData[ re_InBusiness[playerid] ][bCashRegister] += ( business_ItemList[ProductID][productPrice] / 2 );
        Business_UpdateCashRegister( re_InBusiness[playerid] );
        Inventory_AddItem(playerid, business_ItemList[ProductID][productInventory], 1);

        if(business_ItemList[ProductID][productBusiness] == BUSINESS_TYPE_MARKET) {

            if(QuestData[playerid][questDone][4] == 0) {

                QuestData[playerid][questDone][4] = 1;
                UpdateSqlInt(SQL, "character_quests", "Quest_5", 1, "characterid", GetCharacterSQLID(playerid));
                SendClientMessage(playerid, x_server, "maryland \187; "c_white"Uspjesno ste zavrsili quest : %s", sz_QuestList[4][questName]);
                GivePlayerMoney(playerid, sz_QuestList[4][questAwards][0]);
                GiveCharXP(playerid, sz_QuestList[4][questAwards][1]);
            }
        }
    }

    else if(playertextid == BUSINESS_TD_EXIT) {

        business.ShowInterfaceForPlayer(playerid, false);
        SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, true);

        business_ChosenItem[playerid] = INVALID_PRODUCT_ID;
    }

    else if(playertextid == BUSINESS_TD_SELECT_LEFT) {

        new ProductID = business_ChosenItem[playerid];

        for(new i = ProductID-1; i >= 0; i--) {

            if(business_Type[playerid] == business_ItemList[i][productBusiness]) {

                business.ShowInterfaceForPlayer(playerid, true);
                business.UpdateCapacityStatus(playerid, business_ItemList[i][productCapacity]);
                business.UpdateProductInfo(playerid, i);

                business_ChosenItem[playerid] = i;

                return Y_HOOKS_BREAK_RETURN_1;
            
            }
        }
    }

    else if(playertextid == BUSINESS_TD_SELECT_RIGHT) {

        new ProductID = business_ChosenItem[playerid];

        for(new i = ProductID+1; i < sizeof business_ItemList; i++) {

            if(business_Type[playerid] == business_ItemList[i][productBusiness]) {

                business.ShowInterfaceForPlayer(playerid, true);
                business.UpdateCapacityStatus(playerid, business_ItemList[i][productCapacity]);
                business.UpdateProductInfo(playerid, i);

                business_ChosenItem[playerid] = i;

                return Y_HOOKS_BREAK_RETURN_1;
            }
        }
    }

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys) {

    if(PRESSED( KEY_SECONDARY_ATTACK)) {

        foreach(new j : iter_Business) {

            if(IsPlayerInRangeOfPoint(playerid, 3.50, re_BusinessData[j][bEntrance][0], re_BusinessData[j][bEntrance][1], re_BusinessData[j][bEntrance][2])) {

                if(re_BusinessData[j][bLocked]) 
                    return GameTextForPlayer(playerid, "~r~ZAKLJUCANO", 1500, 3);

                re_InBusiness[playerid] = j;
                SetPlayerCompensatedPos(playerid, re_BusinessData[j][bExit][0], re_BusinessData[j][bExit][1], re_BusinessData[j][bExit][2], re_BusinessData[j][bVW], re_BusinessData[j][bInt]);
                business_Type[playerid] = re_BusinessData[j][bType];

                return Y_HOOKS_BREAK_RETURN_1;
            }

            else if(IsPlayerInRangeOfPoint(playerid, 3.50, re_BusinessData[j][bExit][0], re_BusinessData[j][bExit][1], re_BusinessData[j][bExit][2]) && GetPlayerVirtualWorld(playerid) == re_BusinessData[j][bVW]) {

                SetPlayerCompensatedPos(playerid, re_BusinessData[j][bEntrance][0], re_BusinessData[j][bEntrance][1], re_BusinessData[j][bEntrance][2], 0, 0);

                re_InBusiness[playerid] = INVALID_BUSINESS_ID;

                return Y_HOOKS_BREAK_RETURN_1;

            }
        }
    }
    if(PRESSED( KEY_NO)) {

        foreach(new j : iter_Business) {

            if(IsPlayerInRangeOfPoint(playerid, 3.50, re_BusinessData[j][bInteract][0], re_BusinessData[j][bInteract][1], re_BusinessData[j][bInteract][2])) {

                switch(re_BusinessData[j][bType]) {

                    case BUSINESS_TYPE_MARKET..BUSINESS_TYPE_AGRICULTURAL_STORE: { 
                        
                        if(business_ChosenItem[playerid] != -1) { SendClientMessage(playerid, x_server, "maryland \187; "c_white"Vec kupujete neki produkt!"); }
                    
                        for(new i = 0; i < sizeof business_ItemList; i++) {

                            if(business_Type[playerid] == business_ItemList[i][productBusiness]) {

                                business_ChosenItem[playerid] = i;
                                new ProductID = business_ChosenItem[playerid];

                                business.ShowInterfaceForPlayer(playerid, true);
                                business.UpdateCapacityStatus(playerid, business_ItemList[ProductID][productCapacity]);
                                business.UpdateProductInfo(playerid, ProductID);

                                TogglePlayerControllable(playerid, false);
                                return Y_HOOKS_BREAK_RETURN_1;
                            
                            }
                        }
                    }

                    case BUSINESS_TYPE_AMMUNATION: { 
                        
                        if(ammunation_ChosenWeapon[playerid] != -1) { SendClientMessage(playerid, x_server, "maryland \187; "c_white"Vec kupujete oruzje!"); }

                        InterpolateCameraPos(playerid, 290.104217, -106.266616, 1002.462890, 285.482757, -109.900611, 1002.524475, 3500);
                        InterpolateCameraLookAt(playerid, 288.338989, -110.925163, 1002.036437, 290.104766, -111.746047, 1002.043518, 3500);

                        ammunation_ChosenWeapon[playerid] = 0;

                        new WeaponID = ammunation_ChosenWeapon[playerid];

                        ammunation_WeaponPickup[playerid] = CreatePlayerPickup(playerid, ammunation_ItemList[WeaponID][weaponModel], 1, 290.6817,-110.6698,1002.5266, GetPlayerVirtualWorld(playerid));

                        ammunation.ShowInterfaceForPlayer(playerid, true);
                        ammunation.UpdateDamageStatus(playerid, WeaponID);
                        ammunation.UpdateWeaponInfo(playerid, WeaponID);

                        TogglePlayerControllable(playerid, false);
                        return Y_HOOKS_BREAK_RETURN_1;
                        
                    }

                    case BUSINESS_TYPE_BOUTIQUE: {
                        
                        if(p_AttachEdit[playerid])
                            return (true);

                        Dialog_Show(playerid, "dialog_boutiqueOption", DIALOG_STYLE_MSGBOX, ""c_server"Maryland \187; "c_ltorange"Boutique", 
                                                                       "Sta zelite?\nNovi izgled ili dodaci?", "Izgled", "Dodaci");
                        //ShowModelSelectionMenu( playerid, skinlist, "Select Skin");
                    }
                }
            }
        }
    }
    return Y_HOOKS_CONTINUE_RETURN_1;
}

YCMD:createbusiness(playerid, params[], help) 
{
    if(!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Samo RCON Admini!");

    if(help)
    {
		SendClientMessage(playerid, -1, ""c_server"help // "c_white"1(Market) 2(Apoteka) 3(Prodavnica Elektronike) 4(Kiosk) 5(Kafic)");
		SendClientMessage(playerid, -1, ""c_server"help // "c_white"6(Restroan) 7(Benziska Pumpa) 8(Sex Shop) 9(Hotel) 10(Poljoprivredna Apoteka)");
		SendClientMessage(playerid, -1, ""c_server"help // "c_white"11(Ammunation)");
        SendClientMessage(playerid, -1, " ");
        SendClientMessage(playerid, -1, ""c_server"[KIOSK] >> "c_white"Da sacuvate poziciju kioska /saveinteract");

        return (true);
    }

    new blvl, btip, bprice, bname[MAX_BUSINESS_NAME_LEN];

    if(sscanf(params, "s[64]ddd", bname, blvl, btip, bprice))
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"/createbusiness [Ime] [Level] [Tip] [Cijena]");

    if(btip < BUSINESS_TYPE_MARKET || btip > BUSINESS_TYPE_BOUTIQUE)
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Unijeli ste pogresan tip biznisa, '/createbusiness help'");

    new Float:pPos[3];

    new id = Iter_Free(iter_Business);
    new namestring[MAX_BUSINESS_NAME_LEN];
    format(namestring, sizeof namestring, "%s", bname);

    if( btip == BUSINESS_TYPE_FITNESS) {

        re_BusinessData[id][bInteract][0] = 0.00;
        re_BusinessData[id][bInteract][1] = 0.00;
        re_BusinessData[id][bInteract][2] = 0.00;

        re_BusinessData[id][bActorSkin] = 1;

        re_BusinessData[id][bActorPos][0] = 0.00;
        re_BusinessData[id][bActorPos][1] = 0.00;
        re_BusinessData[id][bActorPos][2] = 0.00;
        re_BusinessData[id][bActorPos][3] = 0.00;

    }

    if(btip == BUSINESS_TYPE_BOUTIQUE) {

        re_BusinessData[id][bInteract][0] = 179.5436;
        re_BusinessData[id][bInteract][1] = -83.1313;
        re_BusinessData[id][bInteract][2] = 1001.7947;

        re_BusinessData[id][bActorSkin] = 1;

        re_BusinessData[id][bActorPos][0] = 181.3402;
        re_BusinessData[id][bActorPos][1] = -83.4839;
        re_BusinessData[id][bActorPos][2] = 1001.7947;
        re_BusinessData[id][bActorPos][3] = 90.9137;

    }

    else if( btip == BUSINESS_TYPE_KIOSK ) {

        static Float:ePos[3];

        GetPlayerPos(playerid, ePos[0], ePos[1], ePos[2]);

        re_tempFirmPos[playerid][0] = ePos[0];
        re_tempFirmPos[playerid][1] = ePos[1];
        re_tempFirmPos[playerid][2] = ePos[2];

        re_tempFirmName[playerid] = bname;
        re_tempFirmPrice[playerid] = bprice;
        re_tempFirmLevel[playerid] = blvl;

        re_tempFirm[playerid] = true;
        SendClientMessage(playerid, -1, ""c_server"[KIOSK] >> "c_white"Iskoristite komandu /saveinteract, kako biste sacuvali poziciju kioska");

        return (true);
    }

    else {

        re_BusinessData[id][bInteract][0] = business_InteractPositions[btip-1][interactPos][0];
        re_BusinessData[id][bInteract][1] = business_InteractPositions[btip-1][interactPos][1];
        re_BusinessData[id][bInteract][2] = business_InteractPositions[btip-1][interactPos][2];

        re_BusinessData[id][bActorSkin] = business_ActorPositions[btip-1][e_ACTOR_SKIN];

        re_BusinessData[id][bActorPos][0] = business_ActorPositions[btip-1][actorPos][0];
        re_BusinessData[id][bActorPos][1] = business_ActorPositions[btip-1][actorPos][1];
        re_BusinessData[id][bActorPos][2] = business_ActorPositions[btip-1][actorPos][2];
        re_BusinessData[id][bActorPos][3] = business_ActorPositions[btip-1][actorPos][3];
    }

    re_BusinessData[id][bType] = btip;
    re_BusinessData[id][bName] = namestring;
    re_BusinessData[id][bLocked] = false;
    re_BusinessData[id][bPrice] = bprice;
    re_BusinessData[id][bLevel] = blvl;
    re_BusinessData[id][bCashRegister] = 0.00;

    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);

    re_BusinessData[id][bEntrance][0] = pPos[0];
    re_BusinessData[id][bEntrance][1] = pPos[1];
    re_BusinessData[id][bEntrance][2] = pPos[2];

    re_BusinessData[id][bExit][0] = business_Interiors[btip-1][interiorPos][0];
    re_BusinessData[id][bExit][1] = business_Interiors[btip-1][interiorPos][1];
    re_BusinessData[id][bExit][2] = business_Interiors[btip-1][interiorPos][2];

    re_BusinessData[id][bInt] = business_Interiors[btip-1][InteriorID];
    re_BusinessData[id][bVW] = id+1;

    new q[660];

    mysql_format(SQL, q, sizeof q, "INSERT INTO `re_business` (`bName`, `bLocked`, `bType`, `bLevel`, `bCashRegister`, `bEnterX`, `bEnterY`, `bEnterZ`, `bExitX`, `bExitY`, `bExitZ`, `bInteractX`, `bInteractY`, `bInteractZ`, \
                                    `bActorSkin`, `bActorX`, `bActorY`, `bActorZ`, `bActorA`, `bInt`, `bVW`)
                                    VALUES ('%e', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%f', '%f', '%f', '%f', '%d', '%d')", 
                                    re_BusinessData[id][bName],  re_BusinessData[id][bLocked], re_BusinessData[id][bType], re_BusinessData[id][bLevel],
                                    re_BusinessData[id][bCashRegister],
                                    re_BusinessData[id][bEntrance][0], re_BusinessData[id][bEntrance][1], re_BusinessData[id][bEntrance][2],
                                    re_BusinessData[id][bExit][0], re_BusinessData[id][bExit][1], re_BusinessData[id][bExit][2],
                                    re_BusinessData[id][bInteract][0], re_BusinessData[id][bInteract][1], re_BusinessData[id][bInteract][2],
                                    re_BusinessData[id][bActorSkin], re_BusinessData[id][bActorPos][0], re_BusinessData[id][bActorPos][1],
                                    re_BusinessData[id][bActorPos][2], re_BusinessData[id][bActorPos][3],
                                    re_BusinessData[id][bInt], re_BusinessData[id][bVW]);
    mysql_tquery(SQL, q, "mysql_AddBusiness", "dd", id, playerid);

    return 1;
}

YCMD:saveinteract(playerid, params[], help) 
{
    //*         >> [ KIOSK COMMAND ] <<

    if(!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Samo RCON Admini!");
    
    if(!re_tempFirm[playerid]) 
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne kreirate kiosk!");

    new idx = Iter_Free(iter_Business);

    new Float:pPos[3];
    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);

    re_BusinessData[idx][bInteract][0] = pPos[0];
    re_BusinessData[idx][bInteract][1] = pPos[1];
    re_BusinessData[idx][bInteract][2] = pPos[2];

    re_BusinessData[idx][bExit][0] = 0.00;
    re_BusinessData[idx][bExit][1] = 0.00;
    re_BusinessData[idx][bExit][2] = 0.00;

    re_BusinessData[idx][bInt] = 0;
    re_BusinessData[idx][bVW] = 0;

    re_BusinessData[idx][bCashRegister] = 0.00;

    new q[660];

    mysql_format(SQL, q, sizeof q, "INSERT INTO `re_business` (`bName`, `bLocked`, `bType`, `bLevel`, `bCashRegister`, `bEnterX`, `bEnterY`, `bEnterZ`, `bExitX`, `bExitY`, `bExitZ`, `bInteractX`, `bInteractY`, `bInteractZ`, \
                                    `bActorSkin`, `bActorX`, `bActorY`, `bActorZ`, `bActorA`, `bInt`, `bVW`)
                                    VALUES ('%e', '1', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%f', '%f', '%f', '%f', '%d', '%d')", 
                                    re_tempFirmName[playerid], BUSINESS_TYPE_KIOSK, re_BusinessData[idx][bLevel], 0.00,
                                    re_tempFirmPos[playerid][0], re_tempFirmPos[playerid][1], re_tempFirmPos[playerid][2],
                                    re_BusinessData[idx][bExit][0], re_BusinessData[idx][bExit][1], re_BusinessData[idx][bExit][2],
                                    re_BusinessData[idx][bInteract][0], re_BusinessData[idx][bInteract][1], re_BusinessData[idx][bInteract][2],
                                    -1, 0.00, 0.00, 0.00, 0.00, re_BusinessData[idx][bInt], re_BusinessData[idx][bVW]);
    mysql_tquery(SQL, q, "mysql_AddBusiness", "dd", idx, playerid);

    return 1;
}

YCMD:buybusiness(playerid, params[], help) 
{

    new BID = GetNearestBusiness(playerid);

    if(PlayerProperty[playerid][BusinessID] > 0)
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Vec posjedujete firmu!");    

    if(BID == INVALID_BUSINESS_ID)
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne nalazite se blizu firme!");    

    if(re_BusinessData[BID][bOwner] > 0)
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ova firma nije na prodaju!");    

    if(GetPlayerMoney(playerid, CURRENCY_DOLLAR) < re_BusinessData[BID][bPrice])
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Nemate dovoljno novca kako biste kupili ovu firmu!!");    

    re_BusinessData[BID][bOwner] = CharacterInfo[playerid][SQLID];
    re_BusinessData[BID][bLocked] = false;
    
    PlayerProperty[playerid][BusinessID] = re_BusinessData[BID][bID];

    new q[267];

    //      >> [ BUSINESS QUERY ] <<

    mysql_format(MySQL:SQL, q, sizeof q, "UPDATE `re_business` SET `bOwner` = '%i', `bLocked` = '%i' WHERE `bID` = '%d'",
                                        CharacterInfo[playerid][SQLID], re_BusinessData[BID][bLocked], re_BusinessData[BID][bID]);
    mysql_tquery(MySQL:SQL, q);

    //      >> [ PROPERTY QUERY ] <<

    mysql_format(MySQL:SQL, q, sizeof q, "UPDATE `player_property` SET `BusinessID` = '%i' WHERE `bOwner` = '%d'",
                                         re_BusinessData[BID][bID], GetCharacterSQLID(playerid));
    mysql_tquery(MySQL:SQL, q);

    SendClientMessage(playerid, x_server, "business \187; "c_white"Uspjesno ste kupili firmu!");

    return 1;
}

YCMD:firma(playerid, params[], help) = business;
YCMD:business(playerid, params[], help) {

    if(PlayerProperty[playerid][BusinessID] == 0)
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne posjedujete biznis!");

    if(re_InBusiness[playerid] == INVALID_BUSINESS_ID)
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne nalazite se u svom biznisu!");

    if(re_BusinessData[re_InBusiness[playerid]][bID] != PlayerProperty[playerid][BusinessID])
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne nalazite se u svom biznisu!");

    Dialog_Show(playerid, "dialog_propBusiness", DIALOG_STYLE_LIST, ""c_server"Maryland \187; "c_white"Business Panel", 
                                                                    ""c_server"#1 \187; "c_white"Otkljucaj - Zakljucaj\n\
                                                                    "c_server"#2 \187; "c_white"Podigni novac\n\
                                                                    "c_server"#3 \187; "c_white"Prodaj drzavi\n\
                                                                    "c_server"#4 \187; "c_white"Prodaj igracu\n\
                                                                    "c_server"#5 \187; "c_white"Informacije", "Odaberi", "Odustani");
    return 1;
}

YCMD:attachments(playerid, params[], help) {

    if(IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne mozete ovo dok ste u vozilu!");

    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Morate biti van vozila!");

    if(p_AttachChange[playerid] || p_AttachEdit[playerid])
        return (true);

    new bool:attachFound = false;

    foreach(new i : iAttachs[playerid]) {

        if(GetCharacterSQLID(playerid) == CharacterAttach[playerid][i][aoCharacter])
        {
            attachFound = true;
            break;
        }
    }

    if(!attachFound)
        return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Nemate dodatke!");

    new dlgStr[2048], str[288];

    foreach(new i : iAttachs[playerid]) {

        format(str, sizeof str, ""c_white"#%d \187; "c_ltorange"%s\n", CharacterAttach[playerid][i][aoID], Attach_ReturnModelName( CharacterAttach[playerid][i][aoModel] ));
        strcat(dlgStr, str);
    }

    Dialog_Show(playerid, "dialog_characterAttachs", DIALOG_STYLE_LIST, ""c_server"Maryland \187; "c_ltorange"Attachments", dlgStr, "Odaberi", "Odustani");

    return (true);
}

hook OnPlayerModelSelection( playerid, response, listid, modelid) {
    if(listid == skinlist) {
        if( response ) {
            if( GetPlayerMoney(playerid) < 150.45 ) return SendClientMessage( playerid, x_server, "maryland \187; "c_white"Nemate dovoljno novca." );
            
            CharacterInfo[playerid][Skin] = modelid;
            SetPlayerSkin(playerid, modelid);
            GivePlayerMoney( playerid, -150.45 );
            
            re_BusinessData[ re_InBusiness[playerid] ][bCashRegister] += 150.45;
            Business_UpdateCashRegister( re_InBusiness[playerid] );

            UpdateSqlInt(SQL, "characters", "cSkin", modelid, "character_id", GetCharacterSQLID(playerid));

            if(QuestData[playerid][questDone][6] == 0){

                QuestData[playerid][questDone][6] = 1;
                UpdateSqlInt(SQL, "character_quests", "Quest_7", 1, "characterid", GetCharacterSQLID(playerid));
                SendClientMessage(playerid, x_server, "maryland \187; "c_white"Uspjesno ste zavrsili quest : %s", sz_QuestList[6][questName]);
                GivePlayerMoney(playerid, sz_QuestList[6][questAwards][0]);
                GiveCharXP(playerid, sz_QuestList[6][questAwards][1]);
            }
            return 1;
        }
    }

    if(listid == attachlist) {

        if(response) {

            if( GetPlayerMoney(playerid) < 500.00 )
                return SendClientMessage( playerid, x_server, "maryland \187; "c_white"Nemate dovoljno novca." );
            
            if(Iter_Count(iAttachs[playerid]) == 5)
                return SendClientMessage( playerid, x_server, "maryland \187; "c_white"Zauzeli ste sve slotove - 5." );

            p_AttachEdit[playerid] = true;

            SetPlayerAttachedObject(playerid, Iter_Free(iAttachs[playerid]), modelid, Attach_GetBoneFromModel(modelid));
            EditAttachedObject(playerid, Iter_Free(iAttachs[playerid]));
        }
    }

    return 1;
}

hook OnPlayerEditAttachedObject(playerid, EDIT_RESPONSE:response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ) {

    if(p_AttachEdit[playerid]) {

        if(response == EDIT_RESPONSE_FINAL) {

            new idx = Iter_Free(iAttachs[playerid]);

            CharacterAttach[playerid][idx][aoID] = idx;
            CharacterAttach[playerid][idx][aoCharacter] = GetCharacterSQLID(playerid);
            CharacterAttach[playerid][idx][aoModel] = modelid;
            CharacterAttach[playerid][idx][aoBone] = boneid;

            CharacterAttach[playerid][idx][ao_x] = fOffsetX;
            CharacterAttach[playerid][idx][ao_y] = fOffsetY;
            CharacterAttach[playerid][idx][ao_z] = fOffsetZ;

            CharacterAttach[playerid][idx][ao_rx] = fRotX;
            CharacterAttach[playerid][idx][ao_ry] = fRotY;
            CharacterAttach[playerid][idx][ao_rz] = fRotZ;

            CharacterAttach[playerid][idx][ao_sx] = fScaleX;
            CharacterAttach[playerid][idx][ao_sy] = fScaleY;
            CharacterAttach[playerid][idx][ao_sz] = fScaleZ;

            new q[368];
            mysql_format(SQL, q, sizeof q, "INSERT INTO `character_attachs` (`id`, `character_id`, `modelid`, `boneid`, `x`, `y`, `z`, `rX`, `rY`, `rZ`, `sX`, `sY`, `sZ`)\
                                            VALUES ('%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",
                                            idx, GetCharacterSQLID(playerid), modelid, boneid, fOffsetX, fOffsetY, fOffsetZ,
                                            fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
            mysql_tquery(SQL, q);

            GivePlayerMoney(playerid, -500.00);
            re_BusinessData[ re_InBusiness[playerid] ][bCashRegister] += 500.00;
            Business_UpdateCashRegister( re_InBusiness[playerid] );
            Iter_Add(iAttachs[playerid], idx);

            SendClientMessage(playerid, x_server, "maryland \187; "c_white"Uspjesno ste kupili %s", Attach_ReturnModelName(modelid));

            p_AttachEdit[playerid] = false;
        }

        else if(response == EDIT_RESPONSE_CANCEL) {

            RemovePlayerAttachedObject(playerid, Iter_Free(iAttachs[playerid]));
            p_AttachEdit[playerid] = false;

        }
    }

    if(p_AttachChange[playerid]) {

        if(response == EDIT_RESPONSE_FINAL) {

            p_AttachChange[playerid] = false;

            CharacterAttach[playerid][index][ao_x] = fOffsetX;
            CharacterAttach[playerid][index][ao_y] = fOffsetY;
            CharacterAttach[playerid][index][ao_z] = fOffsetZ;

            CharacterAttach[playerid][index][ao_rx] = fRotX;
            CharacterAttach[playerid][index][ao_ry] = fRotY;
            CharacterAttach[playerid][index][ao_rz] = fRotZ;

            CharacterAttach[playerid][index][ao_sx] = fScaleX;
            CharacterAttach[playerid][index][ao_sy] = fScaleY;
            CharacterAttach[playerid][index][ao_sz] = fScaleZ;

            new q[428];
            mysql_format(SQL, q, sizeof q, "UPDATE `character_attachs` SET `x` = '%f', `y` = '%f', `z` = '%f', `rX` = '%f', `rY` = '%f', `rZ` = '%f', `sX` = '%f', `sY` = '%f', `sZ` = '%f' WHERE `character_id` = '%d' AND `id` = '%d'",
                                            fOffsetX, fOffsetY, fOffsetZ,
                                            fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, GetCharacterSQLID(playerid), index);
            mysql_tquery(SQL, q);
        }

        if(response == EDIT_RESPONSE_CANCEL) {

            p_AttachChange[playerid] = false;
        }
    }

    return Y_HOOKS_CONTINUE_RETURN_1;
}

Dialog:dialog_propBusiness(const playerid, response, listitem, string:inputtext[]) {
    
    if(response) {

        switch(listitem) {

            case 0: {

                if(re_BusinessData[re_InBusiness[playerid]][bID] != PlayerProperty[playerid][BusinessID])
                    return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne nalazite se u svojoj firmi!");

                new idx = re_InBusiness[playerid];

                if(re_BusinessData[idx][bLocked]) {

                    re_BusinessData[idx][bLocked] = false;
                    SendClientMessage(playerid, x_server, "maryland \187; "c_white"Otkljucali ste firmu!");
                    return (true);
                }

                if(!re_BusinessData[idx][bLocked]) {

                    re_BusinessData[idx][bLocked] = true;
                    SendClientMessage(playerid, x_server, "maryland \187; "c_white"Zakljucali ste firmu!");
                    return (true);
                }
            }

            case 1: {

                if(re_BusinessData[re_InBusiness[playerid]][bID] != PlayerProperty[playerid][BusinessID])
                    return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne nalazite se u svojoj firmi!");

                new idx = re_InBusiness[playerid];

                if(re_BusinessData[idx][bCashRegister] <= 0.00)
                    return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Kasa je prazna!");
                
                GivePlayerMoney(playerid, re_BusinessData[idx][bCashRegister]);
                SendClientMessage(playerid, x_server, "maryland \187; "c_white"Uzeli ste %.2f iz kase!", re_BusinessData[idx][bCashRegister]);
                re_BusinessData[idx][bCashRegister] = 0.00;

                new q[128];
                mysql_format(SQL, q, sizeof q, "UPDATE `re_business` SET `bCashRegister` = 0.00 WHERE `bID` = '%d'", PlayerProperty[playerid][BusinessID]);
                mysql_tquery(SQL, q);
            }
        }
    }

    return (true);
}

Dialog:dialog_boutiqueOption(const playerid, response, listitem, string:inputtext[]) {

    if(response) 
        ShowModelSelectionMenu( playerid, skinlist, "Select Skin");
    if(!response)
        ShowModelSelectionMenu( playerid, attachlist, "Attach");

    return (true);
}

Dialog:dialog_characterAttachs(const playerid, response, listitem, string:inputtext[]) {

    if(response) {
            
        p_AttachChange[playerid] = true;
        EditAttachedObject(playerid, CharacterAttach[playerid][listitem][aoID]);
    }

    return (true);
}