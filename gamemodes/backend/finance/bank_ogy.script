/***
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic & Ogy_
 *  @Date           6th Jun 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           bank_ogy.script
 *  @Module         finance
 */
new bool:created_tables = true; // true da ne kreira i ne forsira query dzabe // false ako nema tabela i trebaju automatski da se kreiraju

#include <ysilib\YSI_Coding\y_hooks>



const MAX_BANKERS = 20; // promeniti ako je malo
const MAX_ATMS = 500; // promeniti ako je mnogo

/*
      ____            __   _                      
     |  _ \    ___   / _| (_)  _ __     ___   ___ 
     | | | |  / _ \ | |_  | | | '_ \   / _ \ / __|
     | |_| | |  __/ |  _| | | | | | | |  __/ \__ \
     |____/   \___| |_|   |_| |_| |_|  \___| |___/

*/
//#define     BANKER_USE_MAPICON                  // obrisi komentar ako zelis da banker ima mapikonicu(za sada nepotrebno)
#define     ATM_USE_MAPICON                     // obrisi komentar ako zelis da atm ima mapikonicu(za sada potrebno)

//#define     BANKER_ICON_RANGE       (10.0)      // banker ikonica radius (ovo pod komentar jer izlazi error ako je i gore komentar)
#define     ATM_ICON_RANGE          (50.0)     // atm ikonicca za mapu default je 100.0 - trenutno 50.0

#define     ACCOUNT_PRICE           (0)       // koliko da kosta da se otvori novi akaunt u banci(defaullt je 100 = mislim da je okej i 0 da bude)
#define     ACCOUNT_CLIMIT          (5)         // maksimalno koliko moze akaunta da se napravi prema jednom igracu client_side staviti pod komentar ako beskonacno
#define     ACCOUNT_LIMIT           (500000000) // maks za limit na jednom akauntu u banci = default 50.000.000$



#define SendBankMessage(%0,%1) \
    va_SendClientMessage(%0, 0xF4AD81FF, "[ML-Bank]: {FFFFFF}"%1)  // promeniti prefix u slucaju da nam se ne svidja


//
new Text:BankLoginTD[46];
new Text:BankAccountTD[76];
new PlayerText:BankAccountPTD[MAX_PLAYERS][16];
new bool:GledaLoginTD[MAX_PLAYERS],
    bool:GledaBankaAcc[MAX_PLAYERS];
//


enum    E_BANKER
{
    // saved
    Skin,
    Float: bankerX,
    Float: bankerY,
    Float: bankerZ,
    Float: bankerA,
    // temp
    bankerActorID,
    #if defined BANKER_USE_MAPICON
    bankerIconID,
    #endif
    Text3D: bankerLabel
}

enum    _:E_BANK_LOGTYPE
{
    TYPE_NONE,
    TYPE_LOGIN,
    TYPE_DEPOSIT,
    TYPE_WITHDRAW,
    TYPE_TRANSFER,
    TYPE_PASSCHANGE
}

enum    E_ATM
{
    // saved
    Float: atmX,
    Float: atmY,
    Float: atmZ,
    Float: atmRX,
    Float: atmRY,
    Float: atmRZ,
    // temp
    atmObjID,
    #if defined ATM_USE_MAPICON
    atmIconID,
    #endif
    Text3D: atmLabel
}

new
    BankerData[MAX_BANKERS][E_BANKER],
    ATMData[MAX_ATMS][E_ATM];
    
new
    Iterator: Bankers<MAX_BANKERS>,
    Iterator: ATMs<MAX_ATMS>;


new
    CurrentAccountID[MAX_PLAYERS] = {-1, ...},
    LogListType[MAX_PLAYERS] = {TYPE_NONE, ...},
    LogListPage[MAX_PLAYERS],
    EditingATMID[MAX_PLAYERS] = {-1, ...};

/*
      _   _                   _          
     | | | |   ___     ___   | | __  ___ 
     | |_| |  / _ \   / _ \  | |/ / / __|
     |  _  | | (_) | | (_) | |   <  \__ \
     |_| |_|  \___/   \___/  |_|\_\ |___/

*/

hook OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == BankLoginTD[42])
    {
        for(new i = 0; i < 46; i++)
        {
            TextDrawHideForPlayer(playerid, BankLoginTD[i]);
        }
        CancelSelectTextDraw(playerid);
        GledaLoginTD[playerid] = false;  

        BuildBankAccountTDs(playerid, true);
    }
    else if(clickedid == BankAccountTD[51])
    {
        Dialog_Show(playerid, dialog_bank_create, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Napravi Nalog", "Izaberi lozinku za svoj novi nalog:", "Kreiraj", "Nazad");
    }
    else if(clickedid == BankAccountTD[57])
    {
        Bank_ListAccounts(playerid);
    }
    else if(clickedid == BankAccountTD[67])
    {
        Dialog_Show(playerid, dialog_depositzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Ostavi Novac", "Koliko novca zelis da ostavis na racun?", "Ostavi", "Nazad");
    }
    else if(clickedid == BankAccountTD[69])
    {
        Dialog_Show(playerid, dialog_transfer1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "Upisi Account ID kojem zelis izvrsiti transfer:", "Nastavi", "Nazad");
    }
    else if(clickedid == BankAccountTD[68])
    {
        Dialog_Show(playerid, dialog_withdrawzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Podigni", "Koliko novca zelis da podignes?", "Podigni", "Nazad");
    }
    else if(clickedid == BankAccountTD[55])
    {
        SendClientMessage(playerid, 0x3498DBFF, "[ML-BANKA]: {FFFFFF}Uspesno izlogovan.");
        
        CurrentAccountID[playerid] = -1;
        Bank_ShowMenu(playerid);
    }
    else if(clickedid == BankAccountTD[54])
    {
        if(GetPVarInt(playerid, "usingATM"))
        {
            SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes ovo na bankomatu, poseti banku.");
            return Bank_ShowMenu(playerid);
        }
        
        if(strcmp(Bank_GetOwner(CurrentAccountID[playerid]), ReturnPlayerName(playerid)))
        {
            SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo vlasnik naloga moze ovo.");
            return Bank_ShowMenu(playerid);
        }
        
        Dialog_Show(playerid, dialog_remove, DIALOG_STYLE_MSGBOX, "{F1C40F}Banka: {FFFFFF}Ukloni Nalog", "Da li ste sigurni? Nalog ce biti uklonjen {E74C3C}zauvek.", "Da", "Nazad");
    }
    return (true);
}
hook OnGameModeInit()
{
    print("finance/bank_ogy.aio loaded");



    CreateBankTDs();

    //
    for(new i; i < MAX_BANKERS; i++)
    {
        BankerData[i][bankerActorID] = -1;
        
        #if defined BANKER_USE_MAPICON
        BankerData[i][bankerIconID] = -1;
        #endif
        
        BankerData[i][bankerLabel] = Text3D: -1;
    }
    
    for(new i; i < MAX_ATMS; i++)
    {
        ATMData[i][atmObjID] = -1;

        #if defined ATM_USE_MAPICON
        ATMData[i][atmIconID] = -1;
        #endif

        ATMData[i][atmLabel] = Text3D: -1;
    }
    if(created_tables == false)
    {
        // create tables if they don't exist
        mysql_tquery(SQL, "CREATE TABLE IF NOT EXISTS `bankers` (\
          `ID` int(11) NOT NULL,\
          `Skin` smallint(3) NOT NULL,\
          `PosX` float NOT NULL,\
          `PosY` float NOT NULL,\
          `PosZ` float NOT NULL,\
          `PosA` float NOT NULL\
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8;");
        
        mysql_tquery(SQL, "CREATE TABLE IF NOT EXISTS `bank_atms` (\
          `ID` int(11) NOT NULL,\
          `PosX` float NOT NULL,\
          `PosY` float NOT NULL,\
          `PosZ` float NOT NULL,\
          `RotX` float NOT NULL,\
          `RotY` float NOT NULL,\
          `RotZ` float NOT NULL\
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8;");
        
        mysql_tquery(SQL, "CREATE TABLE IF NOT EXISTS `bank_accounts` (\
          `ID` int(11) NOT NULL auto_increment,\
          `Owner` varchar(24) NOT NULL,\
          `Password` varchar(32) NOT NULL,\
          `Balance` int(11) NOT NULL,\
          `CreatedOn` int(11) NOT NULL,\
          `LastAccess` int(11) NOT NULL,\
          `Disabled` smallint(1) NOT NULL,\
          PRIMARY KEY  (`ID`)\
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8;");
        
        new query[512];
        mysql_format(SQL, query, sizeof(query), "CREATE TABLE IF NOT EXISTS `bank_logs` (\
            `ID` int(11) NOT NULL auto_increment,\
            `AccountID` int(11) NOT NULL,\
            `ToAccountID` int(11) NOT NULL default '-1',\
            `Type` smallint(1) NOT NULL,\
            `Player` varchar(24) NOT NULL,\
            `Amount` int(11) NOT NULL,\
            `Date` int(11) NOT NULL,");
        
        mysql_format(SQL, query, sizeof(query), "%s\
            PRIMARY KEY  (`ID`),\
            KEY `bank_logs_ibfk_1` (`AccountID`),\
            CONSTRAINT `bank_logs_ibfk_1` FOREIGN KEY (`AccountID`) REFERENCES `bank_accounts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE\
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8;", query);
        
        mysql_tquery(SQL, query);

        print("all-in-one/bank_ogy.aio created - tables.");
    }
    mysql_tquery(SQL, "SELECT * FROM bankers", "LoadBankers");
    mysql_tquery(SQL, "SELECT * FROM bank_atms", "LoadATMs");
    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnGameModeExit()
{
    foreach(new i : Bankers)
    {
        if(IsValidActor(BankerData[i][bankerActorID])) DestroyActor(BankerData[i][bankerActorID]);
    }
    return Y_HOOKS_CONTINUE_RETURN_1;
}


hook OnPlayerConnect(playerid)
{
    CurrentAccountID[playerid] = -1;
    LogListType[playerid] = TYPE_NONE;
    LogListPage[playerid] = 0;
    
    EditingATMID[playerid] = -1;

    GledaLoginTD[playerid] = 
    GledaBankaAcc[playerid] = false;
    return Y_HOOKS_CONTINUE_RETURN_1;
}



/*
      ____                              __  _                           _ 
     / ___|    __ _  __   __   ___     / / | |       ___     __ _    __| |
     \___ \   / _` | \ \ / /  / _ \   / /  | |      / _ \   / _` |  / _` |
      ___) | | (_| |  \ V /  |  __/  / /   | |___  | (_) | | (_| | | (_| |
     |____/   \__,_|   \_/    \___| /_/    |_____|  \___/   \__,_|  \__,_|
                                                                      
*/


forward LoadBankers();
public LoadBankers()
{
    new rows = cache_num_rows();
    if(rows)
    {
        new id, label_string[64];
        for(new i; i < rows; i++)
        {
            cache_get_value_name_int(i, "ID", id);
            cache_get_value_name_int(i, "Skin",BankerData[id][Skin]);
            cache_get_value_name_float(i, "PosX",BankerData[id][bankerX]);
            cache_get_value_name_float(i, "PosY",BankerData[id][bankerY]);
            cache_get_value_name_float(i, "PosZ",BankerData[id][bankerZ] );
            cache_get_value_name_float(i, "PosA",BankerData[id][bankerA]);
            
            BankerData[id][bankerActorID] = CreateActor(BankerData[id][Skin], BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], BankerData[id][bankerA]);
            if(!IsValidActor(BankerData[id][bankerActorID])) {
                printf("all-in-one/bank_ogy.aoi - Nisam mogao da kreiram aktora za Banker ID > %d.", id);
            }else{
                SetActorInvulnerable(BankerData[id][bankerActorID], true); // people may use a version where actors aren't invulnerable by default
            }
            
            #if defined BANKER_USE_MAPICON
            BankerData[id][bankerIconID] = CreateDynamicMapIcon(BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ], 58, 0, .streamdistance = BANKER_ICON_RANGE);
            #endif
            
            format(label_string, sizeof(label_string), "Radnik banke(%d)\n\n{FFFFFF}Koristite {F1C40F}/banka", id);
            BankerData[id][bankerLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, BankerData[id][bankerX], BankerData[id][bankerY], BankerData[id][bankerZ] + 0.25, 5.0, .testlos = 1);

            Iter_Add(Bankers, id);
        }
    }

    printf("all-in-one/bank_ogy.aoi loaded(%d) bankara", Iter_Count(Bankers));
    return 1;
}

forward LoadATMs();
public LoadATMs()
{
    new rows = cache_num_rows();
    if(rows)
    {
        new id, label_string[64];
        for(new i; i < rows; i++)
        {
            cache_get_value_name_int(i, "ID", id);
            cache_get_value_name_float(i, "PosX",ATMData[id][atmX]);
            cache_get_value_name_float(i, "PosY",ATMData[id][atmY]);
            cache_get_value_name_float(i, "PosZ",ATMData[id][atmZ]);
            cache_get_value_name_float(i, "RotX",ATMData[id][atmRX]);
            cache_get_value_name_float(i, "RotY",ATMData[id][atmRY]);
            cache_get_value_name_float(i, "RotZ",ATMData[id][atmRZ]);

            ATMData[id][atmObjID] = CreateDynamicObject(2942, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], ATMData[id][atmRX], ATMData[id][atmRY], ATMData[id][atmRZ]);
            if(!IsValidDynamicObject(ATMData[id][atmObjID])) printf("all-in-one/bank_ogy.aoi - Nisam mogao kreirati objekat ATM za ATM ID %d.", id);
            
            #if defined ATM_USE_MAPICON
            ATMData[id][atmIconID] = CreateDynamicMapIcon(ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ], 52, 0, .streamdistance = ATM_ICON_RANGE);
            #endif

            format(label_string, sizeof(label_string), "ATM (%d)\n\n{FFFFFF}Koristi {F1C40F}/atm!", id);
            ATMData[id][atmLabel] = CreateDynamic3DTextLabel(label_string, 0x1ABC9CFF, ATMData[id][atmX], ATMData[id][atmY], ATMData[id][atmZ] + 0.85, 5.0, .testlos = 1);

            Iter_Add(ATMs, id);
        }
    }

    printf("all-in-one/bank_ogy.aoi loaded(%d) atms", Iter_Count(ATMs));
    return 1;
}
/*
      _____                          _     _                       
     |  ___|  _   _   _ __     ___  | |_  (_)   ___    _ __    ___ 
     | |_    | | | | | '_ \   / __| | __| | |  / _ \  | '_ \  / __|
     |  _|   | |_| | | | | | | (__  | |_  | | | (_) | | | | | \__ \
     |_|      \__,_| |_| |_|  \___|  \__| |_|  \___/  |_| |_| |___/
                                                               
*/

IsPlayerNearBanker(playerid)
{
    foreach(new i : Bankers)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, BankerData[i][bankerX], BankerData[i][bankerY], BankerData[i][bankerZ])) return 1;
    }
    
    return 0;
}

IsPlayerNearATM(playerid)
{
    foreach(new i : ATMs)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, ATMData[i][atmX], ATMData[i][atmY], ATMData[i][atmZ])) return 1;
    }

    return 0;
}


Bank_SaveLog(playerid, type, accid, toaccid, amount)
{
    if(type == TYPE_NONE) return 1;
    new query[256];
    
    switch(type)
    {
        case TYPE_LOGIN, TYPE_PASSCHANGE: mysql_format(SQL, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Date=UNIX_TIMESTAMP()", accid, type, ReturnPlayerName(playerid));
        case TYPE_DEPOSIT, TYPE_WITHDRAW: mysql_format(SQL, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, type, ReturnPlayerName(playerid), amount);
        case TYPE_TRANSFER: mysql_format(SQL, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, ToAccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, toaccid, type, ReturnPlayerName(playerid), amount);
    }
    
    mysql_tquery(SQL, query);
    return 1;
}

Bank_ShowMenu(playerid)
{
    new string[256], using_atm = GetPVarInt(playerid, "usingATM");
    if(CurrentAccountID[playerid] == -1) {
        format(string, sizeof(string), "{%06x}Napravi Nalog\t{2ECC71}%s\nMoji Nalozi\t{F1C40F}%d\nPrijava na Nalog", (using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8), (using_atm ? ("") : formatInt(ACCOUNT_PRICE)), Bank_AccountCount(playerid));
        Dialog_Show(playerid, dialog_bank_nologin, DIALOG_STYLE_TABLIST, "{F1C40F}Banka: {FFFFFF}Home", string, "Odaberi", "Zatvori");
    }else{
        new balance = Bank_GetBalance(CurrentAccountID[playerid]), menu_title[64];
        format(menu_title, sizeof(menu_title), "{F1C40F}Banka: {FFFFFF}Home (Account ID: {F1C40F}%d{FFFFFF})", CurrentAccountID[playerid]);
        
        format(
            string,
            sizeof(string),
            "{%06x}Napravi Nalog\t{2ECC71}%s\nMoji Nalozi\t{F1C40F}%d\nOstavi\t{2ECC71}%s\nPodigni\t{2ECC71}%s\nTransfer\t{2ECC71}%s\n{%06x}Evidencije Naloga\n{%06x}Promeni Lozinku\n{%06x}Ukloni Nalog\nOdjava",
            (using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
            (using_atm ? ("") : formatInt(ACCOUNT_PRICE)),
            Bank_AccountCount(playerid),
            formatInt(GetPlayerMoney(playerid)),
            formatInt(balance),
            formatInt(balance),
            (using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
            (using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
            (using_atm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8)
        );

        Dialog_Show(playerid, dialog_banka_menu, DIALOG_STYLE_TABLIST, menu_title, string, "Odaberi", "Izadji");
    }
    
    DeletePVar(playerid, "bankLoginAccount");
    DeletePVar(playerid, "bankTransferAccount");
    return 1;
}

Bank_ShowLogMenu(playerid)
{
    LogListType[playerid] = TYPE_NONE;
    LogListPage[playerid] = 0;
    Dialog_Show(playerid, dialog_bank_logs, DIALOG_STYLE_LIST, "{F1C40F}Banka: {FFFFFF}Evidencije", "Ostavljen Novac\nPodignut Novac\nTransferi\nPrijave na Nalog\nPromene Lozinke", "Pokazi", "Nazad");
    return 1;
}

Bank_AccountCount(playerid)
{
    new query[144], Cache: find_accounts;
    mysql_format(SQL, query, sizeof(query), "SELECT null FROM bank_accounts WHERE Owner='%e' && Disabled=0", ReturnPlayerName(playerid));
    find_accounts = mysql_query(SQL, query);
    
    new count = cache_num_rows();
    cache_delete(find_accounts);
    return count;
}

Bank_GetBalance(accountid)
{
    new query[144], Cache: get_balance;
    mysql_format(SQL, query, sizeof(query), "SELECT Balance FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
    get_balance = mysql_query(SQL, query);

    new balance;
    cache_get_value_name_int(0, "Balance", balance);
    cache_delete(get_balance);
    return balance;
}

Bank_GetOwner(accountid)
{
    new query[144], owner[MAX_PLAYER_NAME], Cache: get_owner;
    mysql_format(SQL, query, sizeof(query), "SELECT Owner FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
    get_owner = mysql_query(SQL, query);

    cache_get_value_name(0, "Owner", owner, 26);
    cache_delete(get_owner);
    return owner;
}

Bank_ListAccounts(playerid)
{
    new query[256], Cache: get_accounts;
    mysql_format(SQL, query, sizeof(query), "SELECT ID, Balance, LastAccess, FROM_UNIXTIME(CreatedOn, '%%d/%%m/%%Y %%H:%%i:%%s') AS Created, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE Owner='%e' && Disabled=0 ORDER BY CreatedOn DESC", ReturnPlayerName(playerid));
    get_accounts = mysql_query(SQL, query);
    new rows = cache_num_rows();

    if(rows) {
        new string[1024], cdate[24], ldate[24],id,balance,lastacces;
        format(string, sizeof(string), "ID\tBalans\tNapravljen\tPoslednji put Vidjen\n");
        for(new i; i < rows; ++i)
        {
            cache_get_value_name(i, "Created", cdate, 24);
            cache_get_value_name(i, "Last", ldate, 24);
            cache_get_value_name_int(i, "ID", id);
            cache_get_value_name_int(i, "Balance", balance);
            cache_get_value_name_int(i, "LastAccess", lastacces);
            format(string, sizeof(string), "%s{FFFFFF}%d\t{2ECC71}%s\t{FFFFFF}%s\t%s\n", string, id, formatInt(balance), cdate, lastacces == 0 ? ("Never") : ldate);
        }

        Dialog_Show(playerid, dialog_bank_accounts, DIALOG_STYLE_TABLIST_HEADERS, "{F1C40F}Banka: {FFFFFF}Moji Nalozi", string, "Prijava", "Nazad");
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Nemas ni jedan racun u nasoj banci.");
        Bank_ShowMenu(playerid);
    }

    cache_delete(get_accounts);
    return 1;
}

Bank_ShowLogs(playerid)
{
    new query[196], type = LogListType[playerid], Cache: bank_logs;
    mysql_format(SQL, query, sizeof(query), "SELECT *, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i:%%s') as ActionDate FROM bank_logs WHERE AccountID=%d && Type=%d ORDER BY Date DESC LIMIT %d, 15", CurrentAccountID[playerid], type, LogListPage[playerid] * 15);
    bank_logs = mysql_query(SQL, query);
    
    new rows = cache_num_rows();
    if(rows) {
        new list[1512], title[96], name[MAX_PLAYER_NAME], date[24];
        switch(type)
        {
            case TYPE_LOGIN:
            {
                format(list, sizeof(list), "Po\tDatumu\n");
                format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Istorija Prijave (Strana %d)", LogListPage[playerid] + 1);
            }
            
            case TYPE_DEPOSIT:
            {
                format(list, sizeof(list), "Po\tVrednosti\tDatumu Depozita\n");
                format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Istorija Depozita (Strana %d)", LogListPage[playerid] + 1);
            }

            case TYPE_WITHDRAW:
            {
                format(list, sizeof(list), "Po\tVrednosti\tDatumu Podizanja\n");
                format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Istorija Podizanja (Strana %d)", LogListPage[playerid] + 1);
            }
            
            case TYPE_TRANSFER:
            {
                format(list, sizeof(list), "Po\tPrimaocu\tVrednosti\tDatumu Transfera\n");
                format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Istorija Transfera (Strana %d)", LogListPage[playerid] + 1);
            }
            
            case TYPE_PASSCHANGE:
            {
                format(list, sizeof(list), "Po\tDatumu\n");
                format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Promene Lozinke (Strana %d)", LogListPage[playerid] + 1);
            }
        }
        
        for(new i; i < rows; ++i)
        {
            cache_get_value_name(i, "Player", name, 30);
            cache_get_value_name(i, "ActionDate", date, 24);

            switch(type)
            {
                case TYPE_LOGIN:
                {
                    format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
                }

                case TYPE_DEPOSIT:
                {
                    new amount;
                    cache_get_value_name_int(i, "Amount", amount);
                    format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(amount), date);
                }

                case TYPE_WITHDRAW:
                {
                    new amount;
                    cache_get_value_name_int(i, "Amount", amount);
                    format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(amount), date);
                }

                case TYPE_TRANSFER:
                {
                    new toaccountid,amount;
                    cache_get_value_name_int(i, "ToAccountID", toaccountid);
                    cache_get_value_name_int(i, "Amount", amount);
                    format(list, sizeof(list), "%s%s\t%d\t{2ECC71}%s\t%s\n", list, name, toaccountid, formatInt(amount), date);
                }

                case TYPE_PASSCHANGE:
                {
                    format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
                }
            }
        }

        Dialog_Show(playerid, dialog_bank_nologs, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Dalje", "Nazad");
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozemo da pronadjemo vise evidencija.");
        Bank_ShowLogMenu(playerid);
    }

    cache_delete(bank_logs);
    return 1;
}
/*
      _____                                                _       
     |  ___|   ___    _ __  __      __   __ _   _ __    __| |  ___ 
     | |_     / _ \  | '__| \ \ /\ / /  / _` | | '__|  / _` | / __|
     |  _|   | (_) | | |     \ V  V /  | (_| | | |    | (_| | \__ \
     |_|      \___/  |_|      \_/\_/    \__,_| |_|     \__,_| |___/

*/

forward OnBankAccountCreated(playerid, pass[]);
public OnBankAccountCreated(playerid, pass[])
{
    VosticGiveMoney(playerid, -ACCOUNT_PRICE);
    
    new id = cache_insert_id(), string[64];
    SendBankMessage(playerid, "Uspesno ste napravili vas bankovni racun!");
    
    format(string, sizeof(string), "[ML-Bank]: {ffffff}Vas bankovni racun je broj: {F4AD81}%d", id);
    va_SendClientMessage(playerid,0xF4AD81FF,  string);
    
    format(string, sizeof(string), "[ML-Bank]: {ffffff}Vasa lozinka za racun je: {F4AD81}%s", pass);
    va_SendClientMessage(playerid,0xF4AD81FF, string);
    return 1;
}

forward OnBankAccountLogin(playerid, id);
public OnBankAccountLogin(playerid, id)
{
    if(cache_num_rows() > 0) {
        new string[128], owner[MAX_PLAYER_NAME], ldate[24],lastacces;
        cache_get_value_name(0, "Owner", owner, 25);
        cache_get_value_name(0, "Last", ldate, 24);
        
        format(string, sizeof(string), "[ML-Bank]: {ffffff}Ovaj bankovni racun je u vlasnistvu gradjanina: {F4AD81}%s.", owner);
        va_SendClientMessage(playerid,0xF4AD81FF, string);

        cache_get_value_name_int(0, "LastAccess", lastacces);
        format(string, sizeof(string), "[ML-Bank]: {ffffff}Poslednji put prijavljen: {F4AD81}%s", lastacces ? ("Nikad") : ldate);
        va_SendClientMessage(playerid,0xF4AD81FF, string);
        
        CurrentAccountID[playerid] = id;
        Bank_ShowMenu(playerid);
        
        new query[96];
        mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET LastAccess=UNIX_TIMESTAMP() WHERE ID=%d && Disabled=0", id);
        mysql_tquery(SQL, query);
        
        Bank_SaveLog(playerid, TYPE_LOGIN, id, -1, 0);
    }else{

        SendBankMessage(playerid, "Invalid credentials.");
        Bank_ShowMenu(playerid);
    }
    
    return 1;
}

forward OnBankAccountDeposit(playerid, amount);
public OnBankAccountDeposit(playerid, amount)
{
    if(cache_affected_rows() > 0) {
        new string[64];
        format(string, sizeof(string), "[ML-BANKA]: {FFFFFF}Uspesno depozitovano {2ECC71}%s.", formatInt(amount));
        SendClientMessage(playerid, 0x3498DBFF, string);
        
        VosticGiveMoney(playerid, -amount);
        Bank_SaveLog(playerid, TYPE_DEPOSIT, CurrentAccountID[playerid], -1, amount);
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Neuspesna transakcija.");
    }
    
    Bank_ShowMenu(playerid);
    return 1;
}

forward OnBankAccountWithdraw(playerid, amount);
public OnBankAccountWithdraw(playerid, amount)
{
    if(cache_affected_rows() > 0) {
        new string[64];
        format(string, sizeof(string), "[ML-BANKA]: {FFFFFF}Uspesno podignuto {2ECC71}%s.", formatInt(amount));
        SendClientMessage(playerid, 0x3498DBFF, string);

        VosticGiveMoney(playerid, amount);
        Bank_SaveLog(playerid, TYPE_WITHDRAW, CurrentAccountID[playerid], -1, amount);
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Neuspesna transakcija.");
    }

    Bank_ShowMenu(playerid);
    return 1;
}

forward OnBankAccountTransfer(playerid, id, amount);
public OnBankAccountTransfer(playerid, id, amount)
{
    if(cache_affected_rows() > 0) {
        new query[144];
        mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
        mysql_tquery(SQL, query, "OnBankAccountTransferDone", "iii", playerid, id, amount);
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Neuspesna transakcija.");
        Bank_ShowMenu(playerid);
    }

    return 1;
}

forward OnBankAccountTransferDone(playerid, id, amount);
public OnBankAccountTransferDone(playerid, id, amount)
{
    if(cache_affected_rows() > 0) {
        new string[128];
        format(string, sizeof(string), "[ML-BANKA]: {FFFFFF}Uspesno prebaceno {2ECC71}%s {FFFFFF}igracu ciji je bankovni Nalog ID {F1C40F}%d.", formatInt(amount), id);
        SendClientMessage(playerid, 0x3498DBFF, string);
        
        Bank_SaveLog(playerid, TYPE_TRANSFER, CurrentAccountID[playerid], id, amount);
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Neuspesna transakcija.");
        
    }

    Bank_ShowMenu(playerid);
    return 1;
}

forward OnBankAccountPassChange(playerid, newpass[]);
public OnBankAccountPassChange(playerid, newpass[])
{
    if(cache_affected_rows() > 0) {
        new string[128];
        format(string, sizeof(string), "[ML-BANKA]: {FFFFFF}Lozinka postavljena na {F1C40F}%s.", newpass);
        SendClientMessage(playerid, 0x3498DBFF, string);
        
        Bank_SaveLog(playerid, TYPE_PASSCHANGE, CurrentAccountID[playerid], -1, 0);
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Neuspesna promena lozinke.");
    }

    Bank_ShowMenu(playerid);
    return 1;
}

forward OnBankAccountDeleted(playerid, id, amount);
public OnBankAccountDeleted(playerid, id, amount)
{
    if(cache_affected_rows() > 0) {
        VosticGiveMoney(playerid, amount);
        
        foreach(new i : Player)
        {
            if(i == playerid) continue;
            if(CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
        }
        
        new string[128];
        format(string, sizeof(string), "[ML-BANKA]: {FFFFFF}Nalog uklonjen, imate preostalih {2ECC71}%s {FFFFFF}na racunu.", formatInt(amount));
        SendClientMessage(playerid, 0x3498DBFF, string);
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Neuspesno uklanjanje naloga.");
    }

    CurrentAccountID[playerid] = -1;
    Bank_ShowMenu(playerid);
    return 1;
}

forward OnBankAccountAdminEdit(playerid);
public OnBankAccountAdminEdit(playerid)
{
    if(cache_affected_rows() > 0) {
        SendClientMessage(playerid, 0x3498DBFF, "[ML-BANKA]: {FFFFFF}Nalog izmenjen.");
    }else{
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Izmena naloga neuspela. (Ni jedna kolona nije ostecena)");
    }
    
    return 1;
}

/*
      ____    _           _                       
     |  _ \  (_)   __ _  | |   ___     __ _   ___ 
     | | | | | |  / _` | | |  / _ \   / _` | / __|
     | |_| | | | | (_| | | | | (_) | | (_| | \__ \
     |____/  |_|  \__,_| |_|  \___/   \__, | |___/
                                      |___/       
*/




Dialog:dialog_banka_menu(const playerid, response, listitem, string:inputtext[])
{
    if(!response)
        return 1;

    if(response)
    {
        if(listitem == 0)
        {
            if(GetPVarInt(playerid, "usingATM"))
            {
                SendBankMessage(playerid, "Ne mozete to na bankomatu, posetite banku.");
                return Bank_ShowMenu(playerid);
            }
            
            if(ACCOUNT_PRICE > GetPlayerMoney(playerid))
            {
                SendBankMessage(playerid, "Nemate dovoljno novca za otvaranje racuna.");
                return Bank_ShowMenu(playerid);
            }

            #if defined ACCOUNT_CLIMIT
            if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
            {
                SendBankMessage(playerid, "Dostigli ste limit bankovnih racuna.");
                return Bank_ShowMenu(playerid);
            }
            #endif

            Dialog_Show(playerid, dialog_bank_create, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Napravi Nalog", "Odaberite lozinku koju zelite da koristite za novi racun:", "Napravi", "Nazad");
        }

        if(listitem == 1) Bank_ListAccounts(playerid);
        if(listitem == 2) Dialog_Show(playerid, dialog_depositzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Ostavi", "Koliko novca zelis da ostavis na racun?", "Ostavi", "Nazad");
        if(listitem == 3) Dialog_Show(playerid, dialog_withdrawzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Podigni", "Koliko novca zelis da podignes?", "Podigni", "Nazad");
        if(listitem == 4) Dialog_Show(playerid, dialog_transfer1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "Upisi Account ID kojem zelis izvrsiti transfer:", "Nastavi", "Nazad");
        if(listitem == 5)
        {
            if(GetPVarInt(playerid, "usingATM"))
            {
                SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes ovo na bankomatu, poseti banku.");
                return Bank_ShowMenu(playerid);
            }
            
            Bank_ShowLogMenu(playerid);
        }
        
        if(listitem == 6)
        {
            if(GetPVarInt(playerid, "usingATM"))
            {
                SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes ovo na bankomatu, poseti banku.");
                return Bank_ShowMenu(playerid);
            }
            
            if(strcmp(Bank_GetOwner(CurrentAccountID[playerid]), ReturnPlayerName(playerid)))
            {
                SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo vlasnik naloga moze ovo.");
                return Bank_ShowMenu(playerid);
            }
            
            Dialog_Show(playerid, dialog_password, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Promeni Lozinku", "Unesi novu lozinku:", "Promeni", "Nazad");
        }
        
        if(listitem == 7)
        {
            if(GetPVarInt(playerid, "usingATM"))
            {
                SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes ovo na bankomatu, poseti banku.");
                return Bank_ShowMenu(playerid);
            }
            
            if(strcmp(Bank_GetOwner(CurrentAccountID[playerid]), ReturnPlayerName(playerid)))
            {
                SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo vlasnik naloga moze ovo.");
                return Bank_ShowMenu(playerid);
            }
            
            Dialog_Show(playerid, dialog_remove, DIALOG_STYLE_MSGBOX, "{F1C40F}Banka: {FFFFFF}Ukloni Nalog", "Da li ste sigurni? Nalog ce biti uklonjen {E74C3C}zauvek.", "Da", "Nazad");
            // https://youtu.be/rcjpags7JT8 - because it doesn't get deleted actually
        }
        
        if(listitem == 8)
        {
            SendClientMessage(playerid, 0x3498DBFF, "[ML-BANKA]: {FFFFFF}Uspesno izlogovan.");
            
            CurrentAccountID[playerid] = -1;
            Bank_ShowMenu(playerid);
        }
    }
    return Y_HOOKS_CONTINUE_RETURN_1;
}
Dialog:dialog_depositzz(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(CurrentAccountID[playerid] == -1) return 1;
    if(isnull(inputtext)) return Dialog_Show(playerid, dialog_depositzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Ostavi", "{E74C3C}Ne moze biti prazno.\n\n{FFFFFF}Koliko novca zelis da ostavis na racun?", "Ostavi", "Nazad");
    new amount = strval(inputtext);
    if(!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return Dialog_Show(playerid, dialog_depositzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Ostavi", "{E74C3C}Ne mozes depozitovati manje od $1 ili vise od $250,000,000 odjednom. ($5,000,000 odjednom na ATMs)\n\n{FFFFFF}Koliko novca zelis da ostavis na racun?", "Ostavi", "Nazad");
    if(amount > GetPlayerMoney(playerid)) return Dialog_Show(playerid, dialog_depositzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Ostavi", "{E74C3C}Nemas dovoljno novca.\n\n{FFFFFF}Koliko novca zelis da ostavis na racun?", "Ostavi", "Nazad");
    if((amount + Bank_GetBalance(CurrentAccountID[playerid])) > ACCOUNT_LIMIT)
    {
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes vise depozitovati na ovaj nalog novac.");
        return Bank_ShowMenu(playerid);
    }
    
    new query[96];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
    mysql_tquery(SQL, query, "OnBankAccountDeposit", "ii", playerid, amount);
    return 1;
}
Dialog:dialog_withdrawzzzz(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(CurrentAccountID[playerid] == -1) return 1;
    if(isnull(inputtext)) return Dialog_Show(playerid, dialog_withdrawzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Podigni", "{E74C3C}Ne moze biti prazno.\n\n{FFFFFF}Koliko novca zelis da podignes?", "Podigni", "Nazad");
    new amount = strval(inputtext);
    if(!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return Dialog_Show(playerid, dialog_withdrawzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Podigni", "{E74C3C}Ne mozes podici manje od $1 ili vise od $250,000,000 odjednom. ($5,000,000 odjednom na ATMs)\n\n{FFFFFF}Koliko novca zelis da podignes?", "Podigni", "Nazad");
    if(amount > Bank_GetBalance(CurrentAccountID[playerid])) return Dialog_Show(playerid, dialog_withdrawzz, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Podigni", "{E74C3C}Nalog nema dovoljno novca.\n\n{FFFFFF}Koliko novca zelis da podignes?", "Podigni", "Nazad");
    
    new query[96];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
    mysql_tquery(SQL, query, "OnBankAccountWithdraw", "ii", playerid, amount);
    return 1;
}
Dialog:dialog_transfer1(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(CurrentAccountID[playerid] == -1) return 1;
    if(isnull(inputtext)) return Dialog_Show(playerid, dialog_transfer1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "{E74C3C}Ne moze biti prazno.\n\n{FFFFFF}Upisi Account ID kojem zelis izvrsiti transfer:", "Nastavi", "Nazad");
    if(strval(inputtext) == CurrentAccountID[playerid]) return Dialog_Show(playerid, dialog_transfer1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "{E74C3C}Ne mozes transferovati novac na sopstveni nalog.\n\n{FFFFFF}Upisi Account ID kojem zelis izvrsiti transfer:", "Nastavi", "Nazad");
    SetPVarInt(playerid, "bankTransferAccount", strval(inputtext));
    Dialog_Show(playerid, dialog_transfer2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "Cifra koju zelis prebaciti:", "Transfer", "Nazad");
    return 1;
}
Dialog:dialog_transfer2(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Dialog_Show(playerid, dialog_transfer1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "Upisi Account ID kojem zelis izvrsiti transfer:", "Nastavi", "Nazad");
    if(CurrentAccountID[playerid] == -1) return 1;
    if(isnull(inputtext)) return Dialog_Show(playerid, dialog_transfer2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "{E74C3C}Ne moze biti prazno.\n\n{FFFFFF}Cifra koju zelis prebaciti:", "Transfer", "Nazad");
    new amount = strval(inputtext);
    if(!(1 <= amount <= (GetPVarInt(playerid, "usingATM") ? 5000000 : 250000000))) return Dialog_Show(playerid, dialog_transfer2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "{E74C3C}Ne mozes transfer manje od $1 ili vise od $250,000,000 odjednom. ($5,000,000 na ATMs)\n\n{FFFFFF}Cifra koju zelis prebaciti:", "Transfer", "Nazad");
    if(amount > Bank_GetBalance(CurrentAccountID[playerid])) return Dialog_Show(playerid, dialog_transfer2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "{E74C3C}Nalog nema dovoljno novca.\n\n{FFFFFF}Cifra koju zelis prebaciti:", "Transfer", "Nazad");
    new id = GetPVarInt(playerid, "bankTransferAccount");
    if((amount + Bank_GetBalance(id)) > ACCOUNT_LIMIT)
    {
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes depozitovati vise novca na nalog ciji ste uneli ID.");
        return Bank_ShowMenu(playerid);
    }
    
    new query[96];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, id);
    mysql_tquery(SQL, query, "OnBankAccountTransfer", "iii", playerid, id, amount);
    return 1;
}
Dialog:dialog_bank_nologin(const playerid, response, listitem, string:inputtext[])
{
    if(!response)
        return 1;
    if(response)
    {
        if(listitem == 0)
        {
            if(GetPVarInt(playerid, "usingATM"))
            {
                SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes ovo na bankomatu, poseti banku.");
                return Bank_ShowMenu(playerid);
            }
            
            if(ACCOUNT_PRICE > GetPlayerMoney(playerid))
            {
                SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Nemas dovoljno novca da kreiras nalog u banci.");
                return Bank_ShowMenu(playerid);
            }
            
            #if defined ACCOUNT_CLIMIT
            if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
            {
                SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes kreirati vise bankovnih racuna.");
                return Bank_ShowMenu(playerid);
            }
            #endif
            
            Dialog_Show(playerid, dialog_bank_create, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Napravi Nalog", "Izaberi lozinku za svoj novi bankovni racun:", "Kreiraj", "Nazad");
        }
        
        if(listitem == 1) Bank_ListAccounts(playerid);
        if(listitem == 2) Dialog_Show(playerid, dialog_bank_login_pass, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Prijava", "Lozinka Naloga:", "Prijava", "Odustani");
        return 1;
    }
    return Y_HOOKS_CONTINUE_RETURN_1;
}

Dialog:dialog_bank_create(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(isnull(inputtext)) return Dialog_Show(playerid, dialog_bank_create, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Napravi Nalog", "{E74C3C}Ne mozes ostaviti Lozinku Naloga praznu.\n\n{FFFFFF}Izaberi lozinku za svoj novi bankovni racun:", "Kreiraj", "Nazad");
    if(strlen(inputtext) > 16) return Dialog_Show(playerid, dialog_bank_create, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Napravi Nalog", "{E74C3C}Lozinka Naloga ne sme biti duza od 16 karaktera.\n\n{FFFFFF}Izaberi lozinku za svoj novi bankovni racun:", "Kreiraj", "Nazad");
    if(ACCOUNT_PRICE > GetPlayerMoney(playerid))
    {
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Nemas dovoljno novca da kreiras nalog u banci.");
        return Bank_ShowMenu(playerid);
    }

    #if defined ACCOUNT_CLIMIT
    if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
    {
        SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Ne mozes kreirati vise bankovnih racuna.");
        return Bank_ShowMenu(playerid);
    }
    #endif

    new query[144];
    mysql_format(SQL, query, sizeof(query), "INSERT INTO bank_accounts SET Owner='%e', Password=md5('%e'), CreatedOn=UNIX_TIMESTAMP()", ReturnPlayerName(playerid), inputtext);
    mysql_tquery(SQL, query, "OnBankAccountCreated", "is", playerid, inputtext);
    return Y_HOOKS_CONTINUE_RETURN_1;
}

Dialog:dialog_bank_accounts(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);

    SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
    Dialog_Show(playerid, dialog_bank_login_pass, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Prijava", "Lozinka Naloga:", "Prijava", "Odustani");
    return Y_HOOKS_CONTINUE_RETURN_1;
}
Dialog:dialog_bank_loginid(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(isnull(inputtext)) return Dialog_Show(playerid, dialog_bank_login_pass, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Prijava", "{E74C3C}Ne mozes polje za ID ostaviti prazno.\n\n{FFFFFF}Account ID:", "Nastavi", "Odustani");

    SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
    Dialog_Show(playerid, dialog_bank_login_pass, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Prijava", "Lozinka Naloga:", "Prijava", "Odustani");
    return 1;
}
Dialog:dialog_bank_login_pass(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(isnull(inputtext)) return Dialog_Show(playerid, dialog_bank_login_pass, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Prijava", "{E74C3C}Ne mozes ostaviti polje za lozinku prazno.\n\n{FFFFFF}Lozinka Naloga:", "Prijava", "Odustani");

    new query[200], id = GetPVarInt(playerid, "bankLoginAccount");
    mysql_format(SQL, query, sizeof(query), "SELECT Owner, LastAccess, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE ID=%d && Password=md5('%e') && Disabled=0 LIMIT 1", id, inputtext);
    mysql_tquery(SQL, query, "OnBankAccountLogin", "ii", playerid, id);
    return Y_HOOKS_CONTINUE_RETURN_1;
}
Dialog:dialog_password(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(CurrentAccountID[playerid] == -1) return 1;
    if(isnull(inputtext)) return Dialog_Show(playerid, dialog_password, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Promena Lozinke", "{E74C3C}Ne moze biti prazno.\n\n{FFFFFF}Unesi novu lozinku:", "Change", "Nazad");
    if(strlen(inputtext) > 16) return Dialog_Show(playerid, dialog_password, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Promena Lozinke", "{E74C3C}Nova lozinka ne moze biti duza od 16 karaktera.\n\n{FFFFFF}Unesi novu lozinku:", "Change", "Nazad");
    
    new query[128];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d && Disabled=0", inputtext, CurrentAccountID[playerid]);
    mysql_tquery(SQL, query, "OnBankAccountPassChange", "is", playerid, inputtext);
    return 1;
}
Dialog:dialog_remove(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(CurrentAccountID[playerid] == -1) return 1;
    
    new query[96], amount = Bank_GetBalance(CurrentAccountID[playerid]);
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", CurrentAccountID[playerid]);
    mysql_tquery(SQL, query, "OnBankAccountDeleted", "iii", playerid, CurrentAccountID[playerid], amount);
    return 1;
}
Dialog:dialog_bank_logs(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(CurrentAccountID[playerid] == -1) return 1;
    
    new typelist[6] = {TYPE_NONE, TYPE_DEPOSIT, TYPE_WITHDRAW, TYPE_TRANSFER, TYPE_LOGIN, TYPE_PASSCHANGE};
    LogListType[playerid] = typelist[listitem + 1];
    LogListPage[playerid] = 0;
    Bank_ShowLogs(playerid);
    return 1;
}
Dialog:dialog_bank_nologs(const playerid, response, listitem, string:inputtext[])
{
    if(!response) return Bank_ShowMenu(playerid);
    if(CurrentAccountID[playerid] == -1) return 1;

    new typelist[6] = {TYPE_NONE, TYPE_DEPOSIT, TYPE_WITHDRAW, TYPE_TRANSFER, TYPE_LOGIN, TYPE_PASSCHANGE};
    LogListType[playerid] = typelist[listitem + 1];
    LogListPage[playerid] = 0;
    Bank_ShowLogs(playerid);
    return 1;
}
/*
       ____                                                       _       
      / ___|   ___    _ __ ___    _ __ ___     __ _   _ __     __| |  ___ 
     | |      / _ \  | '_ ` _ \  | '_ ` _ \   / _` | | '_ \   / _` | / __|
     | |___  | (_) | | | | | | | | | | | | | | (_| | | | | | | (_| | \__ \
      \____|  \___/  |_| |_| |_| |_| |_| |_|  \__,_| |_| |_|  \__,_| |___/
                                                                          
*/
CMD:banka(const playerid, params[])
{
    if(!IsPlayerNearBanker(playerid)) return SendBankMessage(playerid, "Niste u blizini radnika banke.");
    SetPVarInt(playerid, "usingATM", 0);
    if(!GledaLoginTD[playerid])
    {
        for(new i = 0; i < 46; i++)
        {
            TextDrawShowForPlayer(playerid, BankLoginTD[i]);
        }
        SelectTextDraw(playerid, x_ogycolor);
        GledaLoginTD[playerid] = true;  
    }
    if(GledaLoginTD[playerid])
    {
        for(new i = 0; i < 46; i++)
        {
            TextDrawHideForPlayer(playerid, BankLoginTD[i]);
        }
        CancelSelectTextDraw(playerid);
        GledaLoginTD[playerid] = false;  
    }
    if(GledaBankaAcc[playerid])
    {
        BuildBankAccountTDs(playerid, false);
    }
    return 1;
}

CMD:atm(const playerid, params[])
{
    if(!IsPlayerNearATM(playerid)) return SendBankMessage(playerid, "Niste u blizini bankomata");
    SetPVarInt(playerid, "usingATM", 1);
    Bank_ShowMenu(playerid);
    return 1;
}

CMD:asetowner(const playerid, params[])
{
    if(PlayerInfo[playerid][Staff] < 4) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo RCON staff moze koristiti ovu komandu.");
    new id, owner[MAX_PLAYER_NAME];
    if(sscanf(params, "is[24]", id, owner)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/asetowner [account id] [new owner]");
    new query[128];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Owner='%e' WHERE ID=%d", owner, id);
    mysql_tquery(SQL, query, "OnBankAccountAdminEdit", "i", playerid);
    return 1;
}

CMD:asetpassword(const playerid, params[])
{
    if(PlayerInfo[playerid][Staff] < 4) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo RCON staff moze koristiti ovu komandu.");
    new id, password[16];
    if(sscanf(params, "is[16]", id, password)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/asetpassword [account id] [new password]");
    new query[128];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d", password, id);
    mysql_tquery(SQL, query, "OnBankAccountAdminEdit", "i", playerid);
    return 1;
}

CMD:asetbalance(const playerid, params[])
{
    if(PlayerInfo[playerid][Staff] < 4) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo RCON staff moze koristiti ovu komandu.");
    new id, balance;
    if(sscanf(params, "ii", id, balance)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/asetbalance [account id] [balance]");
    if(balance > ACCOUNT_LIMIT) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Nalog koji ste odabrali je presao limit.");
    new query[128];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Balance=%d WHERE ID=%d", balance, id);
    mysql_tquery(SQL, query, "OnBankAccountAdminEdit", "i", playerid);
    return 1;
}

CMD:aclearlogs(const playerid, params[])
{
    if(PlayerInfo[playerid][Staff] < 4) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo RCON staff moze koristiti ovu komandu.");
    new id, type;
    if(sscanf(params, "iI(0)", id, type))
    {
        SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/aclearlogs [account id] [log tip (opcionalno)]");
        SendClientMessage(playerid, 0xE88732FF, "TYPES: {FFFFFF}0- Sve | 1- Prijave | 2- Depoziti | 3- Podizanja | 4- Transferi | 5- Promene Lozinke");
        return 1;
    }

    new query[128];
    if(type > 0) {
        mysql_format(SQL, query, sizeof(query), "DELETE FROM bank_logs WHERE AccountID=%d && Type=%d", id, type);
    }else{
        mysql_format(SQL, query, sizeof(query), "DELETE FROM bank_logs WHERE AccountID=%d", id);
    }

    mysql_tquery(SQL, query, "OnBankAccountAdminEdit", "i", playerid);
    return 1;
}

CMD:aremoveaccount(const playerid, params[])
{
    if(PlayerInfo[playerid][Staff] < 4) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo RCON staff moze koristiti ovu komandu.");
    new id;
    if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/aremoveaccount [account id]");
    foreach(new i : Player)
    {
        if(CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
    }
    
    new query[128];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", id);
    mysql_tquery(SQL, query, "OnBankAccountAdminEdit", "i", playerid);
    return 1;
}

CMD:areturnaccount(const playerid, params[])
{
    if(PlayerInfo[playerid][Staff] < 4) return SendClientMessage(playerid, 0xE74C3CFF, "Greska: {FFFFFF}Samo RCON staff moze koristiti ovu komandu.");
    new id;
    if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/areturnaccount [account id]");
    new query[128];
    mysql_format(SQL, query, sizeof(query), "UPDATE bank_accounts SET Disabled=0 WHERE ID=%d", id);
    mysql_tquery(SQL, query, "OnBankAccountAdminEdit", "i", playerid);
    return 1;
}


/*
      _____                 _         _                                 
     |_   _|   ___  __  __ | |_    __| |  _ __    __ _  __      __  ___ 
       | |    / _ \ \ \/ / | __|  / _` | | '__|  / _` | \ \ /\ / / / __|
       | |   |  __/  >  <  | |_  | (_| | | |    | (_| |  \ V  V /  \__ \
       |_|    \___| /_/\_\  \__|  \__,_| |_|     \__,_|   \_/\_/   |___/

*/

forward BuildBankAccountTDs(const playerid, bool: show);
public BuildBankAccountTDs(const playerid, bool: show)
{
    if(show == true)
    {
        for(new i = 0; i < 16; i++)
        {
            PlayerTextDrawHide( playerid, BankAccountPTD[ playerid ][ i ] );
            PlayerTextDrawDestroy( playerid, BankAccountPTD[ playerid ][ i ] );
            BankAccountPTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
        }
        for(new izz = 0; izz < 76; izz++)
        {
            TextDrawShowForPlayer(playerid, BankAccountTD[izz]);
        }
        BankAccountPTD[playerid][0] = CreatePlayerTextDraw(playerid, 469.999969, 110.614799, "");
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][0], 90.000000, 90.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][0], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][0], -1);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][0], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][0], -256);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][0], 5);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][0], 0);
        PlayerTextDrawSetPreviewModel(playerid, BankAccountPTD[playerid][0], 2);
        PlayerTextDrawSetPreviewRot(playerid, BankAccountPTD[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

        BankAccountPTD[playerid][1] = CreatePlayerTextDraw(playerid, 492.000091, 116.577888, "Vostic");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][1], 0.136665, 0.633481);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][1], 3);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][1], -1);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][1], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][1], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][1], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][1], 1);

        BankAccountPTD[playerid][2] = CreatePlayerTextDraw(playerid, 486.000122, 124.459365, "Nalog_ID:_(1)");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][2], 0.136665, 0.633481);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][2], 2);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][2], -1);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][2], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][2], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][2], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][2], 1);

        BankAccountPTD[playerid][3] = CreatePlayerTextDraw(playerid, 201.666641, 173.822250, "$_Vostic");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][3], 0.137333, 0.662518);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][3], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][3], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][3], -1);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][3], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][3], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][3], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][3], 1);

        BankAccountPTD[playerid][4] = CreatePlayerTextDraw(playerid, 201.666488, 180.874130, "06.06.2023___18:23");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][4], 0.077333, 0.587852);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][4], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][4], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][4], -1064116481);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][4], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][4], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][4], 2);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][4], 1);

        BankAccountPTD[playerid][5] = CreatePlayerTextDraw(playerid, 271.666564, 176.311172, "-20.000$");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][5], 0.137333, 0.662518);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][5], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][5], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][5], -1064116481);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][5], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][5], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][5], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][5], 1);

        BankAccountPTD[playerid][6] = CreatePlayerTextDraw(playerid, 201.666641, 206.277755, "$_Vostic");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][6], 0.137333, 0.662518);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][6], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][6], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][6], -1);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][6], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][6], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][6], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][6], 1);

        BankAccountPTD[playerid][7] = CreatePlayerTextDraw(playerid, 201.666488, 213.329635, "06.06.2023___18:23");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][7], 0.077333, 0.587852);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][7], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][7], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][7], -1064116481);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][7], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][7], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][7], 2);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][7], 1);

        BankAccountPTD[playerid][8] = CreatePlayerTextDraw(playerid, 271.666564, 208.766677, "-20.000$");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][8], 0.137333, 0.662518);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][8], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][8], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][8], -1064116481);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][8], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][8], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][8], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][8], 1);

        BankAccountPTD[playerid][9] = CreatePlayerTextDraw(playerid, 201.666641, 245.270385, "$_Vostic");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][9], 0.137333, 0.662518);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][9], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][9], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][9], -1);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][9], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][9], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][9], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][9], 1);

        BankAccountPTD[playerid][10] = CreatePlayerTextDraw(playerid, 201.666488, 252.322280, "06.06.2023___18:23");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][10], 0.077333, 0.587852);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][10], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][10], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][10], -1064116481);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][10], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][10], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][10], 2);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][10], 1);

        BankAccountPTD[playerid][11] = CreatePlayerTextDraw(playerid, 271.666564, 247.759307, "-20.000$");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][11], 0.137333, 0.662518);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][11], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][11], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][11], -1064116481);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][11], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][11], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][11], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][11], 1);

        BankAccountPTD[playerid][12] = CreatePlayerTextDraw(playerid, 201.666641, 286.337066, "$_Vostic");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][12], 0.137333, 0.662518);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][12], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][12], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][12], -1);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][12], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][12], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][12], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][12], 1);

        BankAccountPTD[playerid][13] = CreatePlayerTextDraw(playerid, 201.666488, 293.388977, "06.06.2023___18:23");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][13], 0.077333, 0.587852);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][13], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][13], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][13], -1064116481);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][13], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][13], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][13], 2);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][13], 1);

        BankAccountPTD[playerid][14] = CreatePlayerTextDraw(playerid, 271.666564, 288.825988, "-20.000$");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][14], 0.137333, 0.662518);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][14], -60.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][14], 1);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][14], -1064116481);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][14], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][14], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][14], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][14], 1);

        BankAccountPTD[playerid][15] = CreatePlayerTextDraw(playerid, 470.000000, 329.063293, "87487414_$");
        PlayerTextDrawLetterSize(playerid, BankAccountPTD[playerid][15], 0.123332, 0.633481);
        PlayerTextDrawTextSize(playerid, BankAccountPTD[playerid][15], 0.000000, -60.000000);
        PlayerTextDrawAlignment(playerid, BankAccountPTD[playerid][15], 2);
        PlayerTextDrawColor(playerid, BankAccountPTD[playerid][15], -1916144641);
        PlayerTextDrawSetShadow(playerid, BankAccountPTD[playerid][15], 0);
        PlayerTextDrawBackgroundColor(playerid, BankAccountPTD[playerid][15], 255);
        PlayerTextDrawFont(playerid, BankAccountPTD[playerid][15], 1);
        PlayerTextDrawSetProportional(playerid, BankAccountPTD[playerid][15], 1);
        for(new i = 0; i < 16; i++) { PlayerTextDrawShow(playerid, BankAccountPTD[playerid][i]); }
        GledaBankaAcc[playerid] = true;

        SelectTextDraw(playerid, x_ogycolor);

        StringBankTDs(playerid);
    }
    else
    {
        for(new i = 0; i < 16; i++)
        {
            PlayerTextDrawHide( playerid, BankAccountPTD[ playerid ][ i ] );
            PlayerTextDrawDestroy( playerid, BankAccountPTD[ playerid ][ i ] );
            BankAccountPTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
        }
        for(new izz = 0; izz < 76; izz++)
        {
            TextDrawHideForPlayer(playerid, BankAccountTD[izz]);
        }

        CancelSelectTextDraw(playerid);
        GledaBankaAcc[playerid] = false;
    }
    return (true);
}

CreateBankTDs()
{
    BankLoginTD[0] = TextDrawCreate(232.333358, 92.777755, "LD_SPAC:white");
    TextDrawTextSize(BankLoginTD[0], 171.000000, 261.000000);
    TextDrawAlignment(BankLoginTD[0], 1);
    TextDrawColor(BankLoginTD[0], 329471);
    TextDrawSetShadow(BankLoginTD[0], 0);
    TextDrawBackgroundColor(BankLoginTD[0], 255);
    TextDrawFont(BankLoginTD[0], 4);
    TextDrawSetProportional(BankLoginTD[0], 0);

    BankLoginTD[1] = TextDrawCreate(393.866638, 89.477851, "ld_beat:chit");
    TextDrawTextSize(BankLoginTD[1], 17.000000, 20.000000);
    TextDrawAlignment(BankLoginTD[1], 1);
    TextDrawColor(BankLoginTD[1], 329471);
    TextDrawSetShadow(BankLoginTD[1], 0);
    TextDrawBackgroundColor(BankLoginTD[1], 255);
    TextDrawFont(BankLoginTD[1], 4);
    TextDrawSetProportional(BankLoginTD[1], 0);

    BankLoginTD[2] = TextDrawCreate(393.866638, 337.122344, "ld_beat:chit");
    TextDrawTextSize(BankLoginTD[2], 17.000000, 20.000000);
    TextDrawAlignment(BankLoginTD[2], 1);
    TextDrawColor(BankLoginTD[2], 329471);
    TextDrawSetShadow(BankLoginTD[2], 0);
    TextDrawBackgroundColor(BankLoginTD[2], 255);
    TextDrawFont(BankLoginTD[2], 4);
    TextDrawSetProportional(BankLoginTD[2], 0);

    BankLoginTD[3] = TextDrawCreate(223.866485, 337.122344, "ld_beat:chit");
    TextDrawTextSize(BankLoginTD[3], 17.000000, 20.000000);
    TextDrawAlignment(BankLoginTD[3], 1);
    TextDrawColor(BankLoginTD[3], 329471);
    TextDrawSetShadow(BankLoginTD[3], 0);
    TextDrawBackgroundColor(BankLoginTD[3], 255);
    TextDrawFont(BankLoginTD[3], 4);
    TextDrawSetProportional(BankLoginTD[3], 0);

    BankLoginTD[4] = TextDrawCreate(223.866485, 89.477928, "ld_beat:chit");
    TextDrawTextSize(BankLoginTD[4], 17.000000, 20.000000);
    TextDrawAlignment(BankLoginTD[4], 1);
    TextDrawColor(BankLoginTD[4], 329471);
    TextDrawSetShadow(BankLoginTD[4], 0);
    TextDrawBackgroundColor(BankLoginTD[4], 255);
    TextDrawFont(BankLoginTD[4], 4);
    TextDrawSetProportional(BankLoginTD[4], 0);

    BankLoginTD[5] = TextDrawCreate(226.699935, 98.999977, "LD_SPAC:white");
    TextDrawTextSize(BankLoginTD[5], 21.000000, 249.000000);
    TextDrawAlignment(BankLoginTD[5], 1);
    TextDrawColor(BankLoginTD[5], 329471);
    TextDrawSetShadow(BankLoginTD[5], 0);
    TextDrawBackgroundColor(BankLoginTD[5], 255);
    TextDrawFont(BankLoginTD[5], 4);
    TextDrawSetProportional(BankLoginTD[5], 0);

    BankLoginTD[6] = TextDrawCreate(386.699951, 98.999977, "LD_SPAC:white");
    TextDrawTextSize(BankLoginTD[6], 21.000000, 249.000000);
    TextDrawAlignment(BankLoginTD[6], 1);
    TextDrawColor(BankLoginTD[6], 329471);
    TextDrawSetShadow(BankLoginTD[6], 0);
    TextDrawBackgroundColor(BankLoginTD[6], 255);
    TextDrawFont(BankLoginTD[6], 4);
    TextDrawSetProportional(BankLoginTD[6], 0);

    BankLoginTD[7] = TextDrawCreate(42.000026, 72.037048, "");
    TextDrawTextSize(BankLoginTD[7], 366.309326, 55.000000);
    TextDrawAlignment(BankLoginTD[7], 1);
    TextDrawColor(BankLoginTD[7], -1064116633);
    TextDrawSetShadow(BankLoginTD[7], 0);
    TextDrawBackgroundColor(BankLoginTD[7], -256);
    TextDrawFont(BankLoginTD[7], 5);
    TextDrawSetProportional(BankLoginTD[7], 0);
    TextDrawSetPreviewModel(BankLoginTD[7], 1317);
    TextDrawSetPreviewRot(BankLoginTD[7], 0.000000, -90.000000, 0.000000, 1.000000);

    BankLoginTD[8] = TextDrawCreate(367.399871, 341.181549, "");
    TextDrawTextSize(BankLoginTD[8], 19.000000, -24.000000);
    TextDrawAlignment(BankLoginTD[8], 1);
    TextDrawColor(BankLoginTD[8], -1);
    TextDrawSetShadow(BankLoginTD[8], 0);
    TextDrawBackgroundColor(BankLoginTD[8], -256);
    TextDrawFont(BankLoginTD[8], 5);
    TextDrawSetProportional(BankLoginTD[8], 0);
    TextDrawSetPreviewModel(BankLoginTD[8], 1318);
    TextDrawSetPreviewRot(BankLoginTD[8], 0.000000, 15.000000, -1.000000, 1.000000);

    BankLoginTD[9] = TextDrawCreate(369.400115, 296.466766, "");
    TextDrawTextSize(BankLoginTD[9], 18.000000, 49.000000);
    TextDrawAlignment(BankLoginTD[9], 1);
    TextDrawColor(BankLoginTD[9], -1);
    TextDrawSetShadow(BankLoginTD[9], 0);
    TextDrawBackgroundColor(BankLoginTD[9], -256);
    TextDrawFont(BankLoginTD[9], 5);
    TextDrawSetProportional(BankLoginTD[9], 0);
    TextDrawSetPreviewModel(BankLoginTD[9], 19177);
    TextDrawSetPreviewRot(BankLoginTD[9], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[10] = TextDrawCreate(369.200042, 339.181579, "");
    TextDrawTextSize(BankLoginTD[10], 17.000000, -20.000000);
    TextDrawAlignment(BankLoginTD[10], 1);
    TextDrawColor(BankLoginTD[10], -1);
    TextDrawSetShadow(BankLoginTD[10], 0);
    TextDrawBackgroundColor(BankLoginTD[10], -256);
    TextDrawFont(BankLoginTD[10], 5);
    TextDrawSetProportional(BankLoginTD[10], 0);
    TextDrawSetPreviewModel(BankLoginTD[10], 1318);
    TextDrawSetPreviewRot(BankLoginTD[10], 0.000000, 15.000000, -1.000000, 1.000000);

    BankLoginTD[11] = TextDrawCreate(370.366424, 333.822204, "");
    TextDrawTextSize(BankLoginTD[11], 20.000000, -14.000000);
    TextDrawAlignment(BankLoginTD[11], 1);
    TextDrawColor(BankLoginTD[11], -1);
    TextDrawSetShadow(BankLoginTD[11], 0);
    TextDrawBackgroundColor(BankLoginTD[11], -256);
    TextDrawFont(BankLoginTD[11], 5);
    TextDrawSetProportional(BankLoginTD[11], 0);
    TextDrawSetPreviewModel(BankLoginTD[11], 1318);
    TextDrawSetPreviewRot(BankLoginTD[11], 0.000000, -15.000000, -1.000000, 1.000000);

    BankLoginTD[12] = TextDrawCreate(369.566497, 338.755523, "");
    TextDrawTextSize(BankLoginTD[12], 20.000000, -14.000000);
    TextDrawAlignment(BankLoginTD[12], 1);
    TextDrawColor(BankLoginTD[12], -1);
    TextDrawSetShadow(BankLoginTD[12], 0);
    TextDrawBackgroundColor(BankLoginTD[12], -256);
    TextDrawFont(BankLoginTD[12], 5);
    TextDrawSetProportional(BankLoginTD[12], 0);
    TextDrawSetPreviewModel(BankLoginTD[12], 1318);
    TextDrawSetPreviewRot(BankLoginTD[12], 0.000000, -15.000000, -1.000000, 1.000000);

    BankLoginTD[13] = TextDrawCreate(369.999786, 336.881439, "");
    TextDrawTextSize(BankLoginTD[13], 20.000000, -14.000000);
    TextDrawAlignment(BankLoginTD[13], 1);
    TextDrawColor(BankLoginTD[13], -1);
    TextDrawSetShadow(BankLoginTD[13], 0);
    TextDrawBackgroundColor(BankLoginTD[13], -256);
    TextDrawFont(BankLoginTD[13], 5);
    TextDrawSetProportional(BankLoginTD[13], 0);
    TextDrawSetPreviewModel(BankLoginTD[13], 1318);
    TextDrawSetPreviewRot(BankLoginTD[13], 0.000000, -15.000000, -1.000000, 1.000000);

    BankLoginTD[14] = TextDrawCreate(371.833221, 338.922302, "");
    TextDrawTextSize(BankLoginTD[14], 12.000000, -14.000000);
    TextDrawAlignment(BankLoginTD[14], 1);
    TextDrawColor(BankLoginTD[14], -1);
    TextDrawSetShadow(BankLoginTD[14], 0);
    TextDrawBackgroundColor(BankLoginTD[14], -256);
    TextDrawFont(BankLoginTD[14], 5);
    TextDrawSetProportional(BankLoginTD[14], 0);
    TextDrawSetPreviewModel(BankLoginTD[14], 1318);
    TextDrawSetPreviewRot(BankLoginTD[14], 0.000000, 15.000000, -1.000000, 1.000000);

    BankLoginTD[15] = TextDrawCreate(371.633392, 309.900115, "");
    TextDrawTextSize(BankLoginTD[15], 25.000000, 44.000000);
    TextDrawAlignment(BankLoginTD[15], 1);
    TextDrawColor(BankLoginTD[15], -1);
    TextDrawSetShadow(BankLoginTD[15], 0);
    TextDrawBackgroundColor(BankLoginTD[15], -256);
    TextDrawFont(BankLoginTD[15], 5);
    TextDrawSetProportional(BankLoginTD[15], 0);
    TextDrawSetPreviewModel(BankLoginTD[15], 19177);
    TextDrawSetPreviewRot(BankLoginTD[15], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[16] = TextDrawCreate(382.099884, 341.396392, "");
    TextDrawTextSize(BankLoginTD[16], 19.000000, -24.000000);
    TextDrawAlignment(BankLoginTD[16], 1);
    TextDrawColor(BankLoginTD[16], -1);
    TextDrawSetShadow(BankLoginTD[16], 0);
    TextDrawBackgroundColor(BankLoginTD[16], -256);
    TextDrawFont(BankLoginTD[16], 5);
    TextDrawSetProportional(BankLoginTD[16], 0);
    TextDrawSetPreviewModel(BankLoginTD[16], 1318);
    TextDrawSetPreviewRot(BankLoginTD[16], 0.000000, -15.000000, -1.000000, 1.000000);

    BankLoginTD[17] = TextDrawCreate(381.000091, 296.466766, "");
    TextDrawTextSize(BankLoginTD[17], 18.000000, 49.000000);
    TextDrawAlignment(BankLoginTD[17], 1);
    TextDrawColor(BankLoginTD[17], -1);
    TextDrawSetShadow(BankLoginTD[17], 0);
    TextDrawBackgroundColor(BankLoginTD[17], -256);
    TextDrawFont(BankLoginTD[17], 5);
    TextDrawSetProportional(BankLoginTD[17], 0);
    TextDrawSetPreviewModel(BankLoginTD[17], 19177);
    TextDrawSetPreviewRot(BankLoginTD[17], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[18] = TextDrawCreate(381.966644, 340.155731, "");
    TextDrawTextSize(BankLoginTD[18], 17.000000, -20.000000);
    TextDrawAlignment(BankLoginTD[18], 1);
    TextDrawColor(BankLoginTD[18], -1);
    TextDrawSetShadow(BankLoginTD[18], 0);
    TextDrawBackgroundColor(BankLoginTD[18], -256);
    TextDrawFont(BankLoginTD[18], 5);
    TextDrawSetProportional(BankLoginTD[18], 0);
    TextDrawSetPreviewModel(BankLoginTD[18], 1318);
    TextDrawSetPreviewRot(BankLoginTD[18], 0.000000, -15.000000, -1.000000, 1.000000);

    BankLoginTD[19] = TextDrawCreate(377.366302, 333.692565, "");
    TextDrawTextSize(BankLoginTD[19], 21.000000, -13.060001);
    TextDrawAlignment(BankLoginTD[19], 1);
    TextDrawColor(BankLoginTD[19], -1);
    TextDrawSetShadow(BankLoginTD[19], 0);
    TextDrawBackgroundColor(BankLoginTD[19], -256);
    TextDrawFont(BankLoginTD[19], 5);
    TextDrawSetProportional(BankLoginTD[19], 0);
    TextDrawSetPreviewModel(BankLoginTD[19], 1318);
    TextDrawSetPreviewRot(BankLoginTD[19], 0.000000, 15.000000, 180.000000, 1.000000);

    BankLoginTD[20] = TextDrawCreate(378.466278, 337.833221, "");
    TextDrawTextSize(BankLoginTD[20], 21.000000, -13.060001);
    TextDrawAlignment(BankLoginTD[20], 1);
    TextDrawColor(BankLoginTD[20], -1);
    TextDrawSetShadow(BankLoginTD[20], 0);
    TextDrawBackgroundColor(BankLoginTD[20], -256);
    TextDrawFont(BankLoginTD[20], 5);
    TextDrawSetProportional(BankLoginTD[20], 0);
    TextDrawSetPreviewModel(BankLoginTD[20], 1318);
    TextDrawSetPreviewRot(BankLoginTD[20], 0.000000, 15.000000, 180.000000, 1.000000);

    BankLoginTD[21] = TextDrawCreate(377.066375, 337.203582, "");
    TextDrawTextSize(BankLoginTD[21], 21.000000, -13.060001);
    TextDrawAlignment(BankLoginTD[21], 1);
    TextDrawColor(BankLoginTD[21], -1);
    TextDrawSetShadow(BankLoginTD[21], 0);
    TextDrawBackgroundColor(BankLoginTD[21], -256);
    TextDrawFont(BankLoginTD[21], 5);
    TextDrawSetProportional(BankLoginTD[21], 0);
    TextDrawSetPreviewModel(BankLoginTD[21], 1318);
    TextDrawSetPreviewRot(BankLoginTD[21], 0.000000, 15.000000, 180.000000, 1.000000);

    BankLoginTD[22] = TextDrawCreate(360.799926, 345.355682, "");
    TextDrawTextSize(BankLoginTD[22], 45.000000, -18.000000);
    TextDrawAlignment(BankLoginTD[22], 1);
    TextDrawColor(BankLoginTD[22], -1064116481);
    TextDrawSetShadow(BankLoginTD[22], 0);
    TextDrawBackgroundColor(BankLoginTD[22], -256);
    TextDrawFont(BankLoginTD[22], 5);
    TextDrawSetProportional(BankLoginTD[22], 0);
    TextDrawSetPreviewModel(BankLoginTD[22], 2965);
    TextDrawSetPreviewRot(BankLoginTD[22], 90.000000, 0.000000, 90.000000, 1.000000);

    BankLoginTD[23] = TextDrawCreate(352.166687, 323.200103, "");
    TextDrawTextSize(BankLoginTD[23], 46.000000, 32.000000);
    TextDrawAlignment(BankLoginTD[23], 1);
    TextDrawColor(BankLoginTD[23], -1064116481);
    TextDrawSetShadow(BankLoginTD[23], 0);
    TextDrawBackgroundColor(BankLoginTD[23], -256);
    TextDrawFont(BankLoginTD[23], 5);
    TextDrawSetProportional(BankLoginTD[23], 0);
    TextDrawSetPreviewModel(BankLoginTD[23], 19177);
    TextDrawSetPreviewRot(BankLoginTD[23], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[24] = TextDrawCreate(369.966766, 323.070495, "");
    TextDrawTextSize(BankLoginTD[24], 46.000000, 32.000000);
    TextDrawAlignment(BankLoginTD[24], 1);
    TextDrawColor(BankLoginTD[24], -1064116481);
    TextDrawSetShadow(BankLoginTD[24], 0);
    TextDrawBackgroundColor(BankLoginTD[24], -256);
    TextDrawFont(BankLoginTD[24], 5);
    TextDrawSetProportional(BankLoginTD[24], 0);
    TextDrawSetPreviewModel(BankLoginTD[24], 19177);
    TextDrawSetPreviewRot(BankLoginTD[24], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[25] = TextDrawCreate(336.733276, 307.522338, "");
    TextDrawTextSize(BankLoginTD[25], 88.000000, 58.000000);
    TextDrawAlignment(BankLoginTD[25], 1);
    TextDrawColor(BankLoginTD[25], -1064116481);
    TextDrawSetShadow(BankLoginTD[25], 0);
    TextDrawBackgroundColor(BankLoginTD[25], -256);
    TextDrawFont(BankLoginTD[25], 5);
    TextDrawSetProportional(BankLoginTD[25], 0);
    TextDrawSetPreviewModel(BankLoginTD[25], 19177);
    TextDrawSetPreviewRot(BankLoginTD[25], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[26] = TextDrawCreate(343.133666, 307.522338, "");
    TextDrawTextSize(BankLoginTD[26], 88.000000, 58.000000);
    TextDrawAlignment(BankLoginTD[26], 1);
    TextDrawColor(BankLoginTD[26], -1064116481);
    TextDrawSetShadow(BankLoginTD[26], 0);
    TextDrawBackgroundColor(BankLoginTD[26], -256);
    TextDrawFont(BankLoginTD[26], 5);
    TextDrawSetProportional(BankLoginTD[26], 0);
    TextDrawSetPreviewModel(BankLoginTD[26], 19177);
    TextDrawSetPreviewRot(BankLoginTD[26], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[27] = TextDrawCreate(339.933776, 305.577850, "");
    TextDrawTextSize(BankLoginTD[27], 88.000000, 58.000000);
    TextDrawAlignment(BankLoginTD[27], 1);
    TextDrawColor(BankLoginTD[27], -1064116481);
    TextDrawSetShadow(BankLoginTD[27], 0);
    TextDrawBackgroundColor(BankLoginTD[27], -256);
    TextDrawFont(BankLoginTD[27], 5);
    TextDrawSetProportional(BankLoginTD[27], 0);
    TextDrawSetPreviewModel(BankLoginTD[27], 19177);
    TextDrawSetPreviewRot(BankLoginTD[27], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[28] = TextDrawCreate(377.400054, 339.074096, "LD_SPAC:white");
    TextDrawTextSize(BankLoginTD[28], 14.000000, 2.000000);
    TextDrawAlignment(BankLoginTD[28], 1);
    TextDrawColor(BankLoginTD[28], -1064116481);
    TextDrawSetShadow(BankLoginTD[28], 0);
    TextDrawBackgroundColor(BankLoginTD[28], 255);
    TextDrawFont(BankLoginTD[28], 4);
    TextDrawSetProportional(BankLoginTD[28], 0);

    BankLoginTD[29] = TextDrawCreate(367.900115, 330.666839, "");
    TextDrawTextSize(BankLoginTD[29], 28.000000, 19.160003);
    TextDrawAlignment(BankLoginTD[29], 1);
    TextDrawColor(BankLoginTD[29], -1);
    TextDrawSetShadow(BankLoginTD[29], 0);
    TextDrawBackgroundColor(BankLoginTD[29], -256);
    TextDrawFont(BankLoginTD[29], 5);
    TextDrawSetProportional(BankLoginTD[29], 0);
    TextDrawSetPreviewModel(BankLoginTD[29], 19177);
    TextDrawSetPreviewRot(BankLoginTD[29], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[30] = TextDrawCreate(372.700408, 330.666839, "");
    TextDrawTextSize(BankLoginTD[30], 28.000000, 19.160003);
    TextDrawAlignment(BankLoginTD[30], 1);
    TextDrawColor(BankLoginTD[30], -1);
    TextDrawSetShadow(BankLoginTD[30], 0);
    TextDrawBackgroundColor(BankLoginTD[30], -256);
    TextDrawFont(BankLoginTD[30], 5);
    TextDrawSetProportional(BankLoginTD[30], 0);
    TextDrawSetPreviewModel(BankLoginTD[30], 19177);
    TextDrawSetPreviewRot(BankLoginTD[30], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[31] = TextDrawCreate(360.799926, 345.355682, "");
    TextDrawTextSize(BankLoginTD[31], 45.000000, -18.000000);
    TextDrawAlignment(BankLoginTD[31], 1);
    TextDrawColor(BankLoginTD[31], -120);
    TextDrawSetShadow(BankLoginTD[31], 0);
    TextDrawBackgroundColor(BankLoginTD[31], -256);
    TextDrawFont(BankLoginTD[31], 5);
    TextDrawSetProportional(BankLoginTD[31], 0);
    TextDrawSetPreviewModel(BankLoginTD[31], 2965);
    TextDrawSetPreviewRot(BankLoginTD[31], 90.000000, 0.000000, 90.000000, 1.000000);

    BankLoginTD[32] = TextDrawCreate(363.200225, 390.211212, "");
    TextDrawTextSize(BankLoginTD[32], 42.000000, -93.000000);
    TextDrawAlignment(BankLoginTD[32], 1);
    TextDrawColor(BankLoginTD[32], -1064116481);
    TextDrawSetShadow(BankLoginTD[32], 0);
    TextDrawBackgroundColor(BankLoginTD[32], -256);
    TextDrawFont(BankLoginTD[32], 5);
    TextDrawSetProportional(BankLoginTD[32], 0);
    TextDrawSetPreviewModel(BankLoginTD[32], 19177);
    TextDrawSetPreviewRot(BankLoginTD[32], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[33] = TextDrawCreate(363.166900, 294.622314, "");
    TextDrawTextSize(BankLoginTD[33], 42.000000, 83.000000);
    TextDrawAlignment(BankLoginTD[33], 1);
    TextDrawColor(BankLoginTD[33], -1064116481);
    TextDrawSetShadow(BankLoginTD[33], 0);
    TextDrawBackgroundColor(BankLoginTD[33], -256);
    TextDrawFont(BankLoginTD[33], 5);
    TextDrawSetProportional(BankLoginTD[33], 0);
    TextDrawSetPreviewModel(BankLoginTD[33], 19177);
    TextDrawSetPreviewRot(BankLoginTD[33], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[34] = TextDrawCreate(379.333221, 327.181610, "V");
    TextDrawLetterSize(BankLoginTD[34], 0.352665, 1.890370);
    TextDrawAlignment(BankLoginTD[34], 1);
    TextDrawColor(BankLoginTD[34], -188);
    TextDrawSetShadow(BankLoginTD[34], 0);
    TextDrawBackgroundColor(BankLoginTD[34], 255);
    TextDrawFont(BankLoginTD[34], 2);
    TextDrawSetProportional(BankLoginTD[34], 1);

    BankLoginTD[35] = TextDrawCreate(379.733551, 353.066741, "");
    TextDrawTextSize(BankLoginTD[35], 9.000000, -21.000000);
    TextDrawAlignment(BankLoginTD[35], 1);
    TextDrawColor(BankLoginTD[35], -188);
    TextDrawSetShadow(BankLoginTD[35], 0);
    TextDrawBackgroundColor(BankLoginTD[35], -256);
    TextDrawFont(BankLoginTD[35], 5);
    TextDrawSetProportional(BankLoginTD[35], 0);
    TextDrawSetPreviewModel(BankLoginTD[35], 19177);
    TextDrawSetPreviewRot(BankLoginTD[35], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[36] = TextDrawCreate(379.900299, 317.618591, "");
    TextDrawTextSize(BankLoginTD[36], 8.709993, 33.400100);
    TextDrawAlignment(BankLoginTD[36], 1);
    TextDrawColor(BankLoginTD[36], -1);
    TextDrawSetShadow(BankLoginTD[36], 0);
    TextDrawBackgroundColor(BankLoginTD[36], -256);
    TextDrawFont(BankLoginTD[36], 5);
    TextDrawSetProportional(BankLoginTD[36], 0);
    TextDrawSetPreviewModel(BankLoginTD[36], 19177);
    TextDrawSetPreviewRot(BankLoginTD[36], 0.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[37] = TextDrawCreate(380.200286, 327.118469, "");
    TextDrawTextSize(BankLoginTD[37], 8.000000, 18.000000);
    TextDrawAlignment(BankLoginTD[37], 1);
    TextDrawColor(BankLoginTD[37], -1);
    TextDrawSetShadow(BankLoginTD[37], 0);
    TextDrawBackgroundColor(BankLoginTD[37], -256);
    TextDrawFont(BankLoginTD[37], 5);
    TextDrawSetProportional(BankLoginTD[37], 0);
    TextDrawSetPreviewModel(BankLoginTD[37], 19177);
    TextDrawSetPreviewRot(BankLoginTD[37], 180.000000, 0.000000, 0.000000, 1.000000);

    BankLoginTD[38] = TextDrawCreate(314.333557, 104.962966, "Dobrodosli_u_maryland_banking_system");
    TextDrawLetterSize(BankLoginTD[38], 0.096331, 0.579554);
    TextDrawAlignment(BankLoginTD[38], 2);
    TextDrawColor(BankLoginTD[38], -1);
    TextDrawSetShadow(BankLoginTD[38], 0);
    TextDrawBackgroundColor(BankLoginTD[38], 255);
    TextDrawFont(BankLoginTD[38], 2);
    TextDrawSetProportional(BankLoginTD[38], 1);

    BankLoginTD[39] = TextDrawCreate(314.333557, 113.674079, "prislonite_otisak_za_nastavak");
    TextDrawLetterSize(BankLoginTD[39], 0.096331, 0.579554);
    TextDrawAlignment(BankLoginTD[39], 2);
    TextDrawColor(BankLoginTD[39], -175);
    TextDrawSetShadow(BankLoginTD[39], 0);
    TextDrawBackgroundColor(BankLoginTD[39], 255);
    TextDrawFont(BankLoginTD[39], 2);
    TextDrawSetProportional(BankLoginTD[39], 1);

    BankLoginTD[40] = TextDrawCreate(317.000213, 154.325912, "$");
    TextDrawLetterSize(BankLoginTD[40], 3.427999, 15.699558);
    TextDrawAlignment(BankLoginTD[40], 2);
    TextDrawColor(BankLoginTD[40], -251);
    TextDrawSetShadow(BankLoginTD[40], 0);
    TextDrawBackgroundColor(BankLoginTD[40], 255);
    TextDrawFont(BankLoginTD[40], 3);
    TextDrawSetProportional(BankLoginTD[40], 1);

    BankLoginTD[41] = TextDrawCreate(296.333343, 210.585189, "");
    TextDrawTextSize(BankLoginTD[41], 37.000000, 42.000000);
    TextDrawAlignment(BankLoginTD[41], 1);
    TextDrawColor(BankLoginTD[41], -205);
    TextDrawSetShadow(BankLoginTD[41], 0);
    TextDrawBackgroundColor(BankLoginTD[41], -256);
    TextDrawFont(BankLoginTD[41], 5);
    TextDrawSetProportional(BankLoginTD[41], 0);
    TextDrawSetPreviewModel(BankLoginTD[41], 1316);
    TextDrawSetPreviewRot(BankLoginTD[41], 270.000000, 180.000000, 90.000000, 1.000000);

    BankLoginTD[42] = TextDrawCreate(307.666687, 223.859329, "particle:bloodpool_64");
    TextDrawTextSize(BankLoginTD[42], 15.000000, 18.000000);
    TextDrawAlignment(BankLoginTD[42], 1);
    TextDrawColor(BankLoginTD[42], 16777215);
    TextDrawSetShadow(BankLoginTD[42], 0);
    TextDrawBackgroundColor(BankLoginTD[42], 255);
    TextDrawFont(BankLoginTD[42], 4);
    TextDrawSetProportional(BankLoginTD[42], 0);
    TextDrawSetSelectable(BankLoginTD[42], true);

    BankLoginTD[43] = TextDrawCreate(308.899963, 123.474029, "");
    TextDrawTextSize(BankLoginTD[43], 12.000000, 13.000000);
    TextDrawAlignment(BankLoginTD[43], 1);
    TextDrawColor(BankLoginTD[43], -1);
    TextDrawSetShadow(BankLoginTD[43], 0);
    TextDrawBackgroundColor(BankLoginTD[43], -256);
    TextDrawFont(BankLoginTD[43], 5);
    TextDrawSetProportional(BankLoginTD[43], 0);
    TextDrawSetPreviewModel(BankLoginTD[43], 1316);
    TextDrawSetPreviewRot(BankLoginTD[43], 270.000000, 180.000000, 90.000000, 1.000000);

    BankLoginTD[44] = TextDrawCreate(295.333221, 110.614784, "");
    TextDrawTextSize(BankLoginTD[44], 39.000000, 40.000000);
    TextDrawAlignment(BankLoginTD[44], 1);
    TextDrawColor(BankLoginTD[44], -1);
    TextDrawSetShadow(BankLoginTD[44], 0);
    TextDrawBackgroundColor(BankLoginTD[44], -256);
    TextDrawFont(BankLoginTD[44], 5);
    TextDrawSetProportional(BankLoginTD[44], 0);
    TextDrawSetPreviewModel(BankLoginTD[44], 19177);
    TextDrawSetPreviewRot(BankLoginTD[44], 0.000000, 180.000000, 90.000000, 1.000000);

    BankLoginTD[45] = TextDrawCreate(314.333251, 267.985168, "NEMAS_NALOG?~n~KREIRAJ");
    TextDrawLetterSize(BankLoginTD[45], 0.124664, 0.600296);
    TextDrawAlignment(BankLoginTD[45], 2);
    TextDrawColor(BankLoginTD[45], -149);
    TextDrawSetShadow(BankLoginTD[45], 0);
    TextDrawBackgroundColor(BankLoginTD[45], 255);
    TextDrawFont(BankLoginTD[45], 2);
    TextDrawSetProportional(BankLoginTD[45], 1);
    TextDrawSetSelectable(BankLoginTD[45], true);
    //
    BankAccountTD[0] = TextDrawCreate(125.333374, 109.370292, "LD_SPAC:white");
    TextDrawTextSize(BankAccountTD[0], 401.000000, 233.000000);
    TextDrawAlignment(BankAccountTD[0], 1);
    TextDrawColor(BankAccountTD[0], 329471);
    TextDrawSetShadow(BankAccountTD[0], 0);
    TextDrawBackgroundColor(BankAccountTD[0], 255);
    TextDrawFont(BankAccountTD[0], 4);
    TextDrawSetProportional(BankAccountTD[0], 0);

    BankAccountTD[1] = TextDrawCreate(516.833312, 105.736961, "ld_beat:chit");
    TextDrawTextSize(BankAccountTD[1], 19.000000, 22.000000);
    TextDrawAlignment(BankAccountTD[1], 1);
    TextDrawColor(BankAccountTD[1], 329471);
    TextDrawSetShadow(BankAccountTD[1], 0);
    TextDrawBackgroundColor(BankAccountTD[1], 255);
    TextDrawFont(BankAccountTD[1], 4);
    TextDrawSetProportional(BankAccountTD[1], 0);

    BankAccountTD[2] = TextDrawCreate(516.833251, 324.144409, "ld_beat:chit");
    TextDrawTextSize(BankAccountTD[2], 19.000000, 22.000000);
    TextDrawAlignment(BankAccountTD[2], 1);
    TextDrawColor(BankAccountTD[2], 329471);
    TextDrawSetShadow(BankAccountTD[2], 0);
    TextDrawBackgroundColor(BankAccountTD[2], 255);
    TextDrawFont(BankAccountTD[2], 4);
    TextDrawSetProportional(BankAccountTD[2], 0);

    BankAccountTD[3] = TextDrawCreate(116.166618, 324.144409, "ld_beat:chit");
    TextDrawTextSize(BankAccountTD[3], 19.000000, 22.000000);
    TextDrawAlignment(BankAccountTD[3], 1);
    TextDrawColor(BankAccountTD[3], 329471);
    TextDrawSetShadow(BankAccountTD[3], 0);
    TextDrawBackgroundColor(BankAccountTD[3], 255);
    TextDrawFont(BankAccountTD[3], 4);
    TextDrawSetProportional(BankAccountTD[3], 0);

    BankAccountTD[4] = TextDrawCreate(116.166625, 105.651824, "ld_beat:chit");
    TextDrawTextSize(BankAccountTD[4], 19.000000, 22.000000);
    TextDrawAlignment(BankAccountTD[4], 1);
    TextDrawColor(BankAccountTD[4], 329471);
    TextDrawSetShadow(BankAccountTD[4], 0);
    TextDrawBackgroundColor(BankAccountTD[4], 255);
    TextDrawFont(BankAccountTD[4], 4);
    TextDrawSetProportional(BankAccountTD[4], 0);

    BankAccountTD[5] = TextDrawCreate(119.366722, 117.622123, "LD_SPAC:white");
    TextDrawTextSize(BankAccountTD[5], 413.250244, 217.000000);
    TextDrawAlignment(BankAccountTD[5], 1);
    TextDrawColor(BankAccountTD[5], 329471);
    TextDrawSetShadow(BankAccountTD[5], 0);
    TextDrawBackgroundColor(BankAccountTD[5], 255);
    TextDrawFont(BankAccountTD[5], 4);
    TextDrawSetProportional(BankAccountTD[5], 0);

    BankAccountTD[6] = TextDrawCreate(193.366699, 109.325813, "LD_SPAC:white");
    TextDrawTextSize(BankAccountTD[6], 1.000000, 232.949478);
    TextDrawAlignment(BankAccountTD[6], 1);
    TextDrawColor(BankAccountTD[6], -232);
    TextDrawSetShadow(BankAccountTD[6], 0);
    TextDrawBackgroundColor(BankAccountTD[6], 255);
    TextDrawFont(BankAccountTD[6], 4);
    TextDrawSetProportional(BankAccountTD[6], 0);

    BankAccountTD[7] = TextDrawCreate(198.700042, 136.703598, "LD_SPAC:white");
    TextDrawTextSize(BankAccountTD[7], 26.000000, 1.000000);
    TextDrawAlignment(BankAccountTD[7], 1);
    TextDrawColor(BankAccountTD[7], -1064116481);
    TextDrawSetShadow(BankAccountTD[7], 0);
    TextDrawBackgroundColor(BankAccountTD[7], 255);
    TextDrawFont(BankAccountTD[7], 4);
    TextDrawSetProportional(BankAccountTD[7], 0);

    BankAccountTD[8] = TextDrawCreate(140.399871, 137.507431, "");
    TextDrawTextSize(BankAccountTD[8], 19.000000, -24.000000);
    TextDrawAlignment(BankAccountTD[8], 1);
    TextDrawColor(BankAccountTD[8], -1);
    TextDrawSetShadow(BankAccountTD[8], 0);
    TextDrawBackgroundColor(BankAccountTD[8], -256);
    TextDrawFont(BankAccountTD[8], 5);
    TextDrawSetProportional(BankAccountTD[8], 0);
    TextDrawSetPreviewModel(BankAccountTD[8], 1318);
    TextDrawSetPreviewRot(BankAccountTD[8], 0.000000, 15.000000, -1.000000, 1.000000);

    BankAccountTD[9] = TextDrawCreate(142.400100, 92.792671, "");
    TextDrawTextSize(BankAccountTD[9], 18.000000, 49.000000);
    TextDrawAlignment(BankAccountTD[9], 1);
    TextDrawColor(BankAccountTD[9], -1);
    TextDrawSetShadow(BankAccountTD[9], 0);
    TextDrawBackgroundColor(BankAccountTD[9], -256);
    TextDrawFont(BankAccountTD[9], 5);
    TextDrawSetProportional(BankAccountTD[9], 0);
    TextDrawSetPreviewModel(BankAccountTD[9], 19177);
    TextDrawSetPreviewRot(BankAccountTD[9], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[10] = TextDrawCreate(142.200027, 135.507461, "");
    TextDrawTextSize(BankAccountTD[10], 17.000000, -20.000000);
    TextDrawAlignment(BankAccountTD[10], 1);
    TextDrawColor(BankAccountTD[10], -1);
    TextDrawSetShadow(BankAccountTD[10], 0);
    TextDrawBackgroundColor(BankAccountTD[10], -256);
    TextDrawFont(BankAccountTD[10], 5);
    TextDrawSetProportional(BankAccountTD[10], 0);
    TextDrawSetPreviewModel(BankAccountTD[10], 1318);
    TextDrawSetPreviewRot(BankAccountTD[10], 0.000000, 15.000000, -1.000000, 1.000000);

    BankAccountTD[11] = TextDrawCreate(143.366409, 130.148132, "");
    TextDrawTextSize(BankAccountTD[11], 20.000000, -14.000000);
    TextDrawAlignment(BankAccountTD[11], 1);
    TextDrawColor(BankAccountTD[11], -1);
    TextDrawSetShadow(BankAccountTD[11], 0);
    TextDrawBackgroundColor(BankAccountTD[11], -256);
    TextDrawFont(BankAccountTD[11], 5);
    TextDrawSetProportional(BankAccountTD[11], 0);
    TextDrawSetPreviewModel(BankAccountTD[11], 1318);
    TextDrawSetPreviewRot(BankAccountTD[11], 0.000000, -15.000000, -1.000000, 1.000000);

    BankAccountTD[12] = TextDrawCreate(142.566482, 135.081405, "");
    TextDrawTextSize(BankAccountTD[12], 20.000000, -14.000000);
    TextDrawAlignment(BankAccountTD[12], 1);
    TextDrawColor(BankAccountTD[12], -1);
    TextDrawSetShadow(BankAccountTD[12], 0);
    TextDrawBackgroundColor(BankAccountTD[12], -256);
    TextDrawFont(BankAccountTD[12], 5);
    TextDrawSetProportional(BankAccountTD[12], 0);
    TextDrawSetPreviewModel(BankAccountTD[12], 1318);
    TextDrawSetPreviewRot(BankAccountTD[12], 0.000000, -15.000000, -1.000000, 1.000000);

    BankAccountTD[13] = TextDrawCreate(142.999771, 133.207366, "");
    TextDrawTextSize(BankAccountTD[13], 20.000000, -14.000000);
    TextDrawAlignment(BankAccountTD[13], 1);
    TextDrawColor(BankAccountTD[13], -1);
    TextDrawSetShadow(BankAccountTD[13], 0);
    TextDrawBackgroundColor(BankAccountTD[13], -256);
    TextDrawFont(BankAccountTD[13], 5);
    TextDrawSetProportional(BankAccountTD[13], 0);
    TextDrawSetPreviewModel(BankAccountTD[13], 1318);
    TextDrawSetPreviewRot(BankAccountTD[13], 0.000000, -15.000000, -1.000000, 1.000000);

    BankAccountTD[14] = TextDrawCreate(144.833236, 135.248184, "");
    TextDrawTextSize(BankAccountTD[14], 12.000000, -14.000000);
    TextDrawAlignment(BankAccountTD[14], 1);
    TextDrawColor(BankAccountTD[14], -1);
    TextDrawSetShadow(BankAccountTD[14], 0);
    TextDrawBackgroundColor(BankAccountTD[14], -256);
    TextDrawFont(BankAccountTD[14], 5);
    TextDrawSetProportional(BankAccountTD[14], 0);
    TextDrawSetPreviewModel(BankAccountTD[14], 1318);
    TextDrawSetPreviewRot(BankAccountTD[14], 0.000000, 15.000000, -1.000000, 1.000000);

    BankAccountTD[15] = TextDrawCreate(144.633392, 106.226036, "");
    TextDrawTextSize(BankAccountTD[15], 25.000000, 44.000000);
    TextDrawAlignment(BankAccountTD[15], 1);
    TextDrawColor(BankAccountTD[15], -1);
    TextDrawSetShadow(BankAccountTD[15], 0);
    TextDrawBackgroundColor(BankAccountTD[15], -256);
    TextDrawFont(BankAccountTD[15], 5);
    TextDrawSetProportional(BankAccountTD[15], 0);
    TextDrawSetPreviewModel(BankAccountTD[15], 19177);
    TextDrawSetPreviewRot(BankAccountTD[15], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[16] = TextDrawCreate(155.099884, 137.722274, "");
    TextDrawTextSize(BankAccountTD[16], 19.000000, -24.000000);
    TextDrawAlignment(BankAccountTD[16], 1);
    TextDrawColor(BankAccountTD[16], -1);
    TextDrawSetShadow(BankAccountTD[16], 0);
    TextDrawBackgroundColor(BankAccountTD[16], -256);
    TextDrawFont(BankAccountTD[16], 5);
    TextDrawSetProportional(BankAccountTD[16], 0);
    TextDrawSetPreviewModel(BankAccountTD[16], 1318);
    TextDrawSetPreviewRot(BankAccountTD[16], 0.000000, -15.000000, -1.000000, 1.000000);

    BankAccountTD[17] = TextDrawCreate(154.000091, 92.792655, "");
    TextDrawTextSize(BankAccountTD[17], 18.000000, 49.000000);
    TextDrawAlignment(BankAccountTD[17], 1);
    TextDrawColor(BankAccountTD[17], -1);
    TextDrawSetShadow(BankAccountTD[17], 0);
    TextDrawBackgroundColor(BankAccountTD[17], -256);
    TextDrawFont(BankAccountTD[17], 5);
    TextDrawSetProportional(BankAccountTD[17], 0);
    TextDrawSetPreviewModel(BankAccountTD[17], 19177);
    TextDrawSetPreviewRot(BankAccountTD[17], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[18] = TextDrawCreate(154.966644, 136.481613, "");
    TextDrawTextSize(BankAccountTD[18], 17.000000, -20.000000);
    TextDrawAlignment(BankAccountTD[18], 1);
    TextDrawColor(BankAccountTD[18], -1);
    TextDrawSetShadow(BankAccountTD[18], 0);
    TextDrawBackgroundColor(BankAccountTD[18], -256);
    TextDrawFont(BankAccountTD[18], 5);
    TextDrawSetProportional(BankAccountTD[18], 0);
    TextDrawSetPreviewModel(BankAccountTD[18], 1318);
    TextDrawSetPreviewRot(BankAccountTD[18], 0.000000, -15.000000, -1.000000, 1.000000);

    BankAccountTD[19] = TextDrawCreate(150.366302, 130.018493, "");
    TextDrawTextSize(BankAccountTD[19], 21.000000, -13.060001);
    TextDrawAlignment(BankAccountTD[19], 1);
    TextDrawColor(BankAccountTD[19], -1);
    TextDrawSetShadow(BankAccountTD[19], 0);
    TextDrawBackgroundColor(BankAccountTD[19], -256);
    TextDrawFont(BankAccountTD[19], 5);
    TextDrawSetProportional(BankAccountTD[19], 0);
    TextDrawSetPreviewModel(BankAccountTD[19], 1318);
    TextDrawSetPreviewRot(BankAccountTD[19], 0.000000, 15.000000, 180.000000, 1.000000);

    BankAccountTD[20] = TextDrawCreate(151.466278, 134.159118, "");
    TextDrawTextSize(BankAccountTD[20], 21.000000, -13.060001);
    TextDrawAlignment(BankAccountTD[20], 1);
    TextDrawColor(BankAccountTD[20], -1);
    TextDrawSetShadow(BankAccountTD[20], 0);
    TextDrawBackgroundColor(BankAccountTD[20], -256);
    TextDrawFont(BankAccountTD[20], 5);
    TextDrawSetProportional(BankAccountTD[20], 0);
    TextDrawSetPreviewModel(BankAccountTD[20], 1318);
    TextDrawSetPreviewRot(BankAccountTD[20], 0.000000, 15.000000, 180.000000, 1.000000);

    BankAccountTD[21] = TextDrawCreate(150.066375, 133.529510, "");
    TextDrawTextSize(BankAccountTD[21], 21.000000, -13.060001);
    TextDrawAlignment(BankAccountTD[21], 1);
    TextDrawColor(BankAccountTD[21], -1);
    TextDrawSetShadow(BankAccountTD[21], 0);
    TextDrawBackgroundColor(BankAccountTD[21], -256);
    TextDrawFont(BankAccountTD[21], 5);
    TextDrawSetProportional(BankAccountTD[21], 0);
    TextDrawSetPreviewModel(BankAccountTD[21], 1318);
    TextDrawSetPreviewRot(BankAccountTD[21], 0.000000, 15.000000, 180.000000, 1.000000);

    BankAccountTD[22] = TextDrawCreate(133.799911, 141.681564, "");
    TextDrawTextSize(BankAccountTD[22], 45.000000, -18.000000);
    TextDrawAlignment(BankAccountTD[22], 1);
    TextDrawColor(BankAccountTD[22], -1064116481);
    TextDrawSetShadow(BankAccountTD[22], 0);
    TextDrawBackgroundColor(BankAccountTD[22], -256);
    TextDrawFont(BankAccountTD[22], 5);
    TextDrawSetProportional(BankAccountTD[22], 0);
    TextDrawSetPreviewModel(BankAccountTD[22], 2965);
    TextDrawSetPreviewRot(BankAccountTD[22], 90.000000, 0.000000, 90.000000, 1.000000);

    BankAccountTD[23] = TextDrawCreate(125.166732, 119.526008, "");
    TextDrawTextSize(BankAccountTD[23], 46.000000, 32.000000);
    TextDrawAlignment(BankAccountTD[23], 1);
    TextDrawColor(BankAccountTD[23], -1064116481);
    TextDrawSetShadow(BankAccountTD[23], 0);
    TextDrawBackgroundColor(BankAccountTD[23], -256);
    TextDrawFont(BankAccountTD[23], 5);
    TextDrawSetProportional(BankAccountTD[23], 0);
    TextDrawSetPreviewModel(BankAccountTD[23], 19177);
    TextDrawSetPreviewRot(BankAccountTD[23], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[24] = TextDrawCreate(142.966751, 119.396400, "");
    TextDrawTextSize(BankAccountTD[24], 46.000000, 32.000000);
    TextDrawAlignment(BankAccountTD[24], 1);
    TextDrawColor(BankAccountTD[24], -1064116481);
    TextDrawSetShadow(BankAccountTD[24], 0);
    TextDrawBackgroundColor(BankAccountTD[24], -256);
    TextDrawFont(BankAccountTD[24], 5);
    TextDrawSetProportional(BankAccountTD[24], 0);
    TextDrawSetPreviewModel(BankAccountTD[24], 19177);
    TextDrawSetPreviewRot(BankAccountTD[24], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[25] = TextDrawCreate(109.733283, 103.848258, "");
    TextDrawTextSize(BankAccountTD[25], 88.000000, 58.000000);
    TextDrawAlignment(BankAccountTD[25], 1);
    TextDrawColor(BankAccountTD[25], -1064116481);
    TextDrawSetShadow(BankAccountTD[25], 0);
    TextDrawBackgroundColor(BankAccountTD[25], -256);
    TextDrawFont(BankAccountTD[25], 5);
    TextDrawSetProportional(BankAccountTD[25], 0);
    TextDrawSetPreviewModel(BankAccountTD[25], 19177);
    TextDrawSetPreviewRot(BankAccountTD[25], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[26] = TextDrawCreate(116.133674, 103.848258, "");
    TextDrawTextSize(BankAccountTD[26], 88.000000, 58.000000);
    TextDrawAlignment(BankAccountTD[26], 1);
    TextDrawColor(BankAccountTD[26], -1064116481);
    TextDrawSetShadow(BankAccountTD[26], 0);
    TextDrawBackgroundColor(BankAccountTD[26], -256);
    TextDrawFont(BankAccountTD[26], 5);
    TextDrawSetProportional(BankAccountTD[26], 0);
    TextDrawSetPreviewModel(BankAccountTD[26], 19177);
    TextDrawSetPreviewRot(BankAccountTD[26], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[27] = TextDrawCreate(112.933784, 101.903770, "");
    TextDrawTextSize(BankAccountTD[27], 88.000000, 58.000000);
    TextDrawAlignment(BankAccountTD[27], 1);
    TextDrawColor(BankAccountTD[27], -1064116481);
    TextDrawSetShadow(BankAccountTD[27], 0);
    TextDrawBackgroundColor(BankAccountTD[27], -256);
    TextDrawFont(BankAccountTD[27], 5);
    TextDrawSetProportional(BankAccountTD[27], 0);
    TextDrawSetPreviewModel(BankAccountTD[27], 19177);
    TextDrawSetPreviewRot(BankAccountTD[27], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[28] = TextDrawCreate(150.400054, 135.399978, "LD_SPAC:white");
    TextDrawTextSize(BankAccountTD[28], 14.000000, 2.000000);
    TextDrawAlignment(BankAccountTD[28], 1);
    TextDrawColor(BankAccountTD[28], -1064116481);
    TextDrawSetShadow(BankAccountTD[28], 0);
    TextDrawBackgroundColor(BankAccountTD[28], 255);
    TextDrawFont(BankAccountTD[28], 4);
    TextDrawSetProportional(BankAccountTD[28], 0);

    BankAccountTD[29] = TextDrawCreate(140.900115, 126.992774, "");
    TextDrawTextSize(BankAccountTD[29], 28.000000, 19.160003);
    TextDrawAlignment(BankAccountTD[29], 1);
    TextDrawColor(BankAccountTD[29], -1);
    TextDrawSetShadow(BankAccountTD[29], 0);
    TextDrawBackgroundColor(BankAccountTD[29], -256);
    TextDrawFont(BankAccountTD[29], 5);
    TextDrawSetProportional(BankAccountTD[29], 0);
    TextDrawSetPreviewModel(BankAccountTD[29], 19177);
    TextDrawSetPreviewRot(BankAccountTD[29], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[30] = TextDrawCreate(145.700424, 126.992774, "");
    TextDrawTextSize(BankAccountTD[30], 28.000000, 19.160003);
    TextDrawAlignment(BankAccountTD[30], 1);
    TextDrawColor(BankAccountTD[30], -1);
    TextDrawSetShadow(BankAccountTD[30], 0);
    TextDrawBackgroundColor(BankAccountTD[30], -256);
    TextDrawFont(BankAccountTD[30], 5);
    TextDrawSetProportional(BankAccountTD[30], 0);
    TextDrawSetPreviewModel(BankAccountTD[30], 19177);
    TextDrawSetPreviewRot(BankAccountTD[30], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[31] = TextDrawCreate(133.799911, 141.681564, "");
    TextDrawTextSize(BankAccountTD[31], 45.000000, -18.000000);
    TextDrawAlignment(BankAccountTD[31], 1);
    TextDrawColor(BankAccountTD[31], -120);
    TextDrawSetShadow(BankAccountTD[31], 0);
    TextDrawBackgroundColor(BankAccountTD[31], -256);
    TextDrawFont(BankAccountTD[31], 5);
    TextDrawSetProportional(BankAccountTD[31], 0);
    TextDrawSetPreviewModel(BankAccountTD[31], 2965);
    TextDrawSetPreviewRot(BankAccountTD[31], 90.000000, 0.000000, 90.000000, 1.000000);

    BankAccountTD[32] = TextDrawCreate(136.200180, 186.537139, "");
    TextDrawTextSize(BankAccountTD[32], 42.000000, -93.000000);
    TextDrawAlignment(BankAccountTD[32], 1);
    TextDrawColor(BankAccountTD[32], -1064116481);
    TextDrawSetShadow(BankAccountTD[32], 0);
    TextDrawBackgroundColor(BankAccountTD[32], -256);
    TextDrawFont(BankAccountTD[32], 5);
    TextDrawSetProportional(BankAccountTD[32], 0);
    TextDrawSetPreviewModel(BankAccountTD[32], 19177);
    TextDrawSetPreviewRot(BankAccountTD[32], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[33] = TextDrawCreate(136.166854, 90.948204, "");
    TextDrawTextSize(BankAccountTD[33], 42.000000, 83.000000);
    TextDrawAlignment(BankAccountTD[33], 1);
    TextDrawColor(BankAccountTD[33], -1064116481);
    TextDrawSetShadow(BankAccountTD[33], 0);
    TextDrawBackgroundColor(BankAccountTD[33], -256);
    TextDrawFont(BankAccountTD[33], 5);
    TextDrawSetProportional(BankAccountTD[33], 0);
    TextDrawSetPreviewModel(BankAccountTD[33], 19177);
    TextDrawSetPreviewRot(BankAccountTD[33], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[34] = TextDrawCreate(152.333221, 123.507514, "V");
    TextDrawLetterSize(BankAccountTD[34], 0.352665, 1.890370);
    TextDrawAlignment(BankAccountTD[34], 1);
    TextDrawColor(BankAccountTD[34], -188);
    TextDrawSetShadow(BankAccountTD[34], 0);
    TextDrawBackgroundColor(BankAccountTD[34], 255);
    TextDrawFont(BankAccountTD[34], 2);
    TextDrawSetProportional(BankAccountTD[34], 1);

    BankAccountTD[35] = TextDrawCreate(152.733551, 149.392654, "");
    TextDrawTextSize(BankAccountTD[35], 9.000000, -21.000000);
    TextDrawAlignment(BankAccountTD[35], 1);
    TextDrawColor(BankAccountTD[35], -188);
    TextDrawSetShadow(BankAccountTD[35], 0);
    TextDrawBackgroundColor(BankAccountTD[35], -256);
    TextDrawFont(BankAccountTD[35], 5);
    TextDrawSetProportional(BankAccountTD[35], 0);
    TextDrawSetPreviewModel(BankAccountTD[35], 19177);
    TextDrawSetPreviewRot(BankAccountTD[35], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[36] = TextDrawCreate(152.900299, 113.944496, "");
    TextDrawTextSize(BankAccountTD[36], 8.709993, 33.400100);
    TextDrawAlignment(BankAccountTD[36], 1);
    TextDrawColor(BankAccountTD[36], -1);
    TextDrawSetShadow(BankAccountTD[36], 0);
    TextDrawBackgroundColor(BankAccountTD[36], -256);
    TextDrawFont(BankAccountTD[36], 5);
    TextDrawSetProportional(BankAccountTD[36], 0);
    TextDrawSetPreviewModel(BankAccountTD[36], 19177);
    TextDrawSetPreviewRot(BankAccountTD[36], 0.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[37] = TextDrawCreate(153.200286, 123.444374, "");
    TextDrawTextSize(BankAccountTD[37], 8.000000, 18.000000);
    TextDrawAlignment(BankAccountTD[37], 1);
    TextDrawColor(BankAccountTD[37], -1);
    TextDrawSetShadow(BankAccountTD[37], 0);
    TextDrawBackgroundColor(BankAccountTD[37], -256);
    TextDrawFont(BankAccountTD[37], 5);
    TextDrawSetProportional(BankAccountTD[37], 0);
    TextDrawSetPreviewModel(BankAccountTD[37], 19177);
    TextDrawSetPreviewRot(BankAccountTD[37], 180.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[38] = TextDrawCreate(353.999908, 117.407409, "MARYLAND");
    TextDrawLetterSize(BankAccountTD[38], 0.135665, 0.654220);
    TextDrawAlignment(BankAccountTD[38], 2);
    TextDrawColor(BankAccountTD[38], -1916144641);
    TextDrawSetShadow(BankAccountTD[38], 0);
    TextDrawBackgroundColor(BankAccountTD[38], 255);
    TextDrawFont(BankAccountTD[38], 1);
    TextDrawSetProportional(BankAccountTD[38], 1);

    BankAccountTD[39] = TextDrawCreate(353.333221, 124.459312, "BANKING_SYSTEM");
    TextDrawLetterSize(BankAccountTD[39], 0.135665, 0.654220);
    TextDrawAlignment(BankAccountTD[39], 2);
    TextDrawColor(BankAccountTD[39], -1064116481);
    TextDrawSetShadow(BankAccountTD[39], 0);
    TextDrawBackgroundColor(BankAccountTD[39], 255);
    TextDrawFont(BankAccountTD[39], 1);
    TextDrawSetProportional(BankAccountTD[39], 1);

    BankAccountTD[40] = TextDrawCreate(212.333267, 120.311126, "HOME");
    TextDrawLetterSize(BankAccountTD[40], 0.237000, 1.056591);
    TextDrawAlignment(BankAccountTD[40], 2);
    TextDrawColor(BankAccountTD[40], -1916144641);
    TextDrawSetShadow(BankAccountTD[40], 0);
    TextDrawBackgroundColor(BankAccountTD[40], 255);
    TextDrawFont(BankAccountTD[40], 1);
    TextDrawSetProportional(BankAccountTD[40], 1);

    BankAccountTD[41] = TextDrawCreate(502.000030, 130.525939, "LD_SPAC:white");
    TextDrawTextSize(BankAccountTD[41], 28.000000, 85.000000);
    TextDrawAlignment(BankAccountTD[41], 1);
    TextDrawColor(BankAccountTD[41], 329471);
    TextDrawSetShadow(BankAccountTD[41], 0);
    TextDrawBackgroundColor(BankAccountTD[41], 255);
    TextDrawFont(BankAccountTD[41], 4);
    TextDrawSetProportional(BankAccountTD[41], 0);

    BankAccountTD[42] = TextDrawCreate(505.100067, 112.803733, "");
    TextDrawTextSize(BankAccountTD[42], 20.000000, 21.000000);
    TextDrawAlignment(BankAccountTD[42], 1);
    TextDrawColor(BankAccountTD[42], -1916144641);
    TextDrawSetShadow(BankAccountTD[42], 0);
    TextDrawBackgroundColor(BankAccountTD[42], -256);
    TextDrawFont(BankAccountTD[42], 5);
    TextDrawSetProportional(BankAccountTD[42], 0);
    TextDrawSetPreviewModel(BankAccountTD[42], 1316);
    TextDrawSetPreviewRot(BankAccountTD[42], 270.000000, 180.000000, 0.000000, 1.000000);

    BankAccountTD[43] = TextDrawCreate(198.700042, 136.703598, "LD_SPAC:white");
    TextDrawTextSize(BankAccountTD[43], 327.000000, 1.340000);
    TextDrawAlignment(BankAccountTD[43], 1);
    TextDrawColor(BankAccountTD[43], -232);
    TextDrawSetShadow(BankAccountTD[43], 0);
    TextDrawBackgroundColor(BankAccountTD[43], 255);
    TextDrawFont(BankAccountTD[43], 4);
    TextDrawSetProportional(BankAccountTD[43], 0);

    BankAccountTD[44] = TextDrawCreate(100.333335, 135.088821, "");
    TextDrawTextSize(BankAccountTD[44], 197.000000, 30.000000);
    TextDrawAlignment(BankAccountTD[44], 1);
    TextDrawColor(BankAccountTD[44], -1916144753);
    TextDrawSetShadow(BankAccountTD[44], 0);
    TextDrawBackgroundColor(BankAccountTD[44], -256);
    TextDrawFont(BankAccountTD[44], 5);
    TextDrawSetProportional(BankAccountTD[44], 0);
    TextDrawSetPreviewModel(BankAccountTD[44], 1317);
    TextDrawSetPreviewRot(BankAccountTD[44], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[45] = TextDrawCreate(321.666809, 135.088821, "");
    TextDrawTextSize(BankAccountTD[45], 197.000000, 30.000000);
    TextDrawAlignment(BankAccountTD[45], 1);
    TextDrawColor(BankAccountTD[45], -1916144753);
    TextDrawSetShadow(BankAccountTD[45], 0);
    TextDrawBackgroundColor(BankAccountTD[45], -256);
    TextDrawFont(BankAccountTD[45], 5);
    TextDrawSetProportional(BankAccountTD[45], 0);
    TextDrawSetPreviewModel(BankAccountTD[45], 1317);
    TextDrawSetPreviewRot(BankAccountTD[45], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[46] = TextDrawCreate(61.666801, 304.848236, "");
    TextDrawTextSize(BankAccountTD[46], 127.000000, 23.000000);
    TextDrawAlignment(BankAccountTD[46], 1);
    TextDrawColor(BankAccountTD[46], -1916144753);
    TextDrawSetShadow(BankAccountTD[46], 0);
    TextDrawBackgroundColor(BankAccountTD[46], -256);
    TextDrawFont(BankAccountTD[46], 5);
    TextDrawSetProportional(BankAccountTD[46], 0);
    TextDrawSetPreviewModel(BankAccountTD[46], 1317);
    TextDrawSetPreviewRot(BankAccountTD[46], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[47] = TextDrawCreate(61.666801, 178.744201, "");
    TextDrawTextSize(BankAccountTD[47], 127.000000, 23.000000);
    TextDrawAlignment(BankAccountTD[47], 1);
    TextDrawColor(BankAccountTD[47], -1916144753);
    TextDrawSetShadow(BankAccountTD[47], 0);
    TextDrawBackgroundColor(BankAccountTD[47], -256);
    TextDrawFont(BankAccountTD[47], 5);
    TextDrawSetProportional(BankAccountTD[47], 0);
    TextDrawSetPreviewModel(BankAccountTD[47], 1317);
    TextDrawSetPreviewRot(BankAccountTD[47], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[48] = TextDrawCreate(61.666801, 159.247802, "");
    TextDrawTextSize(BankAccountTD[48], 127.000000, 23.000000);
    TextDrawAlignment(BankAccountTD[48], 1);
    TextDrawColor(BankAccountTD[48], -1916144753);
    TextDrawSetShadow(BankAccountTD[48], 0);
    TextDrawBackgroundColor(BankAccountTD[48], -256);
    TextDrawFont(BankAccountTD[48], 5);
    TextDrawSetProportional(BankAccountTD[48], 0);
    TextDrawSetPreviewModel(BankAccountTD[48], 1317);
    TextDrawSetPreviewRot(BankAccountTD[48], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[49] = TextDrawCreate(61.666801, 139.336685, "");
    TextDrawTextSize(BankAccountTD[49], 127.000000, 23.000000);
    TextDrawAlignment(BankAccountTD[49], 1);
    TextDrawColor(BankAccountTD[49], -1916144753);
    TextDrawSetShadow(BankAccountTD[49], 0);
    TextDrawBackgroundColor(BankAccountTD[49], -256);
    TextDrawFont(BankAccountTD[49], 5);
    TextDrawSetProportional(BankAccountTD[49], 0);
    TextDrawSetPreviewModel(BankAccountTD[49], 1317);
    TextDrawSetPreviewRot(BankAccountTD[49], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[50] = TextDrawCreate(61.666801, 200.214736, "");
    TextDrawTextSize(BankAccountTD[50], 127.000000, 23.000000);
    TextDrawAlignment(BankAccountTD[50], 1);
    TextDrawColor(BankAccountTD[50], -1916144753);
    TextDrawSetShadow(BankAccountTD[50], 0);
    TextDrawBackgroundColor(BankAccountTD[50], -256);
    TextDrawFont(BankAccountTD[50], 5);
    TextDrawSetProportional(BankAccountTD[50], 0);
    TextDrawSetPreviewModel(BankAccountTD[50], 1317);
    TextDrawSetPreviewRot(BankAccountTD[50], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[51] = TextDrawCreate(158.000015, 153.496276, "NAPRAVI_NALOG");
    TextDrawLetterSize(BankAccountTD[51], 0.136665, 0.633481);
    TextDrawAlignment(BankAccountTD[51], 2);
    TextDrawColor(BankAccountTD[51], -1);
    TextDrawSetShadow(BankAccountTD[51], 0);
    TextDrawBackgroundColor(BankAccountTD[51], 255);
    TextDrawFont(BankAccountTD[51], 1);
    TextDrawSetProportional(BankAccountTD[51], 1);
    TextDrawSetSelectable(BankAccountTD[51], true);
    TextDrawTextSize(BankAccountTD[51], 360, 7);

    BankAccountTD[52] = TextDrawCreate(157.333374, 173.407409, "SVI_LOGOVI");
    TextDrawLetterSize(BankAccountTD[52], 0.136665, 0.633481);
    TextDrawAlignment(BankAccountTD[52], 2);
    TextDrawColor(BankAccountTD[52], -1);
    TextDrawSetShadow(BankAccountTD[52], 0);
    TextDrawBackgroundColor(BankAccountTD[52], 255);
    TextDrawFont(BankAccountTD[52], 1);
    TextDrawSetProportional(BankAccountTD[52], 1);
    TextDrawSetSelectable(BankAccountTD[52], true);
    TextDrawTextSize(BankAccountTD[52], 360, 7);

    BankAccountTD[53] = TextDrawCreate(156.666687, 192.903717, "PROMENI_LOZINKU");
    TextDrawLetterSize(BankAccountTD[53], 0.136665, 0.633481);
    TextDrawAlignment(BankAccountTD[53], 2);
    TextDrawColor(BankAccountTD[53], -1);
    TextDrawSetShadow(BankAccountTD[53], 0);
    TextDrawBackgroundColor(BankAccountTD[53], 255);
    TextDrawFont(BankAccountTD[53], 1);
    TextDrawSetProportional(BankAccountTD[53], 1);
    TextDrawSetSelectable(BankAccountTD[53], true);
    TextDrawTextSize(BankAccountTD[53], 360, 7);

    BankAccountTD[54] = TextDrawCreate(156.666687, 214.474105, "UKLONI_NALOG");
    TextDrawLetterSize(BankAccountTD[54], 0.136665, 0.633481);
    TextDrawAlignment(BankAccountTD[54], 2);
    TextDrawColor(BankAccountTD[54], -1);
    TextDrawSetShadow(BankAccountTD[54], 0);
    TextDrawBackgroundColor(BankAccountTD[54], 255);
    TextDrawFont(BankAccountTD[54], 1);
    TextDrawSetProportional(BankAccountTD[54], 1);
    TextDrawSetSelectable(BankAccountTD[54], true);
    TextDrawTextSize(BankAccountTD[54], 360, 7);

    BankAccountTD[55] = TextDrawCreate(156.666687, 319.007537, "ODJAVI_SE");
    TextDrawLetterSize(BankAccountTD[55], 0.136665, 0.633481);
    TextDrawAlignment(BankAccountTD[55], 2);
    TextDrawColor(BankAccountTD[55], -1);
    TextDrawSetShadow(BankAccountTD[55], 0);
    TextDrawBackgroundColor(BankAccountTD[55], 255);
    TextDrawFont(BankAccountTD[55], 1);
    TextDrawSetProportional(BankAccountTD[55], 1);
    TextDrawSetSelectable(BankAccountTD[55], true);
    TextDrawTextSize(BankAccountTD[55], 360, 7);

    BankAccountTD[56] = TextDrawCreate(61.666801, 221.785079, "");
    TextDrawTextSize(BankAccountTD[56], 127.000000, 23.000000);
    TextDrawAlignment(BankAccountTD[56], 1);
    TextDrawColor(BankAccountTD[56], -1916144753);
    TextDrawSetShadow(BankAccountTD[56], 0);
    TextDrawBackgroundColor(BankAccountTD[56], -256);
    TextDrawFont(BankAccountTD[56], 5);
    TextDrawSetProportional(BankAccountTD[56], 0);
    TextDrawSetPreviewModel(BankAccountTD[56], 1317);
    TextDrawSetPreviewRot(BankAccountTD[56], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[57] = TextDrawCreate(156.666687, 236.459396, "MOJI_NALOZI");
    TextDrawLetterSize(BankAccountTD[57], 0.136665, 0.633481);
    TextDrawAlignment(BankAccountTD[57], 2);
    TextDrawColor(BankAccountTD[57], -1);
    TextDrawSetShadow(BankAccountTD[57], 0);
    TextDrawBackgroundColor(BankAccountTD[57], 255);
    TextDrawFont(BankAccountTD[57], 1);
    TextDrawSetProportional(BankAccountTD[57], 1);
    TextDrawSetSelectable(BankAccountTD[57], true);
    TextDrawTextSize(BankAccountTD[57], 360, 7);

    BankAccountTD[58] = TextDrawCreate(470.333404, 154.326049, "BANKA");
    TextDrawLetterSize(BankAccountTD[58], 0.136665, 0.633481);
    TextDrawAlignment(BankAccountTD[58], 2);
    TextDrawColor(BankAccountTD[58], -1);
    TextDrawSetShadow(BankAccountTD[58], 0);
    TextDrawBackgroundColor(BankAccountTD[58], 255);
    TextDrawFont(BankAccountTD[58], 1);
    TextDrawSetProportional(BankAccountTD[58], 1);

    BankAccountTD[59] = TextDrawCreate(248.000015, 154.326049, "TRANSAKCIJE_$");
    TextDrawLetterSize(BankAccountTD[59], 0.136665, 0.633481);
    TextDrawAlignment(BankAccountTD[59], 2);
    TextDrawColor(BankAccountTD[59], -1);
    TextDrawSetShadow(BankAccountTD[59], 0);
    TextDrawBackgroundColor(BankAccountTD[59], 255);
    TextDrawFont(BankAccountTD[59], 1);
    TextDrawSetProportional(BankAccountTD[59], 1);

    BankAccountTD[60] = TextDrawCreate(199.033370, 170.303558, "LD_SPAC:white");
    TextDrawTextSize(BankAccountTD[60], 98.000000, 164.000000);
    TextDrawAlignment(BankAccountTD[60], 1);
    TextDrawColor(BankAccountTD[60], -234);
    TextDrawSetShadow(BankAccountTD[60], 0);
    TextDrawBackgroundColor(BankAccountTD[60], 255);
    TextDrawFont(BankAccountTD[60], 4);
    TextDrawSetProportional(BankAccountTD[60], 0);

    BankAccountTD[61] = TextDrawCreate(128.666824, 192.748077, "");
    TextDrawTextSize(BankAccountTD[61], 155.000000, 3.000000);
    TextDrawAlignment(BankAccountTD[61], 1);
    TextDrawColor(BankAccountTD[61], -1916144753);
    TextDrawSetShadow(BankAccountTD[61], 0);
    TextDrawBackgroundColor(BankAccountTD[61], -256);
    TextDrawFont(BankAccountTD[61], 5);
    TextDrawSetProportional(BankAccountTD[61], 0);
    TextDrawSetPreviewModel(BankAccountTD[61], 1317);
    TextDrawSetPreviewRot(BankAccountTD[61], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[62] = TextDrawCreate(128.666824, 225.203567, "");
    TextDrawTextSize(BankAccountTD[62], 155.000000, 3.000000);
    TextDrawAlignment(BankAccountTD[62], 1);
    TextDrawColor(BankAccountTD[62], -1916144753);
    TextDrawSetShadow(BankAccountTD[62], 0);
    TextDrawBackgroundColor(BankAccountTD[62], -256);
    TextDrawFont(BankAccountTD[62], 5);
    TextDrawSetProportional(BankAccountTD[62], 0);
    TextDrawSetPreviewModel(BankAccountTD[62], 1317);
    TextDrawSetPreviewRot(BankAccountTD[62], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[63] = TextDrawCreate(128.666824, 264.196197, "");
    TextDrawTextSize(BankAccountTD[63], 155.000000, 3.000000);
    TextDrawAlignment(BankAccountTD[63], 1);
    TextDrawColor(BankAccountTD[63], -1916144753);
    TextDrawSetShadow(BankAccountTD[63], 0);
    TextDrawBackgroundColor(BankAccountTD[63], -256);
    TextDrawFont(BankAccountTD[63], 5);
    TextDrawSetProportional(BankAccountTD[63], 0);
    TextDrawSetPreviewModel(BankAccountTD[63], 1317);
    TextDrawSetPreviewRot(BankAccountTD[63], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[64] = TextDrawCreate(353.333465, 169.203674, "");
    TextDrawTextSize(BankAccountTD[64], 155.000000, 27.000000);
    TextDrawAlignment(BankAccountTD[64], 1);
    TextDrawColor(BankAccountTD[64], -1064116481);
    TextDrawSetShadow(BankAccountTD[64], 0);
    TextDrawBackgroundColor(BankAccountTD[64], -256);
    TextDrawFont(BankAccountTD[64], 5);
    TextDrawSetProportional(BankAccountTD[64], 0);
    TextDrawSetPreviewModel(BankAccountTD[64], 1317);
    TextDrawSetPreviewRot(BankAccountTD[64], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[65] = TextDrawCreate(353.333465, 199.070343, "");
    TextDrawTextSize(BankAccountTD[65], 155.000000, 27.000000);
    TextDrawAlignment(BankAccountTD[65], 1);
    TextDrawColor(BankAccountTD[65], -1064116481);
    TextDrawSetShadow(BankAccountTD[65], 0);
    TextDrawBackgroundColor(BankAccountTD[65], -256);
    TextDrawFont(BankAccountTD[65], 5);
    TextDrawSetProportional(BankAccountTD[65], 0);
    TextDrawSetPreviewModel(BankAccountTD[65], 1317);
    TextDrawSetPreviewRot(BankAccountTD[65], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[66] = TextDrawCreate(353.333465, 232.255538, "");
    TextDrawTextSize(BankAccountTD[66], 155.000000, 27.000000);
    TextDrawAlignment(BankAccountTD[66], 1);
    TextDrawColor(BankAccountTD[66], -1064116481);
    TextDrawSetShadow(BankAccountTD[66], 0);
    TextDrawBackgroundColor(BankAccountTD[66], -256);
    TextDrawFont(BankAccountTD[66], 5);
    TextDrawSetProportional(BankAccountTD[66], 0);
    TextDrawSetPreviewModel(BankAccountTD[66], 1317);
    TextDrawSetPreviewRot(BankAccountTD[66], 0.000000, -90.000000, 0.000000, 1.000000);

    BankAccountTD[67] = TextDrawCreate(470.999969, 186.366699, "OSTAVI");
    TextDrawLetterSize(BankAccountTD[67], 0.123332, 0.633481);
    TextDrawTextSize(BankAccountTD[67], 0.000000, -60.000000);
    TextDrawAlignment(BankAccountTD[67], 2);
    TextDrawColor(BankAccountTD[67], -1);
    TextDrawSetShadow(BankAccountTD[67], 0);
    TextDrawBackgroundColor(BankAccountTD[67], 255);
    TextDrawFont(BankAccountTD[67], 1);
    TextDrawSetProportional(BankAccountTD[67], 1);
    TextDrawSetSelectable(BankAccountTD[67], true);
    TextDrawTextSize(BankAccountTD[67], 360, 7);

    BankAccountTD[68] = TextDrawCreate(470.999969, 216.233367, "PODIGNI");
    TextDrawLetterSize(BankAccountTD[68], 0.123332, 0.633481);
    TextDrawTextSize(BankAccountTD[68], 0.000000, -60.000000);
    TextDrawAlignment(BankAccountTD[68], 2);
    TextDrawColor(BankAccountTD[68], -1);
    TextDrawSetShadow(BankAccountTD[68], 0);
    TextDrawBackgroundColor(BankAccountTD[68], 255);
    TextDrawFont(BankAccountTD[68], 1);
    TextDrawSetProportional(BankAccountTD[68], 1);
    TextDrawSetSelectable(BankAccountTD[68], true);
    TextDrawTextSize(BankAccountTD[68], 360, 7);

    BankAccountTD[69] = TextDrawCreate(470.999969, 249.418563, "PREBACI");
    TextDrawLetterSize(BankAccountTD[69], 0.123332, 0.633481);
    TextDrawTextSize(BankAccountTD[69], 0.000000, -60.000000);
    TextDrawAlignment(BankAccountTD[69], 2);
    TextDrawColor(BankAccountTD[69], -1);
    TextDrawSetShadow(BankAccountTD[69], 0);
    TextDrawBackgroundColor(BankAccountTD[69], 255);
    TextDrawFont(BankAccountTD[69], 1);
    TextDrawSetProportional(BankAccountTD[69], 1);
    TextDrawSetSelectable(BankAccountTD[69], true);
    TextDrawTextSize(BankAccountTD[69], 360, 7);

    BankAccountTD[70] = TextDrawCreate(469.666656, 319.522521, "TRENUTNI_BALANS");
    TextDrawLetterSize(BankAccountTD[70], 0.123332, 0.633481);
    TextDrawTextSize(BankAccountTD[70], 0.000000, -60.000000);
    TextDrawAlignment(BankAccountTD[70], 2);
    TextDrawColor(BankAccountTD[70], -1);
    TextDrawSetShadow(BankAccountTD[70], 0);
    TextDrawBackgroundColor(BankAccountTD[70], 255);
    TextDrawFont(BankAccountTD[70], 1);
    TextDrawSetProportional(BankAccountTD[70], 1);

    BankAccountTD[71] = TextDrawCreate(450.666748, 141.311141, "");
    TextDrawTextSize(BankAccountTD[71], 41.000000, 48.000000);
    TextDrawAlignment(BankAccountTD[71], 1);
    TextDrawColor(BankAccountTD[71], -1);
    TextDrawSetShadow(BankAccountTD[71], 0);
    TextDrawBackgroundColor(BankAccountTD[71], -256);
    TextDrawFont(BankAccountTD[71], 5);
    TextDrawSetProportional(BankAccountTD[71], 0);
    TextDrawSetPreviewModel(BankAccountTD[71], 19177);
    TextDrawSetPreviewRot(BankAccountTD[71], 180.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[72] = TextDrawCreate(227.666763, 141.311141, "");
    TextDrawTextSize(BankAccountTD[72], 41.000000, 48.000000);
    TextDrawAlignment(BankAccountTD[72], 1);
    TextDrawColor(BankAccountTD[72], -1);
    TextDrawSetShadow(BankAccountTD[72], 0);
    TextDrawBackgroundColor(BankAccountTD[72], -256);
    TextDrawFont(BankAccountTD[72], 5);
    TextDrawSetProportional(BankAccountTD[72], 0);
    TextDrawSetPreviewModel(BankAccountTD[72], 19177);
    TextDrawSetPreviewRot(BankAccountTD[72], 180.000000, 0.000000, 0.000000, 1.000000);

    BankAccountTD[73] = TextDrawCreate(305.333312, 141.311126, "ld_shtr:fstar");
    TextDrawTextSize(BankAccountTD[73], 67.000000, 65.000000);
    TextDrawAlignment(BankAccountTD[73], 1);
    TextDrawColor(BankAccountTD[73], -193);
    TextDrawSetShadow(BankAccountTD[73], 0);
    TextDrawBackgroundColor(BankAccountTD[73], 255);
    TextDrawFont(BankAccountTD[73], 4);
    TextDrawSetProportional(BankAccountTD[73], 0);

    BankAccountTD[74] = TextDrawCreate(324.666717, 204.362960, "ld_shtr:fstar");
    TextDrawTextSize(BankAccountTD[74], 67.000000, 65.000000);
    TextDrawAlignment(BankAccountTD[74], 1);
    TextDrawColor(BankAccountTD[74], -193);
    TextDrawSetShadow(BankAccountTD[74], 0);
    TextDrawBackgroundColor(BankAccountTD[74], 255);
    TextDrawFont(BankAccountTD[74], 4);
    TextDrawSetProportional(BankAccountTD[74], 0);

    BankAccountTD[75] = TextDrawCreate(339.333465, 268.244415, "ld_shtr:fstar");
    TextDrawTextSize(BankAccountTD[75], 67.000000, 65.000000);
    TextDrawAlignment(BankAccountTD[75], 1);
    TextDrawColor(BankAccountTD[75], -193);
    TextDrawSetShadow(BankAccountTD[75], 0);
    TextDrawBackgroundColor(BankAccountTD[75], 255);
    TextDrawFont(BankAccountTD[75], 4);
    TextDrawSetProportional(BankAccountTD[75], 0);
}

forward StringBankTDs(playerid);
public StringBankTDs(playerid)
{

    new namestr[25];

    format(namestr, sizeof(namestr), "%s",ReturnPlayerName(playerid));
    PlayerTextDrawSetString(playerid, BankAccountPTD[playerid][1], namestr);

    new string[80];
    format(string,sizeof(string),"%d$",PlayerFinance[playerid][pBankMoney]);
    PlayerTextDrawSetString(playerid, BankAccountPTD[playerid][15], string);
    return (true);
}