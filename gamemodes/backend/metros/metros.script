/***
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic
 *  @Date           27th May 2023
 *  @Weburl         maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           metro.pwn
 *  @Module         modules
 */

#include <ysilib\YSI_Coding\y_hooks>

// Train types
#define TRAIN_TYPE_SLOW   1
#define TRAIN_TYPE_FAST   2

// Price and time(seconds)
#define SLOW_TRAIN_PRICE  2.00
#define FAST_TRAIN_PRICE  5.00
#define SLOW_TRAIN_TIME   30
#define FAST_TRAIN_TIME   10

//Train interior
#define TRAIN_INTERIOR_ID 19

// Dizi ga nodi kolko hoces
#define MAX_METRO_STATIONS    50

#define train_interior_x	(-1097.1132)
#define train_interior_y	(-203.0459)
#define train_interior_z	(14.2131)

enum E_METRO_STATION {
    station_ID,
    station_Name[32],
    Float:station_X,
    Float:station_Y,
    Float:station_Z,
    station_Pickup,
    Text3D:station_Label
}
new g_MetroStations[MAX_METRO_STATIONS][E_METRO_STATION];

// Sound effects
#define SOUND_TRAIN_ARRIVAL   1137
#define SOUND_TRAIN_DEPARTURE 1138
#define SOUND_TICKET_PURCHASE 1083

new g_PlayerSelectedStation[MAX_PLAYERS];
new g_PlayerTrainType[MAX_PLAYERS];
new g_PlayerTrainVW[MAX_PLAYERS];

new Iterator:MetroStations<MAX_METRO_STATIONS>;

hook OnGameModeInit()
{
	Iter_Init(MetroStations);
	mysql_tquery(SQL, "SELECT * FROM `metro_stations`", "OnMetroStationsLoad");

    print("Metro system loaded");

	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnGameModeExit()
{
   Iter_Clear(MetroStations);
   print("Metro system unloaded");

   return Y_HOOKS_CONTINUE_RETURN_1;   
}

hook OnPlayerConnect(playerid)
{
	g_PlayerSelectedStation[playerid] = -1;
	g_PlayerTrainType[playerid] = 0;
	g_PlayerTrainVW[playerid] = 0;
	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerDisconnect(playerid, reason)
{
	g_PlayerSelectedStation[playerid] = -1;
	g_PlayerTrainType[playerid] = 0;
	g_PlayerTrainVW[playerid] = 0;

	return Y_HOOKS_CONTINUE_RETURN_1;
}

forward OnMetroStationsLoad();
public OnMetroStationsLoad()
{
    new rows = cache_num_rows();
    for(new i = 0; i < rows && i < MAX_METRO_STATIONS; i++)
    {
        cache_get_value_name_int(i, "id", g_MetroStations[i][station_ID]);
        cache_get_value_name(i, "name", g_MetroStations[i][station_Name], 32);
        cache_get_value_name_float(i, "x", g_MetroStations[i][station_X]);
        cache_get_value_name_float(i, "y", g_MetroStations[i][station_Y]);
        cache_get_value_name_float(i, "z", g_MetroStations[i][station_Z]);
        
        new labelText[452];
        format(labelText, sizeof(labelText), ""c_server"\187; "c_white"Metro Station "c_server"\171;\n"c_server"\187; "c_white"%s "c_server"\171;\n"c_server"\187; "c_white"Use /metro to travel "c_server"\171;", 
            g_MetroStations[i][station_Name]
        );
        
        g_MetroStations[i][station_Pickup] = CreatePickup(1239, 1, 
            g_MetroStations[i][station_X],
            g_MetroStations[i][station_Y],
            g_MetroStations[i][station_Z],
            -1
        );
        
        g_MetroStations[i][station_Label] = Create3DTextLabel(
            labelText,
            0xFFFF00FF,
            g_MetroStations[i][station_X],
            g_MetroStations[i][station_Y],
            g_MetroStations[i][station_Z] + 0.5,
            30.0,
            0,
            true
        );
        
        Iter_Add(MetroStations, i);
    }
}

Dialog:METRO_MAIN(playerid, response, listitem, inputtext[])
{
    if(!response) return (true);
	
	g_PlayerSelectedStation[playerid] = listitem;
	
	if( GetPlayerCurrentStation(playerid) == g_PlayerSelectedStation[playerid])
		return SendClientMessage(playerid, x_ltorange, "METRO: Vec se nalazite na toj stanici!");

	ShowTrainTypeSelection(playerid);
    return (true);
}

Dialog:METRO_TYPE(playerid, response, listitem, inputtext[])
{
    if(!response) return ShowMetroStations(playerid);
    g_PlayerTrainType[playerid] = (listitem == 0) ? TRAIN_TYPE_SLOW : TRAIN_TYPE_FAST;
    ShowTravelConfirmation(playerid);
    return (true);
}

Dialog:METRO_CONFIRM(playerid, response, listitem, inputtext[])
{
    if(!response) return ShowTrainTypeSelection(playerid);
    StartTrainJourney(playerid);
    return (true);
}

ShowTrainTypeSelection(playerid)
{
    new string[256];
    format(string, sizeof(string), 
        "Spori Voz\t$%.2f (%d sekundi)\n\
        Brzi Voz\t$%.2f (%d sekundi)",
        SLOW_TRAIN_PRICE, SLOW_TRAIN_TIME,
        FAST_TRAIN_PRICE, FAST_TRAIN_TIME
    );
    
    Dialog_Show(playerid, "METRO_TYPE", DIALOG_STYLE_TABLIST,
        "Izaberi tip voza",
        string,
        "Odaberi", "Nazad"
    );

	return (true);
}

ShowTravelConfirmation(playerid)
{
    new string[256], type = g_PlayerTrainType[playerid];
    new Float:xPrice = (type == TRAIN_TYPE_FAST) ? FAST_TRAIN_PRICE : SLOW_TRAIN_PRICE;
    new time = (type == TRAIN_TYPE_FAST) ? FAST_TRAIN_TIME : SLOW_TRAIN_TIME;
    
    format(string, sizeof(string),
        "Destinacija: %s\n\
        Tip voza: %s\n\
        Cena: $%.2f\n\
        Vreme putovanja: %d sekundi\n\n\
        Jesi li siguran da zelis da putujes?",
        g_MetroStations[g_PlayerSelectedStation[playerid]][station_Name],
        (type == TRAIN_TYPE_FAST) ? "Brzi Voz" : "Spori Voz",
        xPrice,
        time
    );
    
    Dialog_Show(playerid, "METRO_CONFIRM", DIALOG_STYLE_MSGBOX,
        "Potvrdi putovanje",
        string,
        "Da", "Ne"
    );
}

ShowMetroStations(playerid)
{
    new string[512];
    foreach(new i : MetroStations)
    {
        format(string, sizeof(string), "%s%s\n", string, g_MetroStations[i][station_Name]);
    }
    Dialog_Show(playerid, "METRO_MAIN", DIALOG_STYLE_LIST,
        "Metro stanice",
        string,
        "Odaberi", "Odustani"
    );

	return (true);
}

YCMD:metro(playerid, params[], help)
{
	if(!IsPlayerNearStation(playerid))
	{
		SendClientMessage(playerid, x_ltorange, "METRO: Moras biti na metro stanici da koristis ovu komandu!");
		return (true);
	}
	
	ShowMetroStations(playerid);
	return (true);
}

YCMD:editstation(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid)) return (false);
    
    new stationid, name[32];
    if(sscanf(params, "ds[32]", stationid, name)) 
        return SendClientMessage(playerid, x_red, "USAGE: /editstation [stationid] [new name]");
    
    if(!Iter_Contains(MetroStations, stationid))
        return SendClientMessage(playerid, x_red, "Nevalidan ID stanice!");
    
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    
    new labelText[452];
    format(labelText, sizeof(labelText), ""c_server"\187; "c_white"Metro Station "c_server"\171;\n"c_server"\187; "c_white"%s "c_server"\171;\n"c_server"\187; "c_white"Koristi /metro da putujes "c_server"\171;",name);
    
    DestroyPickup(g_MetroStations[stationid][station_Pickup]);
    Delete3DTextLabel(g_MetroStations[stationid][station_Label]);
    
    g_MetroStations[stationid][station_Pickup] = CreatePickup(1239, 1, x, y, z, -1);
    g_MetroStations[stationid][station_Label] = Create3DTextLabel(
        labelText,
        0xFFFF00FF,
        x, y, z + 0.5,
        30.0,
        0,
        true
    );
    
    format(g_MetroStations[stationid][station_Name], 32, name);
    g_MetroStations[stationid][station_X] = x;
    g_MetroStations[stationid][station_Y] = y;
    g_MetroStations[stationid][station_Z] = z;
    
    new Query[256];
    mysql_format(SQL, Query, sizeof(Query), 
        "UPDATE metro_stations SET name='%e', x=%f, y=%f, z=%f WHERE id=%d",
        name, x, y, z, g_MetroStations[stationid][station_ID]
    );
    mysql_tquery(SQL, Query);
    
    SendClientMessage(playerid, x_ltorange, "METRO: Metro stanica uspesno izmenjena!");
    return (true);
}

YCMD:deletestation(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid)) return (false);
    
    new stationid;
    if(sscanf(params, "d", stationid))
        return SendClientMessage(playerid, x_red, "USAGE: /deletestation [stationid]");
    
    if(!Iter_Contains(MetroStations, stationid))
        return SendClientMessage(playerid, x_red, "Nevalidan ID stanice!");
    
    DestroyPickup(g_MetroStations[stationid][station_Pickup]);
    Delete3DTextLabel(g_MetroStations[stationid][station_Label]);
    
    new Query[128];
    mysql_format(SQL, Query, sizeof(Query), 
        "DELETE FROM metro_stations WHERE id=%d",
        g_MetroStations[stationid][station_ID]
    );
    mysql_tquery(SQL, Query);
    
    Iter_Remove(MetroStations, stationid);
    
    SendClientMessage(playerid, x_ltorange, "METRO: Metro stanica uspesno izbrisana!");
    return (true);
}

YCMD:liststations(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid)) return (false);
    
    new string[512];
    SendClientMessage(playerid, x_green, "Lista metro stanica:");
    
    foreach(new i : MetroStations)
    {
        format(string, sizeof(string), "ID: %d | Name: %s", i, g_MetroStations[i][station_Name]);
        SendClientMessage(playerid, x_white, string);
    }
    return (true);
}

StartTrainJourney(playerid)
{
    new type = g_PlayerTrainType[playerid];
    new Float:xPrice = (type == TRAIN_TYPE_FAST) ? FAST_TRAIN_PRICE : SLOW_TRAIN_PRICE;
    new time = (type == TRAIN_TYPE_FAST) ? FAST_TRAIN_TIME : SLOW_TRAIN_TIME;
    
    if(GetPlayerMoney(playerid) < xPrice)
    {
        SendClientMessage(playerid, x_ltorange, "METRO: Ne mozes da platis ovu voznju!");
        return (false);
    }
    
    GivePlayerMoney(playerid, -xPrice);
    PlayerPlaySound(playerid, SOUND_TICKET_PURCHASE, 0.0, 0.0, 0.0);
    
    SetPlayerCompensatedPos(playerid, 
        train_interior_x, 
        train_interior_y, 
        train_interior_z, 
        g_PlayerTrainVW[playerid], 
        TRAIN_INTERIOR_ID
    );
    
    PlayerPlaySound(playerid, SOUND_TRAIN_DEPARTURE, 0.0, 0.0, 0.0);
    
    SetTimerEx("CompleteJourney", time * 1000, false, "i", playerid);
    return (true);
}

forward CompleteJourney(playerid);
public CompleteJourney(playerid)
{
    new stationid = g_PlayerSelectedStation[playerid];
    
    PlayerPlaySound(playerid, SOUND_TRAIN_ARRIVAL, 0.0, 0.0, 0.0);
    
    SetPlayerCompensatedPos(playerid, 
        g_MetroStations[stationid][station_X],
        g_MetroStations[stationid][station_Y],
        g_MetroStations[stationid][station_Z],
        0,
        0 
    );
    
    g_PlayerTrainVW[playerid] = 0;
    SendClientMessage(playerid, x_ltorange, "METRO: Stigao si na destinaciju!");
}

YCMD:createstation(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid)) return 0;
    
    new name[32];
    if(sscanf(params, "s[32]", name)) return SendClientMessage(playerid, x_ltorange, "USAGE: /createstation [name]");
    
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    
    CreateMetroStation(name, x, y, z);
    SendClientMessage(playerid, x_ltorange, "METRO: Metro stanica uspesno kreirana!");
    return 1;
}

stock IsPlayerNearStation(playerid)
{
    new Float:playerX, Float:playerY, Float:playerZ;
    GetPlayerPos(playerid, playerX, playerY, playerZ);
    
    foreach(new i : MetroStations)
    {
        if(IsPlayerInRangeOfPoint(playerid, 
			1.7, 
            g_MetroStations[i][station_X],
            g_MetroStations[i][station_Y],
            g_MetroStations[i][station_Z]))
        {
            return 1;
        }
    }
    return 0;
}

stock GetPlayerCurrentStation(playerid)
{
    new Float:playerX, Float:playerY, Float:playerZ;
    GetPlayerPos(playerid, playerX, playerY, playerZ);
    
    foreach(new i : MetroStations)
    {
        if(IsPlayerInRangeOfPoint(playerid, 
			1.7, 
            g_MetroStations[i][station_X],
            g_MetroStations[i][station_Y],
            g_MetroStations[i][station_Z]))
        {
            return i;
        }
    }
    return -1;
}

stock CreateMetroStation(const name[], Float:x, Float:y, Float:z)
{
    new idx = Iter_Free(MetroStations);
    if(idx == ITER_NONE) return 0;
    
    new labelText[452];
    format(labelText, sizeof(labelText), ""c_server"\187; "c_white"Metro Station "c_server"\171;\n"c_server"\187; "c_white"%s "c_server"\171;\n"c_server"\187; "c_white"Use /metro to travel "c_server"\171;", name);
    
    g_MetroStations[idx][station_Pickup] = CreatePickup(1239, 1, x, y, z, -1);
    g_MetroStations[idx][station_Label] = Create3DTextLabel(
        labelText,
        0xFFFF00FF,
        x, y, z + 0.5,
        30.0,
        0,
        true
    );
    
    new Query[256];
    mysql_format(SQL, Query, sizeof(Query), 
        "INSERT INTO metro_stations (name, x, y, z) VALUES ('%e', %f, %f, %f)",
        name, x, y, z
    );
    mysql_tquery(SQL, Query, "OnMetroStationCreated", "ifffs", idx, x, y, z, name);
    return 1;
}

forward OnMetroStationCreated(idx, Float:x, Float:y, Float:z, name[]);
public OnMetroStationCreated(idx, Float:x, Float:y, Float:z, name[])
{
    g_MetroStations[idx][station_ID] = cache_insert_id();
    format(g_MetroStations[idx][station_Name], 32, name);
    g_MetroStations[idx][station_X] = x;
    g_MetroStations[idx][station_Y] = y;
    g_MetroStations[idx][station_Z] = z;
    Iter_Add(MetroStations, idx);
}
