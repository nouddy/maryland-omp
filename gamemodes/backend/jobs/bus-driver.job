/*
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Noddy_
 *  @Date           1st December 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           bus-driver.pwn
 *  @Module         jobs
*/

#include <ysilib\YSI_Coding\y_hooks>

#define INVALID_ROUTE_ID        (-1)
#define MAX_ROUTE_ID            (7)

static busDriver_Vehicle[4],
    routeID[MAX_PLAYERS],
    busVehicle[MAX_PLAYERS] = INVALID_VEHICLE_ID;

enum e_ROUTE_DATA {

    Float:route_Position[3]
}

new RouteInfo[][e_ROUTE_DATA] = {

    //* [ 1 ] - Bus Station -> Corona -> Ganton -> Glen Park -> Main Street -> Bus Station

    { {1941.5576, -1935.9686, 13.0402} },
    { {2110.8706, -1707.1532, 13.0475} },
    { {2076.1069, -1242.7205, 23.5490} },
    { {2006.8578, -1057.0656, 24.1792} },
    { {1751.2178, -1158.2406, 23.3850} },
    { {1339.5123, -1252.2383, 13.0405} },
    { {1293.8795, -1612.1737, 13.0411} },
    { {1776.8569, -1911.2544, 13.0616} }
};

hook OnGameModeInit() {

    print("jobs/bus-driver.pwn loaded");

    busDriver_Vehicle[0] = CreateVehicle(431,1796.4677,-1886.6450,13.5091,88.8008,0,0, 1500); 
    busDriver_Vehicle[1] = CreateVehicle(431,1776.7648,-1909.7213,13.4973,179.7419,0,0, 1500); 
    busDriver_Vehicle[2] = CreateVehicle(431,1791.2081,-1933.1820,13.5005,269.5514,0,0, 1500); 
    busDriver_Vehicle[3] = CreateVehicle(431,1804.6656,-1916.3588,13.5049,359.7986,0,0, 1500); 

    for(new i = 0; i < sizeof busDriver_Vehicle; i++) {

        va_SetVehicleNumberPlate(busDriver_Vehicle[0], "ML-BS0%d", i+1);
    }

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerConnect(playerid) {

    routeID[playerid] = INVALID_ROUTE_ID;

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerDisconnect(playerid, reason) {

    if(IsValidVehicle(busVehicle[playerid]))
        return DestroyVehicle(busVehicle[playerid]);

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {

    for(new j = 0; j < sizeof busDriver_Vehicle; j++) {

        if(vehicleid == busDriver_Vehicle[j]) {

            ClearAnimations(playerid);
        }
    }

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerEnterCheckpoint(playerid) {

    if(playerJob[playerid] == JOB_BUS_DRIVER) {

        if(routeID[playerid] != INVALID_ROUTE_ID) {

            if(!IsPlayerInVehicle(playerid, busVehicle[playerid]))
                return SendClientMessage(playerid, x_red, "[ ! ] : "c_white"Morate biti u poslovnom vozilu!");

            new Route = routeID[playerid];

            if(IsPlayerInRangeOfPoint(playerid, 3.50, RouteInfo[Route][route_Position][0], RouteInfo[Route][route_Position][1], RouteInfo[Route][route_Position][2])) {

                routeID[playerid]++;

                if(Route == MAX_ROUTE_ID) {

                    RemovePlayerFromVehicle(playerid);
                    DestroyVehicle(busVehicle[playerid]);
                    
                    routeID[playerid] = INVALID_ROUTE_ID;

                    job.GivePlayerSalary(playerid, jobInfo[playerJob[playerid]][jobSalary]);
                }

                DisablePlayerCheckpoint(playerid);
                SetPlayerCheckpoint(playerid, RouteInfo[routeID[playerid]][route_Position][0], RouteInfo[routeID[playerid]][route_Position][1], RouteInfo[routeID[playerid]][route_Position][2], 3.50);
            }
        }
    }
    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnJobVehicleCreated(playerid, modelID) {

    new Float:pPos[3];

    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);

    busVehicle[playerid] = CreateVehicle(modelID, pPos[0], pPos[1], pPos[2], 90.00, 1, 0, 1500);
    PutPlayerInVehicle(playerid, busVehicle[playerid], 0);

    SendClientMessage(playerid, x_server, "[JOB] >> "c_white"Uspjesno ste kreirali poslovno vozilo!");

    va_SetVehicleNumberPlate(busVehicle[playerid], "ML-BS0%d", playerid);

    if(routeID[playerid] == INVALID_ROUTE_ID) {

        SendClientMessage(playerid, -1, "[ - ] >> Player RoteID is different than INVALID_ROUTE_ID");

        routeID[playerid] = 0;
        SetPlayerCheckpoint(playerid, RouteInfo[routeID[playerid]][route_Position][0], RouteInfo[routeID[playerid]][route_Position][1], RouteInfo[routeID[playerid]][route_Position][2], 3.50);
    }

    return Y_HOOKS_CONTINUE_RETURN_1;
}

//*          >> [ COMMANDS ] <<
