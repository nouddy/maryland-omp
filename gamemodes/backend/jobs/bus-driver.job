/*
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Noddy_
 *  @Date           1st December 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           bus-driver.pwn
 *  @Module         jobs
*/

#include <ysilib\YSI_Coding\y_hooks>

#define INVALID_ROUTE_ID        (-1)
#define MAX_ROUTE_ID            (7)

static busDriver_Vehicle[4],
    routeID[MAX_PLAYERS],
    busVehicle[MAX_PLAYERS] = INVALID_VEHICLE_ID;

enum e_ROUTE_DATA {

    Float:route_Position[3]
}

new RouteInfo[][e_ROUTE_DATA] = {


    { { 2245.1421,-1734.9933,12.9471 } },
    { { 2472.8179,-1735.8374,12.9524 } },
    { { 1868.8044,-1256.9802,12.9603 } },
    { { 1610.1376,-1294.8402,16.8517 } },
    { { 1338.3033,-1252.3529,12.9464 } },
    { { 1293.9431,-1612.2274,12.9538 } },
    { { 1809.4779,-1890.7416,12.9795 } }


};

hook OnGameModeInit() {

    print("jobs/bus-driver.pwn loaded");

    busDriver_Vehicle[0] = CreateVehicle(431,1796.4677,-1886.6450,13.5091,88.8008,0,0, 1500); 
    busDriver_Vehicle[1] = CreateVehicle(431,1776.7648,-1909.7213,13.4973,179.7419,0,0, 1500); 
    busDriver_Vehicle[2] = CreateVehicle(431,1791.2081,-1933.1820,13.5005,269.5514,0,0, 1500); 
    busDriver_Vehicle[3] = CreateVehicle(431,1804.6656,-1916.3588,13.5049,359.7986,0,0, 1500); 

    for(new i = 0; i < sizeof busDriver_Vehicle; i++) {

        va_SetVehicleNumberPlate(busDriver_Vehicle[0], "ML-BS0%d", i+1);
    }

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerConnect(playerid) {

    routeID[playerid] = INVALID_ROUTE_ID;

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerDisconnect(playerid, reason) {

    if(IsValidVehicle(busVehicle[playerid]))
        return DestroyVehicle(busVehicle[playerid]);

    return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {

    for(new j = 0; j < sizeof busDriver_Vehicle; j++) {

        if(vehicleid == busDriver_Vehicle[j]) {

            if(playerJob[playerid] != JOB_BUS_DRIVER)
                return SendClientMessage(playerid, x_ltorange, "Bus Driver \187; "c_white"Niste zaposleni kao vozac busa!");

            if(playerUniform[playerid] != JOB_BUS_DRIVER)
                return SendClientMessage(playerid, x_ltorange, "Bus Driver \187; "c_white"Niste obuceni u poslovnu uniformu!");

            if(routeID[playerid] != INVALID_ROUTE_ID)
                return SendClientMessage(playerid, x_ltorange, "Bus Driver \187; "c_white"Vec vozite odredjenu rutu!");

            new Float:pPos[3];
            GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
            SendClientMessage(playerid, x_ltorange, "Bus Driver \187; "c_white"Zapoceli ste sa poslom, prati lokacije oznacene na mapi!");
            va_SetVehicleNumberPlate(busVehicle[playerid], "ML-BS0%d", playerid);

            routeID[playerid] = 0;
            SetPlayerCheckpoint(playerid, RouteInfo[routeID[playerid]][route_Position][0], RouteInfo[routeID[playerid]][route_Position][1], RouteInfo[routeID[playerid]][route_Position][2], 3.50);
            break;
        }
    }

    return Y_HOOKS_CONTINUE_RETURN_1;
}

stock IsPlayerInBusDriverVehicle(playerid) {

    for(new i = 0; i < sizeof busDriver_Vehicle; i++) {

        if(IsPlayerInVehicle(playerid, busDriver_Vehicle[i]))
            return (true);
    }

    return (false);
}

forward BusDriver_RefreshRouteStatus(playerid);
public BusDriver_RefreshRouteStatus(playerid) {

    TogglePlayerControllable(playerid, true);
    routeID[playerid]++;

    if(routeID[playerid] == MAX_ROUTE_ID) {

        RemovePlayerFromVehicle(playerid);
        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
        routeID[playerid] = INVALID_ROUTE_ID;
        job.GivePlayerSalary(playerid, jobInfo[playerJob[playerid]][jobSalary]);
        return Y_HOOKS_BREAK_RETURN_1;
    }

    SetPlayerCheckpoint(playerid, RouteInfo[routeID[playerid]][route_Position][0], RouteInfo[routeID[playerid]][route_Position][1], RouteInfo[routeID[playerid]][route_Position][2], 3.50);
    return (true);
}

hook OnPlayerEnterCheckpoint(playerid) {

    if(playerJob[playerid] == JOB_BUS_DRIVER) {

        if(routeID[playerid] != INVALID_ROUTE_ID) {

            if(!IsPlayerInBusDriverVehicle(playerid))
                return SendClientMessage(playerid, x_ltorange, "Bus Driver \187; "c_white"Morate biti u poslovnom vozilu!");

            new Route = routeID[playerid];

            if(IsPlayerInRangeOfPoint(playerid, 3.50, RouteInfo[Route][route_Position][0], RouteInfo[Route][route_Position][1], RouteInfo[Route][route_Position][2])) {

                Notify_SendNotification(playerid, "Utovar putnika, sacekajte malo...", "BUS DRIVER", 431);
                DisablePlayerCheckpoint(playerid);
                TogglePlayerControllable(playerid, false);

                SetTimerEx("BusDriver_RefreshRouteStatus", 4500, false, "d", playerid);
            }
        }
    }
    return Y_HOOKS_CONTINUE_RETURN_1;
}


//*          >> [ COMMANDS ] <<
