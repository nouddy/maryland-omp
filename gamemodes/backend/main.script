/**
TODO:
 */

#include <ysilib\YSI_Coding\y_hooks>

const MAX_PASSWORD_LENGTH = 64;
const MIN_PASSWORD_LENGTH = 6;
const MAX_LOGIN_ATTEMPTS = 	3;
static player_LoginAttempts[MAX_PLAYERS];



new bool:UcitavanjeObjekata[MAX_PLAYERS],
	bool:ImaLoginTD[MAX_PLAYERS];

new Text:Login_TD[102];

enum
{
	e_SPAWN_TYPE_REGISTER = 1,
    e_SPAWN_TYPE_LOGIN
};

enum PlayerInformation
{
	SQLID,
	Username[MAX_PLAYER_NAME],
	Password,
	Level,
	Novac,
	Skin,
	Godine,
	Staff,
	LastLogin[50],
	RegisterDate[50]
}
new PlayerInfo[MAX_PLAYERS][PlayerInformation];

//
new Float:RandomSpawnCords[ 3 ][ 3 ] = {

    { 1759.4193,-2367.3213,-27.1483 },
    { 1759.6249,-2365.1611,-27.1483 },
    { 1759.4780,-2369.5403,-27.1483 }
};

//>>
hook SQL_AccountLoad(playerid);
hook SQL_AccountLoad(playerid)
{
    static rows;
	cache_get_row_count(rows);
	if(!rows)
	{
		Dialog_Show(playerid, "dialog_regpassword", DIALOG_STYLE_INPUT,
					"Registracija",
					"%s, unesite Vasu zeljenu lozinku: ",
					"Potvrdi", "Izlaz", GetName(playerid)
				);		
	}
	else
	{
		cache_get_value_name_int(0, "ID", PlayerInfo[playerid][SQLID]);
		cache_get_value_name_int(0, "Password", PlayerInfo[playerid][Password]);
		cache_get_value_name_int(0, "Level", PlayerInfo[playerid][Level]);
		cache_get_value_name_int(0, "Novac", PlayerInfo[playerid][Novac]);
		cache_get_value_name_int(0, "Skin", PlayerInfo[playerid][Skin]);
		cache_get_value_name_int(0, "Godine", PlayerInfo[playerid][Godine]);
		cache_get_value_name_int(0, "Staff", PlayerInfo[playerid][Staff]);

		LoginIgraca(playerid);	

		CallLocalFunction("OnPlayerLoaded", "d", playerid);
	}
}

forward OnPlayerLoaded(playerid);
public OnPlayerLoaded(playerid)
{
	return true;
}

hook PlayerRegistered(playerid);
hook PlayerRegistered(playerid)
{
    PlayerInfo[playerid][Novac] = 2000;
	PlayerInfo[playerid][Skin] = 29;
	PlayerInfo[playerid][Level] = 1;
	PlayerInfo[playerid][SQLID] = cache_insert_id();
    TogglePlayerSpectating(playerid, false);
    IgracUlogovan[playerid] = true;
	SavePlayer(playerid);
}

hook OnGameModeInit()
{
	print("backend/main.script loaded");

	CreateLoginTextDraws();

	return 1;
}

hook OnPlayerConnect(playerid)
{
	ResetujVariable(playerid);

	IgracUlogovan[playerid] = false;
	UcitavanjeObjekata[playerid] = false;
	ImaLoginTD[playerid] = false;

	new query[120];
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `players` WHERE `Username` = '%e'", GetName(playerid));
	mysql_tquery(SQL, query, "SQL_AccountLoad", "i", playerid);

	return 1;
}

hook OnPlayerDisconnect(playerid, reason)
{
	IgracUlogovan[playerid] = false;
	ImaLoginTD[playerid] = false;
	return 1;
}

timer Spawn_Player[100](playerid, type)
{
	if (type == e_SPAWN_TYPE_REGISTER)
		{
			new rand = random( sizeof( RandomSpawnCords ) );
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][Skin],
				RandomSpawnCords[ rand ][ 0 ], RandomSpawnCords[ rand ][ 1 ], RandomSpawnCords[ rand ][ 2 ],90.0,
				0, 0, 0, 0, 0, 0
			);

			SetPlayerVirtualWorld(playerid, 6);
			SetPlayerInterior(playerid, 6);
			SetPlayerScore(playerid, PlayerInfo[playerid][Level]);
			GivePlayerMoney(playerid, PlayerInfo[playerid][Novac]);
			SetPlayerSkin(playerid, PlayerInfo[playerid][Skin]);

			UcitajIgracuObjekte(playerid);
			SpawnPlayer(playerid);
			SetCameraBehindPlayer(playerid);
		}

		else if (type == e_SPAWN_TYPE_LOGIN)
		{
			new rand = random( sizeof( RandomSpawnCords ) );
			//notification.Show(playerid, "USPESNO", "Dobrodosao nazad na Empire", "!", BOXCOLOR_GREEN);

			SendPlayerNotify(playerid, "Uspesno", "Dobrodosao nazad na Empire", 3);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][Skin],
				RandomSpawnCords[ rand ][ 0 ], RandomSpawnCords[ rand ][ 1 ], RandomSpawnCords[ rand ][ 2 ],90.0,
				0, 0, 0, 0, 0, 0
			);

			if(ImaLoginTD[playerid])
			{
				PrikaziLoginTDs(playerid, false);
				ImaLoginTD[playerid] = false;
			}
			UcitajIgracuObjekte(playerid);
			SetPlayerVirtualWorld(playerid, 6);
			SetPlayerInterior(playerid, 6);
			SetPlayerScore(playerid, PlayerInfo[playerid][Level]);
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, PlayerInfo[playerid][Novac]);
			SetPlayerSkin(playerid, PlayerInfo[playerid][Skin]);
			IgracUlogovan[playerid] = true;

			SpawnPlayer(playerid);
			SetCameraBehindPlayer(playerid);

			//
			static q[ 120 ];
			mysql_format(SQL, q, sizeof(q), "UPDATE `players` SET `LastLogin` = '%s' WHERE `Username` = '%e'",ReturnDate(), GetName(playerid));
			mysql_tquery(SQL, q);
			//
		}
}

Dialog: dialog_regpassword(playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if (!(MIN_PASSWORD_LENGTH <= strlen(inputtext) <= MAX_PASSWORD_LENGTH))
		return Dialog_Show(playerid, "dialog_regpassword", DIALOG_STYLE_INPUT,
			"Registracija",
			"%s, unesite Vasu zeljenu lozinku: ",
			"Potvrdi", "Izlaz", GetName(playerid)
		);

	PlayerInfo[playerid][Password] = udb_hash(inputtext);

	Dialog_Show(playerid, "dialog_regages", DIALOG_STYLE_INPUT,
		"Godine",
		"Koliko imate godina: ",
		"Unesi", "Izlaz"
	);

	return 1;
}

Dialog: dialog_regages(const playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if (!(12 <= strval(inputtext) <= 50))
		return Dialog_Show(playerid, "dialog_regages", DIALOG_STYLE_INPUT,
			"Godine",
			"Koliko imate godina: ",
			"Unesi", "Izlaz"
		);
	
	PlayerInfo[playerid][Godine] = strval(inputtext);

	//*
	new query[500];
	mysql_format(SQL, query, sizeof(query), "INSERT INTO `players` (`Username`, `Password`, `Skin`, `Level`, `Novac`, `Godine`, `RegisterDate`) \ 
		VALUES ('%e', '%d', '29', '1', '2000', '%d', '%e')", 
		GetName(playerid), PlayerInfo[playerid][Password], PlayerInfo[playerid][Godine], ReturnDate());
	mysql_tquery(SQL, query, "PlayerRegistered", "i", playerid);
	printf("Main insert");
	//*

	defer Spawn_Player(playerid, 1);

	return 1;
}

Dialog: dialog_login(const playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if(response)
	{
		if(udb_hash(inputtext) == PlayerInfo[playerid][Password])
		{
			if(IgracUlogovan[playerid] == true) return SendClientMessage(playerid, -1, ""c_server"Empire \187; "c_white"Vec si ulogovan");
			defer Spawn_Player(playerid, 2);
		}
		else
		{
			if (player_LoginAttempts[playerid] == MAX_LOGIN_ATTEMPTS)
				return Kick(playerid);

			++player_LoginAttempts[playerid];
			Dialog_Show(playerid, "dialog_login", DIALOG_STYLE_PASSWORD,
				"Prijavljivanje",
				"%s, unesite Vasu tacnu lozinku: ",
				"Potvrdi", "Izlaz", GetName(playerid)
			);
		}
	}

	return 1;
}

//
stock UcitajIgracuObjekte( playerid ) {

	UcitavanjeObjekata[playerid] = true;
	TogglePlayerControllable( playerid, false );
	return true;
}

ptask UcitajObjekte[2000](playerid)
{
	if(UcitavanjeObjekata[playerid])
	{
		new Float:Pozicijeez[3];
		GetPlayerPos(playerid, Pozicijeez[0], Pozicijeez[1], Pozicijeez[2]);
		TogglePlayerControllable(playerid, true);
		SetPlayerPos(playerid, Pozicijeez[0], Pozicijeez[1], Pozicijeez[2]+0.3);
		UcitavanjeObjekata[playerid] = false;
	}
	else return 1;
	return 1;
}
//

forward LoginIgraca(playerid);
public LoginIgraca(playerid)
{

	PrikaziLoginTDs(playerid, true);

	ImaLoginTD[playerid] = true;

	return 1;
}
hook OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Login_TD[85])
	{
		Dialog_Show(playerid, "dialog_login", DIALOG_STYLE_PASSWORD,
			"Prijavljivanje",
			"%s, unesite Vasu tacnu lozinku: ",
			"Potvrdi", "Izlaz", GetName(playerid)
		);	

	}
	return 1;
}