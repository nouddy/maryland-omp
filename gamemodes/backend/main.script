/***
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic & Ogy_
 *  @Date           05th May 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           main.script
 *  @Module         backend
 */

#include <ysilib\YSI_Coding\y_hooks>

const MAX_PASSWORD_LENGTH = 64;
const MIN_PASSWORD_LENGTH = 6;
const MAX_LOGIN_ATTEMPTS = 	3;
static player_LoginAttempts[MAX_PLAYERS];


static LoginActor[MAX_PLAYERS];



new bool:UcitavanjeObjekata[MAX_PLAYERS],
	bool:ImaLoginTD[MAX_PLAYERS];

new Text:Login_TD[71];

enum
{
	e_SPAWN_TYPE_REGISTER = 1,
    e_SPAWN_TYPE_LOGIN
};

enum PlayerInformation
{
	SQLID,
	Username[MAX_PLAYER_NAME],
	Password,
	Level,
	Novac,
	Skin,
	Godine,
	Staff,
	LastLogin[50],
	RegisterDate[50],
	Email[50],
	Drzava[50],
	Pol[10]
}
new PlayerInfo[MAX_PLAYERS][PlayerInformation];

//
new Float:RandomSpawnCords[ 3 ][ 3 ] = {

    { 1759.4193,-2367.3213,-27.1483 },
    { 1759.6249,-2365.1611,-27.1483 },
    { 1759.4780,-2369.5403,-27.1483 }
};

//>>
hook SQL_AccountLoad(playerid);
hook SQL_AccountLoad(playerid)
{
    static rows;
	cache_get_row_count(rows);
	if(!rows)
	{

		RegisterIgraca(playerid);
		/*
		Dialog_Show(playerid, "dialog_regpassword", DIALOG_STYLE_INPUT,
					"Registracija",
					"%s, unesite Vasu zeljenu lozinku: ",
					"Potvrdi", "Izlaz", GetName(playerid)
				);		
		*/
	}
	else
	{
		cache_get_value_name_int(0, "ID", PlayerInfo[playerid][SQLID]);
		cache_get_value_name_int(0, "Password", PlayerInfo[playerid][Password]);
		cache_get_value_name_int(0, "Level", PlayerInfo[playerid][Level]);
		cache_get_value_name_int(0, "Novac", PlayerInfo[playerid][Novac]);
		cache_get_value_name_int(0, "Skin", PlayerInfo[playerid][Skin]);
		cache_get_value_name_int(0, "Godine", PlayerInfo[playerid][Godine]);
		cache_get_value_name_int(0, "Staff", PlayerInfo[playerid][Staff]);

		LoginIgraca(playerid);	

		CallLocalFunction("OnPlayerLoaded", "d", playerid);
	}
}

forward OnPlayerLoaded(playerid);
public OnPlayerLoaded(playerid)
{
	return true;
}

hook PlayerRegistered(playerid);
hook PlayerRegistered(playerid)
{
    PlayerInfo[playerid][Novac] = 2000;
	PlayerInfo[playerid][Skin] = 29;
	PlayerInfo[playerid][Level] = 1;
	PlayerInfo[playerid][SQLID] = cache_insert_id();
    TogglePlayerSpectating(playerid, false);
    IgracUlogovan[playerid] = true;
	SavePlayer(playerid);
}

hook OnGameModeInit()
{
	print("backend/main.script loaded");

	CreateLoginTextDraws();

	return 1;
}

hook OnPlayerConnect(playerid)
{
	ResetujVariable(playerid);

	IgracUlogovan[playerid] = false;
	UcitavanjeObjekata[playerid] = false;
	ImaLoginTD[playerid] = false;

	new query[120];
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `players` WHERE `Username` = '%e'", GetName(playerid));
	mysql_tquery(SQL, query, "SQL_AccountLoad", "i", playerid);

	return 1;
}

hook OnPlayerDisconnect(playerid, reason)
{
	IgracUlogovan[playerid] = false;
	ImaLoginTD[playerid] = false;
	return 1;
}

timer Spawn_Player[100](playerid, type)
{
	if (type == e_SPAWN_TYPE_REGISTER)
		{
			new rand = random( sizeof( RandomSpawnCords ) );
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][Skin],
				RandomSpawnCords[ rand ][ 0 ], RandomSpawnCords[ rand ][ 1 ], RandomSpawnCords[ rand ][ 2 ],90.0,
				0, 0, 0, 0, 0, 0
			);

			SetPlayerVirtualWorld(playerid, 6);
			SetPlayerInterior(playerid, 6);
			SetPlayerScore(playerid, PlayerInfo[playerid][Level]);
			GivePlayerMoney(playerid, PlayerInfo[playerid][Novac]);
			SetPlayerSkin(playerid, PlayerInfo[playerid][Skin]);

			UcitajIgracuObjekte(playerid);
			SpawnPlayer(playerid);
			SetCameraBehindPlayer(playerid);

			TogglePlayerSpectating(playerid, false);

			SetCameraBehindPlayer(playerid);
		}

		else if (type == e_SPAWN_TYPE_LOGIN)
		{
			new rand = random( sizeof( RandomSpawnCords ) );
			//notification.Show(playerid, "USPESNO", "Dobrodosao nazad na Maryland", "!", BOXCOLOR_GREEN);

			SendPlayerNotify(playerid, "Uspesno", "Dobrodosao nazad na Maryland", 3);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][Skin],
				RandomSpawnCords[ rand ][ 0 ], RandomSpawnCords[ rand ][ 1 ], RandomSpawnCords[ rand ][ 2 ],90.0,
				0, 0, 0, 0, 0, 0
			);

			if(ImaLoginTD[playerid])
			{
				PrikaziLoginTDs(playerid, false);
				ImaLoginTD[playerid] = false;
			}
			UcitajIgracuObjekte(playerid);
			SetPlayerVirtualWorld(playerid, 6);
			SetPlayerInterior(playerid, 6);
			SetPlayerScore(playerid, PlayerInfo[playerid][Level]);
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, PlayerInfo[playerid][Novac]);
			SetPlayerSkin(playerid, PlayerInfo[playerid][Skin]);
			IgracUlogovan[playerid] = true;

			SpawnPlayer(playerid);
			SetCameraBehindPlayer(playerid);

			TogglePlayerSpectating(playerid, false);

			SetCameraBehindPlayer(playerid);

			//
			static q[ 120 ];
			mysql_format(SQL, q, sizeof(q), "UPDATE `players` SET `LastLogin` = '%s' WHERE `Username` = '%e'",ReturnDate(), GetName(playerid));
			mysql_tquery(SQL, q);
			//
		}
}


//
timer Register_Player[500](playerid)
{
	if(!Registered[playerid])
		return 1;

	InterpolateCameraPos(playerid, 526.880737, -3685.986328, 27.082427, 527.714477, -3703.954101, 14.042599, 4000);
	InterpolateCameraLookAt(playerid, 526.876220, -3689.528320, 23.553344, 528.050537, -3708.888427, 13.308375, 1500);

	OnRegisterSkinLoad[playerid] = true;

	//
	IzborSkinaTextDraws(playerid, true);
	//
	return 1;
}
//
Dialog: dialog_regpassword(playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if (!(MIN_PASSWORD_LENGTH <= strlen(inputtext) <= MAX_PASSWORD_LENGTH))
		return Dialog_Show(playerid, "dialog_regpassword", DIALOG_STYLE_INPUT,
			"Registracija",
			"%s, unesite Vasu zeljenu lozinku: ",
			"Potvrdi", "Izlaz", GetName(playerid)
		);

	PlayerInfo[playerid][Password] = udb_hash(inputtext);

	RegisterPass[playerid] = true;

	SendClientMessage(playerid, x_ogycolor, "> Uneli ste vasu lozinku.");

	return 1;
}

Dialog: dialog_regages(const playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if (!(12 <= strval(inputtext) <= 50))
		return Dialog_Show(playerid, "dialog_regages", DIALOG_STYLE_INPUT,
			"Godine",
			"Koliko imate godina: ",
			"Unesi", "Izlaz"
		);
	
	PlayerInfo[playerid][Godine] = strval(inputtext);

	RegisterGodine[playerid] = true;

	SendClientMessage(playerid, x_ogycolor, "> Uneli ste vase godine.");

	return 1;
}
Dialog:dialog_reggmail(const playerid, response, listitem , string: inputtext[])
{
	if(!response)
		return Kick(playerid);

	if(response)
	{
	    new mailstring = strfind( inputtext, "@", true);
        if( mailstring == -1 ) {
      		
			Dialog_Show(playerid, "dialog_reggmail", DIALOG_STYLE_INPUT,
				"Email",
				"Upisite vas email, sa kojim cete u slucaju gubitka akaunta vratiti isti.",
				"Unesi", "Izlaz"
				);
		}

		strmid( PlayerInfo[ playerid ][ Email ], inputtext, 0, strlen( inputtext ), 34 );

		RegisterEmail[playerid] = true;

		SendClientMessage(playerid, x_ogycolor, "> Uneli ste vas email.");

	}
	return (true);
}
Dialog:dialog_regdrzava(const playerid, response, listitem, string: inputtext[])
{
	if(!response)
		return Kick(playerid);

	if(response)
	{
		switch(listitem)
		{
			case 0: { strmid( PlayerInfo[ playerid ][ Drzava ], "Srbija", 0, strlen( "Srbija" ), 50 ); }
			case 1: { strmid( PlayerInfo[ playerid ][ Drzava ], "Crna Gora", 0, strlen( "Crna Gora"), 50 ); }
			case 2: { strmid( PlayerInfo[ playerid ][ Drzava ], "Bosna i Hercegovina", 0, strlen( "Bosna i Hercegovina"), 50 ); }
			case 3: { strmid( PlayerInfo[ playerid ][ Drzava ], "Makedonija", 0, strlen( "Makedonija"), 50 ); }
			case 4: { strmid( PlayerInfo[ playerid ][ Drzava ], "Hrvatska", 0, strlen( "Hrvatska"), 50 ); }
			case 5: { strmid( PlayerInfo[ playerid ][ Drzava ], "Slovenija", 0, strlen( "Slovenija"), 50 ); }
		}
		RegisterDrzava[playerid] = true;
		SendClientMessage(playerid, x_ogycolor, "> Odabrali ste vasu drzavu.");
	}
	return (true);
}
Dialog:dialog_regpol(const playerid, response, listitem, string: inputtext[])
{
	if(!response)
		return Kick(playerid);

	if(response)
	{
		new odabir = 0;

		odabir = listitem +1;

		strmid( PlayerInfo[ playerid ][ Pol ], (odabir == 1 ? ("Musko") : ("Zensko")), 0, strlen( (odabir == 1 ? ("Musko") : ("Zensko")) ), 50 );

		RegisterPol[playerid] = true;
		SendClientMessage(playerid, x_ogycolor, "> Odabrali ste vas pol.");
	}
	return (true);
}
Dialog: dialog_login(const playerid, response, listitem, string: inputtext[])
{
	if (!response)
		return Kick(playerid);

	if(response)
	{
		if(udb_hash(inputtext) == PlayerInfo[playerid][Password])
		{
			if(IgracUlogovan[playerid] == true) return SendClientMessage(playerid, -1, ""c_server"Maryland \187; "c_white"Vec si ulogovan");
			defer Spawn_Player(playerid, 2);
		}
		else
		{
			if (player_LoginAttempts[playerid] == MAX_LOGIN_ATTEMPTS)
				return Kick(playerid);

			++player_LoginAttempts[playerid];
			Dialog_Show(playerid, "dialog_login", DIALOG_STYLE_PASSWORD,
				"Prijavljivanje",
				"%s, unesite Vasu tacnu lozinku: ",
				"Potvrdi", "Izlaz", GetName(playerid)
			);
		}
	}

	return 1;
}

//
stock UcitajIgracuObjekte( playerid ) {

	UcitavanjeObjekata[playerid] = true;
	TogglePlayerControllable( playerid, false );
	return true;
}

ptask UcitajObjekte[2000](playerid)
{
	if(UcitavanjeObjekata[playerid])
	{
		new Float:Pozicijeez[3];
		GetPlayerPos(playerid, Pozicijeez[0], Pozicijeez[1], Pozicijeez[2]);
		TogglePlayerControllable(playerid, true);
		SetPlayerPos(playerid, Pozicijeez[0], Pozicijeez[1], Pozicijeez[2]+0.3);
		UcitavanjeObjekata[playerid] = false;
	}
	else return 1;
	return 1;
}
//

forward LoginIgraca(playerid);
public LoginIgraca(playerid)
{

	TogglePlayerSpectating(playerid, true);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld( playerid, playerid+1 );
	SetPlayerPos(playerid,633.7927,-1765.8979,19.4339);
	SetPlayerFacingAngle(playerid,176.0717);
	InterpolateCameraPos(playerid, 628.761047, -1764.393554, 19.677539, 628.761047, -1764.393554, 19.677539, 1000);
	InterpolateCameraLookAt(playerid, 629.909790, -1769.228637, 19.127872, 629.909790, -1769.228637, 19.127872, 1000);

	LoginActor[playerid] = CreateActor(29, 632.1260,-1769.9631,18.9629,169.9771);
	SetActorVirtualWorld(LoginActor[playerid], playerid+1);
	ApplyActorAnimation(LoginActor[playerid], "INT_OFFICE", "OFF_SIT_TYPE_LOOP", 4.1, 1, 0, 0, 0, 0); 

	PrikaziLoginTDs(playerid, true);
	Dialog_Show(playerid, "dialog_login", DIALOG_STYLE_PASSWORD,
			"Login Dialog",
			"\\c {ffffff}Dobro nam dosli nazad na "c_server"Mary"c_server2"land {ffffff}Community.\n\
			 \\c Vase ime: %s unesite Vasu tacnu lozinku: ",
			"Potvrdi", "Izlaz", GetName(playerid)
	);	

	ImaLoginTD[playerid] = true;

	return 1;
}
hook OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	return 1;
}
forward RegisterIgraca(playerid);
public RegisterIgraca(playerid)
{
	CreatePlayerRegister(playerid, true);
	return (true);
}