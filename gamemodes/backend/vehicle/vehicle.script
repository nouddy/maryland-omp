/***
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic & Ogy_
 *  @Date           05th May 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           vehicle.script
 *  @Module         vehicle
 */

#include <ysilib\YSI_Coding\y_hooks>

new vehicleFuel[MAX_VEHICLES],
    bool:vehicleLocked[MAX_VEHICLES],
    vehicleFuelType[MAX_VEHICLES];

enum {

    VEHICLE_FUEL_TYPE_DIESEL = 1,
    VEHICLE_FUEL_TYPE_PETROL,
    VEHICLE_FUEL_TYPE_ELECTRIC,
    VEHICLE_FUEL_TYPE_METAN
}

hook OnGameModeInit()
{
	print("vehicle/vehicle.script loaded");

	return 1;
}

hook OnVehicleSpawn(vehicleid)
{
	new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(IsVehicleBicycle(GetVehicleModel(vehicleid)))
    {
        SetVehicleParamsEx(vehicleid, true, false, false, doors, bonnet, boot, objective);
    }
    /*if (IsVehicleDrone(GetVehicleModel(vehicleid)))
    {
        SetVehicleParamsEx(vehicleid, 1, 0, 0, doors, bonnet, boot, objective);
    }*/
    else 
    {
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, false, false, doors, bonnet, boot, objective);
    }

	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerStateChange(playerid, PLAYER_STATE:newstate, PLAYER_STATE:oldstate)
{
    new veh = GetPlayerVehicleID(playerid),
                bool:engine,
                bool:lights,
                bool:alarm,
                bool:doors,
                bool:bonnet,
                bool:boot,
                bool:objective;

    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

    if (newstate == PLAYER_STATE_DRIVER) 
    {
        if(!engine)
        {   
            notification.Show(playerid, "Info", "Da upalis vozilo koristi tipku 'CTRL', za svetla 'Y'.", "?", BOXCOLOR_BLUE);
        }
    }
	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {

        if(newkeys & KEY_ACTION)
        {
            new veh = GetPlayerVehicleID(playerid),
                bool:engine,
                bool:lights,
                bool:alarm,
                bool:doors,
                bool:bonnet,
                bool:boot,
                bool:objective;

            if(IsVehicleBicycle(GetVehicleModel(veh)))
                return true;
                   
            GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

            if(!engine)
                SetVehicleParamsEx(veh, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
            else
                SetVehicleParamsEx(veh, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);

            new str[60];
            format(str, sizeof(str),"%s si motor.", (!engine) ? "Upalio" : "Ugasio");
            notification.Show(playerid, "Info", str, "?", BOXCOLOR_BLUE);

            return Y_HOOKS_BREAK_RETURN_1;
        }
        if(newkeys & KEY_YES)
        {
            new veh = GetPlayerVehicleID(playerid),
                bool:engine,
                bool:lights,
                bool:alarm,
                bool:doors,
                bool:bonnet,
                bool:boot,
                bool:objective;
            
            if(IsVehicleBicycle(GetVehicleModel(veh)))
            {
                return Y_HOOKS_BREAK_RETURN_1;
            }
            
            GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

            if(!lights)
            {
                SetVehicleParamsEx(veh, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);

            }
            else
            {
                SetVehicleParamsEx(veh, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
            }
            new str[60];
            format(str, sizeof(str),"%s si svetla.", (!lights) ? "Upalio" : "Ugasio");
            notification.Show(playerid, "Info", str, "?", BOXCOLOR_BLUE);

            return Y_HOOKS_BREAK_RETURN_1;
        }
    }
	return Y_HOOKS_CONTINUE_RETURN_1;
}

// CreateVehicle(modelid, Float:spawnX, Float:spawnY, Float:spawnZ, Float:angle, colour1, colour2, respawnDelay, bool:addSiren = false);

stock CreateVehicleEx(modelid, Float:spawnX, Float:spawnY, Float:spawnZ, Float:angle, colour1, colour2, respawnDelay, bool:addSiren = false, const bool:locked = true, fuel = 100, fuelType = VEHICLE_FUEL_TYPE_DIESEL) {

    new vehicleID = CreateVehicle(modelid, Float:spawnX, Float:spawnY, Float:spawnZ, Float:angle, colour1, colour2, respawnDelay, bool:addSiren);
    vehicleFuel[vehicleID] = fuel;
    vehicleLocked[vehicleID] = locked;
    vehicleFuelType[vehicleID] = fuelType;

    return (vehicleID);
}

stock IsVehicleLocked(vehicle) {

    if(vehicleLocked[vehicle]) return true;
    else return (false);
}

stock GetVehicleFuel(vehicle) return vehicleFuel[vehicle];

stock ReturnVehicleFuelType(vehicle) {

    new fuelType[24];

    switch(vehicleFuelType[vehicle]) {

        case VEHICLE_FUEL_TYPE_DIESEL:      { fuelType = "Diesel"; }
        case VEHICLE_FUEL_TYPE_PETROL:      { fuelType = "Petrol"; }
        case VEHICLE_FUEL_TYPE_ELECTRIC:    { fuelType = "Electric"; }
        case VEHICLE_FUEL_TYPE_METAN:       { fuelType = "Metane"; }
    }
    return (fuelType);
}

