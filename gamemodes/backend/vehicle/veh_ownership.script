/***
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic & Ogy_
 *  @Date           05th May 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           vehicle_ownership.script
 *  @Module         vehicle
 */

#include <ysilib\YSI_Coding\y_hooks>

#define VEHICLE_OWNER_NONE			(0)

const MAX_CARS = 2000;
const MAX_PLATE_LEN = 32;

enum {

	FUEL_TYPE_PETROL = 1,
	FUEL_TYPE_DIESEL,
	FUEL_TYPE_METAN,
	FUEL_TYPE_ELECTRIC
}

enum {

	VEHICLE_STATE_MARYLAND = 1,
	VEHICLE_STATE_EGYPT,
	VEHICLE_STATE_ITALY
}

enum OWNER_TYPE
{
	OWNER_TYPE_UNKNOWN,
	OWNER_TYPE_PLAYER,
	OWNER_TYPE_FACTION,
	OWNER_TYPE_BUSINESS,
	OWNER_TYPE_JOB,
	OWNER_TYPE_PUBLIC,//Public transports (rent, buses for npc's, trains and such)
}

new OwnerTypeString[OWNER_TYPE][24] = {
	"Unknown",
	"Player",
	"Faction",
	"Business",
	"Job",
	"Public"
};

enum e_VEHICLE_DATA {

	vID,
	vOwner,
	vOwnerType,
	vModel,
	vColor[2], 
	vPlate[MAX_PLATE_LEN],

	Float:vPos[4],

	vRegDate,
	vOil,
	vRange,
	vRangeKM,
 
	vFuel,
	vFuelType,

	bool:vAlarm,
	bool:vXenon,
	bool:vLock,
	bool:vNitro,

	vState,

	vGpsTracker,//Not a bool (Left possibility for different levels - Like update frequecy for position and such)
	vMods[14],
}

new eVehicle[MAX_CARS][e_VEHICLE_DATA],
	pvVehicle[MAX_CARS],

	Iterator:iter_Vehicles<MAX_CARS>;

new bool:pVehicleLocate[MAX_PLAYERS];

#include "backend/stocks/vehicle.stock"								//* Vehicle Stock Provere


forward LoadVehicleData();
public LoadVehicleData() {

	new rows = cache_num_rows();
	if(!rows) return false;
	else {

		for(new i = 0; i < rows; i++) {

			cache_get_value_name_int(i, "vID", eVehicle[i][vID]);
			cache_get_value_name_int(i, "vOwner", eVehicle[i][vOwner]);
			cache_get_value_name_int(i, "vOwnerType", eVehicle[i][vOwnerType]);
			cache_get_value_name_int(i, "vModel", eVehicle[i][vModel]);
			cache_get_value_name_int(i, "Color1", eVehicle[i][vColor][0]);
			cache_get_value_name_int(i, "Color2", eVehicle[i][vColor][1]);

			cache_get_value_name(i, "vPlate", eVehicle[i][vPlate], MAX_PLATE_LEN);

			cache_get_value_name_float(i, "vPosX", eVehicle[i][vPos][0]);
			cache_get_value_name_float(i, "vPosY", eVehicle[i][vPos][1]);
			cache_get_value_name_float(i, "vPosZ", eVehicle[i][vPos][2]);
			cache_get_value_name_float(i, "vPosA", eVehicle[i][vPos][3]);

			cache_get_value_name_int(i, "vRegDate", eVehicle[i][vRegDate]);
			cache_get_value_name_int(i, "vOil", eVehicle[i][vOil]);
			cache_get_value_name_int(i, "vRange", eVehicle[i][vRange]);
			cache_get_value_name_int(i, "vRangeKM", eVehicle[i][vRangeKM]);

			cache_get_value_name_int(i, "vFuel", eVehicle[i][vFuel]);
			cache_get_value_name_int(i, "vFuelType", eVehicle[i][vFuelType]);

			cache_get_value_name_bool(i, "vAlarm", eVehicle[i][vAlarm]);
			cache_get_value_name_bool(i, "vXenon", eVehicle[i][vXenon]);
			cache_get_value_name_bool(i, "vLock", eVehicle[i][vLock]);
			cache_get_value_name_bool(i, "vNitro", eVehicle[i][vNitro]);

			cache_get_value_name_int(i, "vState", eVehicle[i][vState]);

			pvVehicle[i] = CreateVehicle(eVehicle[i][vModel], eVehicle[i][vPos][0], eVehicle[i][vPos][1], eVehicle[i][vPos][2], eVehicle[i][vPos][3], eVehicle[i][vColor][0], eVehicle[i][vColor][1], 1500, true);

			new plate_string[MAX_PLATE_LEN];
			format(plate_string, sizeof plate_string, "%s", eVehicle[i][vPlate]);

			SetVehicleNumberPlate(pvVehicle[i], plate_string);

			Iter_Add(iter_Vehicles, i);

			//printf("LOADED : Vehicle %d * Owner %d * Owner Type %d * VehicleID %d", eVehicle[i][vID], eVehicle[i][vOwner], eVehicle[i][vOwnerType], pvVehicle[i]);

		}

		printf("Ucitano %d vozila", rows);

	}


	return 1;
}

forward Vehicle_PreloadPosition(idx);
public Vehicle_PreloadPosition(idx) {

	DestroyVehicle(pvVehicle[idx]);
	pvVehicle[idx] = CreateVehicle(eVehicle[idx][vModel], eVehicle[idx][vPos][0], eVehicle[idx][vPos][1], eVehicle[idx][vPos][2], eVehicle[idx][vPos][3], eVehicle[idx][vColor][0], eVehicle[idx][vColor][1], 1500);

	return (true);
}

forward CreateVehicleData(id);
public CreateVehicleData(id) {

	eVehicle[id][vID] = cache_insert_id();
	pvVehicle[id] = CreateVehicle(eVehicle[id][vModel], eVehicle[id][vPos][0], eVehicle[id][vPos][1], eVehicle[id][vPos][2]+4.0, eVehicle[id][vPos][3], eVehicle[id][vColor][0], eVehicle[id][vColor][1], 1500, true);

	new plt_tmp[MAX_PLATE_LEN];
	format(plt_tmp, sizeof plt_tmp, "%s", eVehicle[id][vPlate]);

	SetVehicleNumberPlate(pvVehicle[id], plt_tmp);

	Iter_Add(iter_Vehicles, id);
	return 1;
}

stock IsPlayerNearPersonalVehicle(playerid) {

	foreach(new i : iter_Vehicles) {

		if(GetCharacterSQLID(playerid) == eVehicle[i][vOwner]) {
			
			new Float:tmpPos[3];
			GetVehiclePos(pvVehicle[i], tmpPos[0], tmpPos[1], tmpPos[2]);
		
			if(IsPlayerInRangeOfPoint(playerid, 3.0, tmpPos[0], tmpPos[1], tmpPos[2]))
				return (true);
		}
	}

	return false;
}

stock IsPlayerInPersonalVehicle(playerid) {

	foreach(new i : iter_Vehicles) {

		if(GetCharacterSQLID(playerid) == eVehicle[i][vOwner]) {

			if(IsPlayerInVehicle(playerid, pvVehicle[i]))
				return true;
		}
	}

	return false;
}

stock CharacterHasVehicle(playerid) {

	foreach(new i : iter_Vehicles) {

		if(eVehicle[i][vOwner] == GetCharacterSQLID(playerid))
			return true;
	}

	return false;
}

hook OnGameModeInit() {

	Iter_Init(iter_Vehicles);

	mysql_tquery(SQL, "SELECT * FROM `vehicles`", "LoadVehicleData");

	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerConnect(playerid) {

	pVehicleLocate[playerid] = false;

	return Y_HOOKS_CONTINUE_RETURN_1;
}

YCMD:createvehicle(playerid, params[], help) {

	if(!IsPlayerAdmin(playerid))
		return notification.Show(playerid, "Error", "Samo RCON Admini.", "!", BOXCOLOR_RED);

	new model, color[2];

	if(sscanf(params, "ddd", model, color[0], color[1]))
		return notification.Show(playerid, "Usage", "/createvehicle [Model] [Boja 1] [Boja 2]", "?", BOXCOLOR_GREEN);

	new Float:pPos[4], id = Iter_Free(iter_Vehicles);

	new plate_str[MAX_PLATE_LEN];
	format(plate_str, sizeof plate_str, "N/A-00-12");

	eVehicle[id][vOwner] = 0;
	eVehicle[id][vOwnerType] = 0;
	eVehicle[id][vModel] = model;
	eVehicle[id][vColor][0] = color[0];
	eVehicle[id][vColor][1] = color[1];

	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	GetPlayerFacingAngle(playerid, pPos[3]);

	eVehicle[id][vPos][0] = pPos[0];
	eVehicle[id][vPos][1] = pPos[1];
	eVehicle[id][vPos][2] = pPos[2];
	eVehicle[id][vPos][3] = pPos[3];

	strmid(eVehicle[id][vPlate], plate_str, 0, strlen(plate_str), MAX_PLATE_LEN);

	eVehicle[id][vRegDate] = 0;
	eVehicle[id][vOil] = 100;
	eVehicle[id][vRange] = 0;
	eVehicle[id][vRangeKM] = 0;

	eVehicle[id][vFuel] = 100;

	if(PetroleumVehicle(id)) { eVehicle[id][vFuelType] = FUEL_TYPE_PETROL; }
	else if(DieselVehicle(id)) { eVehicle[id][vFuelType] = FUEL_TYPE_DIESEL; }
	else if(MetanVehicle(id)) { eVehicle[id][vFuelType] = FUEL_TYPE_METAN; }
	else if(ElectricVehicle(id)) { eVehicle[id][vFuelType] = FUEL_TYPE_ELECTRIC; }

	eVehicle[id][vAlarm] = false;

	if(IsPlayerInDynamicArea(playerid, italy_Area1) || IsPlayerInDynamicArea(playerid, italy_Area2)) {

		eVehicle[id][vState] = VEHICLE_STATE_ITALY;
	}
	else if(IsPlayerInDynamicArea(playerid, egypt_Area1) || IsPlayerInDynamicArea(playerid, egypt_Area2)) {

		eVehicle[id][vState] = VEHICLE_STATE_EGYPT;
	}
	else eVehicle[id][vState] = VEHICLE_STATE_MARYLAND;


	new q[666];

	mysql_format(SQL, q, sizeof q, "INSERT INTO `vehicles` (`vOwner`, `vOwnerType`,`vModel`, `Color1`, `Color2`, `vPlate`, \
								    `vPosX`, `vPosY`, `vPosZ`, `vPosA`, `vRegDate`, `vOil`, `vRange`, `vRangeKM`, `vFuel`, \
									`vFuelType`, `vAlarm`, `vXenon`, `vLock`, `vNitro`, `vState`) \
									VALUES ('%d', '%d', '%d', '%d', '%d', '%e', '%f', '%f', '%f', '%f', '0', '100', '0', '0', '100', '%d', '0', '0', '0', '0', '%d')",
									eVehicle[id][vOwner],
									eVehicle[id][vOwnerType],
									eVehicle[id][vModel], eVehicle[id][vColor][0], eVehicle[id][vColor][1],
									eVehicle[id][vPlate], eVehicle[id][vPos][0], eVehicle[id][vPos][1],
									eVehicle[id][vPos][2], eVehicle[id][vPos][3], eVehicle[id][vFuelType], eVehicle[id][vState]);
	mysql_tquery(SQL, q, "CreateVehicleData", "d", id);

	return 1;
}

YCMD:v(playerid, params[], help) {

	if(!CharacterHasVehicle(playerid))
		return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne posjedujete vozilo!");

	Dialog_Show(playerid, "dialog_vehicleOptions", DIALOG_STYLE_LIST, ""c_server"Maryland \187; "c_ltorange"Vehicle Panel", 
						                                              ""c_server"#1 \187; "c_white"Otkljucaj - Zakljucaj\n\
																	  "c_server"#2 \187; "c_white"Lociraj\n\
																	  "c_server"#3 \187; "c_white"Parkiraj", "Odaberi", "Odustani");

	return 1;
}

Dialog:dialog_vehicleOptions(playerid, response, listitem, string:inputtext[]) {

	if(response) {

		switch(listitem) {

			case 0: {

				if(!IsPlayerNearPersonalVehicle(playerid))
					return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne nalazite se blizu vozila!");

				foreach(new i : iter_Vehicles) {

					if(GetCharacterSQLID(playerid) == eVehicle[i][vOwner]) {

						if(eVehicle[i][vLock]) {
							
							eVehicle[i][vLock] = false;
							SendClientMessage(playerid, x_server, "maryland \187; "c_white"Otkljucali ste vozilo!");
							new q[128];
							mysql_format(SQL, q, sizeof q, "UPDATE `vehicles` SET `vLock` = '%d' WHERE `vID` = '%d'", eVehicle[i][vLock], eVehicle[i][vID]);
							mysql_tquery(SQL, q);
							break;
						}

						if(!eVehicle[i][vLock]) {
							
							eVehicle[i][vLock] = true;
							SendClientMessage(playerid, x_server, "maryland \187; "c_white"Zakljucali ste vozilo!");
							new q[128];
							mysql_format(SQL, q, sizeof q, "UPDATE `vehicles` SET `vLock` = '%d' WHERE `vID` = '%d'", eVehicle[i][vLock], eVehicle[i][vID]);
							mysql_tquery(SQL, q);
							break;
						}
						break;
					}
				}
			}

			case 1: {

				
				foreach(new i : iter_Vehicles) {

					if(GetCharacterSQLID(playerid) == eVehicle[i][vOwner]) {
						
						static Float:tmpPos[3];
						GetVehiclePos(pvVehicle[i], tmpPos[0], tmpPos[1], tmpPos[2]);
						SetPlayerCheckpoint(playerid, tmpPos[0], tmpPos[1], tmpPos[2], 3.50);
						SendClientMessage(playerid, x_server, "maryland \187; "c_white"Locirali ste vozilo, marker vam je oznacen na mapi!");

						pVehicleLocate[playerid] = true;

						break;
					}
				}

			}

			case 2: {
				
				if(!IsPlayerInPersonalVehicle(playerid))
					return SendClientMessage(playerid, x_server, "maryland \187; "c_white"Ne nalazite se u vasem vozilu!");

				foreach(new i : iter_Vehicles) {

					if(GetCharacterSQLID(playerid) == eVehicle[i][vOwner]) {
						
						static Float:tmpPos[4];
						GetVehiclePos(pvVehicle[i], tmpPos[0], tmpPos[1], tmpPos[2]);
						GetVehicleZAngle(pvVehicle[i], tmpPos[3]);

						eVehicle[i][vPos][0] = tmpPos[0];
						eVehicle[i][vPos][1] = tmpPos[1];
						eVehicle[i][vPos][2] = tmpPos[2];
						eVehicle[i][vPos][3] = tmpPos[3];

						

						SendClientMessage(playerid, x_server, "maryland \187; "c_white"Uspjesno ste parkirali vozilo!");

						new q[244];
						mysql_format(SQL, q, sizeof q, "UPDATE `vehicles` SET `vPosX` = '%f', `vPosY` = '%f', `vPosZ` = '%f', `vPosA` = '%f' WHERE `vID` = '%d'",
						 tmpPos[0], tmpPos[1], tmpPos[2], tmpPos[3], eVehicle[i][vID]);
						mysql_tquery(SQL, q, "Vehicle_PreloadPosition", "d", i);
						break;
					}
				}
			}
		}
	}

	return 1;
}


hook OnPlayerEnterCheckpoint(playerid) {

	if(pVehicleLocate[playerid])
	{
		pVehicleLocate[playerid] = false;
		DisablePlayerCheckpoint(playerid);
	}

	return Y_HOOKS_CONTINUE_RETURN_1;
}