/*
 *
 *  ##     ##    ###    ########  ##    ## ##          ###    ##    ## ########  
 *  ###   ###   ## ##   ##     ##  ##  ##  ##         ## ##   ###   ## ##     ## 
 *  #### ####  ##   ##  ##     ##   ####   ##        ##   ##  ####  ## ##     ## 
 *  ## ### ## ##     ## ########     ##    ##       ##     ## ## ## ## ##     ## 
 *  ##     ## ######### ##   ##      ##    ##       ######### ##  #### ##     ## 
 *  ##     ## ##     ## ##    ##     ##    ##       ##     ## ##   ### ##     ## 
 *  ##     ## ##     ## ##     ##    ##    ######## ##     ## ##    ## ########   
 *
 *  @Author         Vostic
 *  @Date           24th May 2023
 *  @Weburl         https://maryland-ogc.com
 *  @Project        maryland_project
 *
 *  @File           safezone.script
 *  @Module         safezone
 */

#include <ysilib\YSI_Coding\y_hooks>

new bool:loaded = true;
#define MAX_SAFEZONES 			(50)
/*
     ___                 _      
    (  _)               ( )     
    | |   ___  ____  __ | |  __ 
    ( )_ ( o )( __ )(_' ( _)(_' 
    /___\ \_/ /_\/_\/__)/_\ /__)
                                
*/
new PlayerCreateSafeZone[MAX_PLAYERS],
	PlayerCreateSafeZoneID[MAX_PLAYERS];


/*
     ____                        
    (  __)                       
    | |_   ____  _ _  __  __  __ 
    (  _) ( __ )( U )( _`'_ )(_' 
    /____\/_\/_\/___\/_\`'/_\/__)

*/

enum S_Safe {
	safeID,
	Float:safeMinX,
	Float:safeMinY,
	Float:safeMaxX,
	Float:safeMaxY,
	Float:safeRadius,
	safeColor,
	safePickup,
	Text3D:safeLabel,
	Float:safePickupX,
	Float:safePickupY,
	Float:safePickupZ
};
new SafeZone[MAX_SAFEZONES][S_Safe];
new Iterator:SafeZone<MAX_SAFEZONES>;
new Float:CreatingPos[MAX_PLAYERS][4];
new bool:InSafeZone[MAX_PLAYERS];

/*
     _  _            _        
    ( )( )          ( )       
    | L| | ___  ___ | | _  __ 
    ( __ )( o )( o )( _'( (_' 
    /_\/_\ \_/  \_/ /_\\_|/__)

*/

hook OnGameModeInit()
{
    if(loaded)
    {
        print("safezone/safezone.script loaded");  
    }

    mysql_pquery(SQL, "SELECT * FROM `safezones`", "SafeZonesLoad" );
    return 1;
}

hook OnPlayerConnect(playerid)
{
    InSafeZone[playerid] = false;
	
    return 1;
}

hook OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)
{
	if(newkeys & KEY_FIRE)
	{
		if(PlayerCreateSafeZone[playerid] == 1)
		{
			new Float:Pozicija[3];
			GetPlayerPos(playerid, Pozicija[0],Pozicija[1],Pozicija[2]);

			CreatingPos[playerid][0] = Pozicija[0];
			CreatingPos[playerid][1] = Pozicija[1];

			SendClientMessage(playerid, x_server,"Sada odredjujes drugu stranu, idi u skroz diagonalnu stranu!");
			PlayerCreateSafeZone[playerid]++;
		}
		else if(PlayerCreateSafeZone[playerid] == 2)
		{
			new Float:Pozicija[4];
			GetPlayerPos(playerid, Pozicija[0],Pozicija[1],Pozicija[2]);
			GetPlayerFacingAngle(playerid, Pozicija[3]);

			new id = PlayerCreateSafeZoneID[ playerid ];
			CreatingPos[playerid][2] = Pozicija[0];
			CreatingPos[playerid][3] = Pozicija[1];

			if( CreatingPos[ playerid ][ 0 ] > CreatingPos[ playerid ][ 2 ] )
			{
			    SafeZone[ id ][ safeMaxX ] = CreatingPos[ playerid ][ 0 ];
				SafeZone[ id ][ safeMinX ] = CreatingPos[ playerid ][ 2 ];
			}
			else if( CreatingPos[ playerid ][ 2 ] > CreatingPos[ playerid ][ 0 ] )
			{
			    SafeZone[ id ][ safeMaxX ] = CreatingPos[ playerid ][ 2 ];
				SafeZone[ id ][ safeMinX ] = CreatingPos[ playerid ][ 0 ];
			}
			if( CreatingPos[ playerid ][ 1 ] > CreatingPos[ playerid ][ 3 ] )
			{
			    SafeZone[ id ][ safeMaxY ] = CreatingPos[ playerid ][ 1 ];
				SafeZone[ id ][ safeMinY ] = CreatingPos[ playerid ][ 3 ];
			}
			else if( CreatingPos[ playerid ][ 3 ] > CreatingPos[ playerid ][ 1 ] )
			{
			    SafeZone[ id ][ safeMaxY ] = CreatingPos[ playerid ][ 3 ];
				SafeZone[ id ][ safeMinY ] = CreatingPos[ playerid ][ 1 ];
			}
			PlayerCreateSafeZone[playerid]++;
			SendClientMessage(playerid, x_server,"Sada postavljas poziciju labela za napravljenu safe zonu.");
		}
		else if(PlayerCreateSafeZone[playerid] == 3)
		{
			new id = PlayerCreateSafeZoneID[ playerid ];
			new Float:Pozicija[3];
			GetPlayerPos(playerid, Pozicija[0],Pozicija[1],Pozicija[2]);
			Iter_Add(SafeZone, id);
			SafeZone[id][safeRadius] = 30.0;
			SafeZone[id][safePickupX] = Pozicija[0];
			SafeZone[id][safePickupY] = Pozicija[1];
			SafeZone[id][safePickupZ] = Pozicija[2];
			SafeZone[id][safeID] = CreateDynamicRectangle(SafeZone[id][safeMinX], SafeZone[id][safeMinY], SafeZone[id][safeMaxX], SafeZone[id][safeMaxY], -1, -1, -1);
		    static q[850];
			mysql_format(SQL, q, sizeof(q),
			    "INSERT INTO `safezones` (`MinX`, `MinY`, `MaxX`, `MaxY`, `Radius`, `Color`, `PickupX`, `PickupY`, `PickupZ`) \
				 VALUES('%f','%f','%f','%f','%f','%d','%f','%f','%f')", 
				 SafeZone[id][safeMinX],SafeZone[id][safeMinY],SafeZone[id][safeMaxX],SafeZone[id][safeMaxY],SafeZone[id][safeRadius],SafeZone[id][safeColor],SafeZone[id][safePickupX],
				 SafeZone[id][safePickupY], SafeZone[id][safePickupZ]);

			mysql_pquery(SQL, q, "SafeZonaID", "i", id);
		    safeZoneLabel(id);
		    SaveSafeZone(id);
		    PlayerCreateSafeZone[playerid] = 0;
		    PlayerCreateSafeZoneID[playerid] = -1;
		    SendClientMessage(playerid, x_server, "Uspesno si napravio safe zonu.");
		}

		if(!IsPlayerAdmin(playerid))
		{
			if(InSafeZone[playerid]) 
			{

				if(!IsPlayerInAnyVehicle(playerid)) {


					GameTextForPlayer(playerid, "NE TUCI SE U SAFE ZONI!!!", 5000, 3);
					TogglePlayerControllable(playerid, false);

					new Float:pPos[3];
					GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
					SetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]+2.0);
					SetTimerEx("ZonaReload", 5000, false, "i", playerid);
				}
			}
		}
    }
	return Y_HOOKS_CONTINUE_RETURN_1;
}

forward ZonaReload(playerid);
public ZonaReload(playerid)
{
    TogglePlayerControllable(playerid, true);
 	return 1;
}
/*
     _                _      _   ___                 
    ( )              ( )    / ) /  _)                
    | |   ___  ___  _| |   / /  \_"-.  ___  _ _  ___ 
    ( )_ ( o )( o )/ o )  ( /    __) )( o )( V )( o_)
    /___\ \_/ /_^_\\___\ /_/    /___/ /_^_\ \_/  \(  

*/
forward SafeZonesLoad();
public SafeZonesLoad()
{
   	new iRows, id;
	cache_get_row_count(iRows);
	for(new i = 0; i < iRows; i++)
	{
	    cache_get_value_name_int(i, "safeSQLID", id);
	    cache_get_value_name_float(i, "MinX", SafeZone[id][safeMinX]);
	    cache_get_value_name_float(i, "MinY", SafeZone[id][safeMinY]);
	    cache_get_value_name_float(i, "MaxX", SafeZone[id][safeMaxX]);
	    cache_get_value_name_float(i, "MaxY",SafeZone[id][safeMaxY]);
	    cache_get_value_name_float(i, "Radius",SafeZone[id][safeRadius]);
	    cache_get_value_name_int(i, "Color",SafeZone[id][safeColor]);
	    cache_get_value_name_float(i, "PickupX",SafeZone[id][safePickupX]);
	    cache_get_value_name_float(i, "PickupY",SafeZone[id][safePickupY]);
	    cache_get_value_name_float(i, "PickupZ",SafeZone[id][safePickupZ]);
		Iter_Add(SafeZone, 0);
		Iter_Add(SafeZone, id);
		safeZoneLabel(id);
		SafeZone[ id ][ safeID ] = CreateDynamicRectangle(SafeZone[id][safeMinX], SafeZone[id][safeMinY], SafeZone[id][safeMaxX], SafeZone[id][safeMaxY], -1, -1, -1);
	}
	printf("Ucitavanje Safe Zona(%d)... Uspesno",iRows);
	return 1;
}
stock SaveSafeZone( id )
{
    new query[1024];
    format(query, sizeof(query),"`MinX`='%f',`MinY`='%f',`MaxX`='%f',`MaxY`='%f',`Radius`='%f',`Color`='%d',`PickupX`='%f',`PickupY`='%d',`PickupZ`='%f'",
		SafeZone[id][safeMinX],
		SafeZone[id][safeMinY],
		SafeZone[id][safeMaxX],
		SafeZone[id][safeMaxY],
		SafeZone[id][safeRadius],
		SafeZone[id][safeColor],
		SafeZone[id][safePickupX],
		SafeZone[id][safePickupY],
		SafeZone[id][safePickupZ]
	);
	format(query, sizeof(query), "UPDATE `safezones` SET %s WHERE `safeSQLID`='%i'", query, id);
	mysql_tquery(SQL, query);
	return 1;
}
forward SafeZonaID(id);
public SafeZonaID(id)
{
	SafeZone[id][safeID] = cache_insert_id();
	return(true);
}
forward safeZoneLabel(id);
public safeZoneLabel(id)
{
	DestroyDynamicPickup(SafeZone[id][safePickup]);
	DestroyDynamic3DTextLabel(SafeZone[id][safeLabel]);
	new string[250];
	format( string, sizeof( string ), "   » {ffffff}SAFE ZONA{70D869} «   \n{ffffff}Radius {70D869} %.2f metara\n{ffffff}Zabranjeno je udaranje/pucanje/ubijanje igraca u {70D869}Safe Zoni.",SafeZone[id][safeRadius],id);
	SafeZone[ id ][ safeLabel ] = CreateDynamic3DTextLabel( string, 0x70D869FF, SafeZone[ id ][ safePickupX ], SafeZone[ id ][ safePickupY ], SafeZone[ id ][ safePickupZ ], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
	SafeZone[ id ][ safePickup ] = CreateDynamicPickup( 1240, 1, SafeZone[ id ][ safePickupX ], SafeZone[ id ][ safePickupY ], SafeZone[ id ][ safePickupZ ]);
	return (true);
}

/*
     ____                _   _                
    (  __)              ( ) (_)               
    | |_   _ _  ____  __| |  _  ___  ____  __ 
    ( __) ( U )( __ )/ /( _)( )( o )( __ )(_' 
    /_\   /___\/_\/_\\_\/_\ /_\ \_/ /_\/_\/__)

*/
hook OnPlayerEnterDynamicArea(playerid, STREAMER_TAG_AREA:areaid) {

	foreach(new s : SafeZone)
	{
		if(areaid == SafeZone[s][safeID]) 
		{
            TextDrawSetStringForPlayer(Global_TD[77], playerid, "SAFE");
			InSafeZone[playerid] = true;
		}
	}

	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerLeaveDynamicArea(playerid, STREAMER_TAG_AREA:areaid) {

	foreach(new i : SafeZone)
	{
		if(areaid == SafeZone[i][safeID]) 
		{
            TextDrawSetStringForPlayer(Global_TD[77], playerid, "UNSAFE");
			InSafeZone[playerid] = false;
		}
	}

	return Y_HOOKS_CONTINUE_RETURN_1;
}

GetNearestSafe(playerid)
{
    foreach(new i : SafeZone)
	{
        if( IsPlayerInDynamicArea(playerid, SafeZone[i][safeID])) { return i; }
    }
	return -1;
}